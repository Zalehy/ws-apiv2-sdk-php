<?php
/**
 * Wheel
 *
 * PHP version 5
 *
 * @category Class
 * @package  WheelSizeApiClient
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Wheel Fitment API
 *
 * The Wheel Fitment API provides a programmatic gateway to the comprehensive database and services of www.wheel-size.com. This API is expertly designed to retrieve detailed information regarding the vehicle fitment database for rims and tires, encompassing both original equipment (OE) and  aftermarket fitments, along with plus/minus sizing fitment data. Our offerings are further diversified  by including a multitude of country-specific and language-specific options.  We take pride in the extensive coverage of our fitment data, which nearly spans 100% for vehicles manufactured since the year 2000. Moreover, to ensure the utmost accuracy and relevance of the information we provide, our fitment data is meticulously updated on a daily basis.
 *
 * OpenAPI spec version: v2
 * Contact: info@wheel-size.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.32
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace WheelSizeApiClient\Model;

use \ArrayAccess;
use \WheelSizeApiClient\ObjectSerializer;

/**
 * Wheel Class Doc Comment
 *
 * @category Class
 * @package  WheelSizeApiClient
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Wheel implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Wheel';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'rim' => 'string',
        'tire' => 'string',
        'tire_is_82series' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'rim' => null,
        'tire' => null,
        'tire_is_82series' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'rim' => 'rim',
        'tire' => 'tire',
        'tire_is_82series' => 'tire_is_82series'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'rim' => 'setRim',
        'tire' => 'setTire',
        'tire_is_82series' => 'setTireIs82series'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'rim' => 'getRim',
        'tire' => 'getTire',
        'tire_is_82series' => 'getTireIs82series'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['rim'] = isset($data['rim']) ? $data['rim'] : null;
        $this->container['tire'] = isset($data['tire']) ? $data['tire'] : null;
        $this->container['tire_is_82series'] = isset($data['tire_is_82series']) ? $data['tire_is_82series'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['rim'] === null) {
            $invalidProperties[] = "'rim' can't be null";
        }
        if ((mb_strlen($this->container['rim']) < 1)) {
            $invalidProperties[] = "invalid value for 'rim', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['tire'] === null) {
            $invalidProperties[] = "'tire' can't be null";
        }
        if ((mb_strlen($this->container['tire']) < 1)) {
            $invalidProperties[] = "invalid value for 'tire', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['tire_is_82series'] === null) {
            $invalidProperties[] = "'tire_is_82series' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets rim
     *
     * @return string
     */
    public function getRim()
    {
        return $this->container['rim'];
    }

    /**
     * Sets rim
     *
     * @param string $rim Formatter rim size (e.g. `7Jx18 ET38`, can be __*`\"\"`*__)
     *
     * @return $this
     */
    public function setRim($rim)
    {

        if ((mb_strlen($rim) < 1)) {
            throw new \InvalidArgumentException('invalid length for $rim when calling Wheel., must be bigger than or equal to 1.');
        }

        $this->container['rim'] = $rim;

        return $this;
    }

    /**
     * Gets tire
     *
     * @return string
     */
    public function getTire()
    {
        return $this->container['tire'];
    }

    /**
     * Sets tire
     *
     * @param string $tire Formatted tire size (e.g. `225/55R18`, can be __*`\"\"`*__)
     *
     * @return $this
     */
    public function setTire($tire)
    {

        if ((mb_strlen($tire) < 1)) {
            throw new \InvalidArgumentException('invalid length for $tire when calling Wheel., must be bigger than or equal to 1.');
        }

        $this->container['tire'] = $tire;

        return $this;
    }

    /**
     * Gets tire_is_82series
     *
     * @return bool
     */
    public function getTireIs82series()
    {
        return $this->container['tire_is_82series'];
    }

    /**
     * Sets tire_is_82series
     *
     * @param bool $tire_is_82series Is an old tire with assumed aspect ratio 82%
     *
     * @return $this
     */
    public function setTireIs82series($tire_is_82series)
    {
        $this->container['tire_is_82series'] = $tire_is_82series;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


