<?php
/**
 * Technical
 *
 * PHP version 5
 *
 * @category Class
 * @package  WheelSizeApiClient
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Wheel Fitment API
 *
 * The Wheel Fitment API provides a programmatic gateway to the comprehensive database and services of www.wheel-size.com. This API is expertly designed to retrieve detailed information regarding the vehicle fitment database for rims and tires, encompassing both original equipment (OE) and  aftermarket fitments, along with plus/minus sizing fitment data. Our offerings are further diversified  by including a multitude of country-specific and language-specific options.  We take pride in the extensive coverage of our fitment data, which nearly spans 100% for vehicles manufactured since the year 2000. Moreover, to ensure the utmost accuracy and relevance of the information we provide, our fitment data is meticulously updated on a daily basis.
 *
 * OpenAPI spec version: v2
 * Contact: info@wheel-size.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.32
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace WheelSizeApiClient\Model;

use \ArrayAccess;
use \WheelSizeApiClient\ObjectSerializer;

/**
 * Technical Class Doc Comment
 *
 * @category Class
 * @package  WheelSizeApiClient
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Technical implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Technical';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'wheel_fasteners' => '\WheelSizeApiClient\Model\WheelFasteners',
        'wheel_tightening_torque' => 'string',
        'stud_holes' => 'int',
        'pcd' => 'float',
        'centre_bore' => 'string',
        'bolt_pattern' => 'string',
        'rear_axis_stud_holes' => 'int',
        'rear_axis_pcd' => 'float',
        'rear_axis_centre_bore' => 'float',
        'rear_axis_bolt_pattern' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'wheel_fasteners' => null,
        'wheel_tightening_torque' => null,
        'stud_holes' => null,
        'pcd' => null,
        'centre_bore' => null,
        'bolt_pattern' => null,
        'rear_axis_stud_holes' => null,
        'rear_axis_pcd' => null,
        'rear_axis_centre_bore' => null,
        'rear_axis_bolt_pattern' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'wheel_fasteners' => 'wheel_fasteners',
        'wheel_tightening_torque' => 'wheel_tightening_torque',
        'stud_holes' => 'stud_holes',
        'pcd' => 'pcd',
        'centre_bore' => 'centre_bore',
        'bolt_pattern' => 'bolt_pattern',
        'rear_axis_stud_holes' => 'rear_axis_stud_holes',
        'rear_axis_pcd' => 'rear_axis_pcd',
        'rear_axis_centre_bore' => 'rear_axis_centre_bore',
        'rear_axis_bolt_pattern' => 'rear_axis_bolt_pattern'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'wheel_fasteners' => 'setWheelFasteners',
        'wheel_tightening_torque' => 'setWheelTighteningTorque',
        'stud_holes' => 'setStudHoles',
        'pcd' => 'setPcd',
        'centre_bore' => 'setCentreBore',
        'bolt_pattern' => 'setBoltPattern',
        'rear_axis_stud_holes' => 'setRearAxisStudHoles',
        'rear_axis_pcd' => 'setRearAxisPcd',
        'rear_axis_centre_bore' => 'setRearAxisCentreBore',
        'rear_axis_bolt_pattern' => 'setRearAxisBoltPattern'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'wheel_fasteners' => 'getWheelFasteners',
        'wheel_tightening_torque' => 'getWheelTighteningTorque',
        'stud_holes' => 'getStudHoles',
        'pcd' => 'getPcd',
        'centre_bore' => 'getCentreBore',
        'bolt_pattern' => 'getBoltPattern',
        'rear_axis_stud_holes' => 'getRearAxisStudHoles',
        'rear_axis_pcd' => 'getRearAxisPcd',
        'rear_axis_centre_bore' => 'getRearAxisCentreBore',
        'rear_axis_bolt_pattern' => 'getRearAxisBoltPattern'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['wheel_fasteners'] = isset($data['wheel_fasteners']) ? $data['wheel_fasteners'] : null;
        $this->container['wheel_tightening_torque'] = isset($data['wheel_tightening_torque']) ? $data['wheel_tightening_torque'] : null;
        $this->container['stud_holes'] = isset($data['stud_holes']) ? $data['stud_holes'] : null;
        $this->container['pcd'] = isset($data['pcd']) ? $data['pcd'] : null;
        $this->container['centre_bore'] = isset($data['centre_bore']) ? $data['centre_bore'] : null;
        $this->container['bolt_pattern'] = isset($data['bolt_pattern']) ? $data['bolt_pattern'] : null;
        $this->container['rear_axis_stud_holes'] = isset($data['rear_axis_stud_holes']) ? $data['rear_axis_stud_holes'] : null;
        $this->container['rear_axis_pcd'] = isset($data['rear_axis_pcd']) ? $data['rear_axis_pcd'] : null;
        $this->container['rear_axis_centre_bore'] = isset($data['rear_axis_centre_bore']) ? $data['rear_axis_centre_bore'] : null;
        $this->container['rear_axis_bolt_pattern'] = isset($data['rear_axis_bolt_pattern']) ? $data['rear_axis_bolt_pattern'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['wheel_fasteners'] === null) {
            $invalidProperties[] = "'wheel_fasteners' can't be null";
        }
        if ($this->container['centre_bore'] === null) {
            $invalidProperties[] = "'centre_bore' can't be null";
        }
        if ((mb_strlen($this->container['centre_bore']) < 1)) {
            $invalidProperties[] = "invalid value for 'centre_bore', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['bolt_pattern'] === null) {
            $invalidProperties[] = "'bolt_pattern' can't be null";
        }
        if ((mb_strlen($this->container['bolt_pattern']) < 1)) {
            $invalidProperties[] = "invalid value for 'bolt_pattern', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['rear_axis_bolt_pattern'] === null) {
            $invalidProperties[] = "'rear_axis_bolt_pattern' can't be null";
        }
        if ((mb_strlen($this->container['rear_axis_bolt_pattern']) < 1)) {
            $invalidProperties[] = "invalid value for 'rear_axis_bolt_pattern', the character length must be bigger than or equal to 1.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets wheel_fasteners
     *
     * @return \WheelSizeApiClient\Model\WheelFasteners
     */
    public function getWheelFasteners()
    {
        return $this->container['wheel_fasteners'];
    }

    /**
     * Sets wheel_fasteners
     *
     * @param \WheelSizeApiClient\Model\WheelFasteners $wheel_fasteners wheel_fasteners
     *
     * @return $this
     */
    public function setWheelFasteners($wheel_fasteners)
    {
        $this->container['wheel_fasteners'] = $wheel_fasteners;

        return $this;
    }

    /**
     * Gets wheel_tightening_torque
     *
     * @return string|null
     */
    public function getWheelTighteningTorque()
    {
        return $this->container['wheel_tightening_torque'];
    }

    /**
     * Sets wheel_tightening_torque
     *
     * @param string|null $wheel_tightening_torque Torque value or range (e.g. 125 Nm, can be null)
     *
     * @return $this
     */
    public function setWheelTighteningTorque($wheel_tightening_torque)
    {
        $this->container['wheel_tightening_torque'] = $wheel_tightening_torque;

        return $this;
    }

    /**
     * Gets stud_holes
     *
     * @return int|null
     */
    public function getStudHoles()
    {
        return $this->container['stud_holes'];
    }

    /**
     * Sets stud_holes
     *
     * @param int|null $stud_holes Number of stud holes (e.g. 5, can be null)
     *
     * @return $this
     */
    public function setStudHoles($stud_holes)
    {
        $this->container['stud_holes'] = $stud_holes;

        return $this;
    }

    /**
     * Gets pcd
     *
     * @return float|null
     */
    public function getPcd()
    {
        return $this->container['pcd'];
    }

    /**
     * Sets pcd
     *
     * @param float|null $pcd Pitch circle diameter, mm (e.g. 114.3, can be null)
     *
     * @return $this
     */
    public function setPcd($pcd)
    {
        $this->container['pcd'] = $pcd;

        return $this;
    }

    /**
     * Gets centre_bore
     *
     * @return string
     */
    public function getCentreBore()
    {
        return $this->container['centre_bore'];
    }

    /**
     * Sets centre_bore
     *
     * @param string $centre_bore Centre bore diameter, mm (e.g. `64.1`, can be __*`N/A`*__)
     *
     * @return $this
     */
    public function setCentreBore($centre_bore)
    {

        if ((mb_strlen($centre_bore) < 1)) {
            throw new \InvalidArgumentException('invalid length for $centre_bore when calling Technical., must be bigger than or equal to 1.');
        }

        $this->container['centre_bore'] = $centre_bore;

        return $this;
    }

    /**
     * Gets bolt_pattern
     *
     * @return string
     */
    public function getBoltPattern()
    {
        return $this->container['bolt_pattern'];
    }

    /**
     * Sets bolt_pattern
     *
     * @param string $bolt_pattern Bolt pattern (e.g. `5x105`, can be __*`N/A`*__)
     *
     * @return $this
     */
    public function setBoltPattern($bolt_pattern)
    {

        if ((mb_strlen($bolt_pattern) < 1)) {
            throw new \InvalidArgumentException('invalid length for $bolt_pattern when calling Technical., must be bigger than or equal to 1.');
        }

        $this->container['bolt_pattern'] = $bolt_pattern;

        return $this;
    }

    /**
     * Gets rear_axis_stud_holes
     *
     * @return int|null
     */
    public function getRearAxisStudHoles()
    {
        return $this->container['rear_axis_stud_holes'];
    }

    /**
     * Sets rear_axis_stud_holes
     *
     * @param int|null $rear_axis_stud_holes Number of stud holes (e.g. 5, can be null)
     *
     * @return $this
     */
    public function setRearAxisStudHoles($rear_axis_stud_holes)
    {
        $this->container['rear_axis_stud_holes'] = $rear_axis_stud_holes;

        return $this;
    }

    /**
     * Gets rear_axis_pcd
     *
     * @return float|null
     */
    public function getRearAxisPcd()
    {
        return $this->container['rear_axis_pcd'];
    }

    /**
     * Sets rear_axis_pcd
     *
     * @param float|null $rear_axis_pcd Pitch circle diameter, mm (e.g. 114.3, can be null)
     *
     * @return $this
     */
    public function setRearAxisPcd($rear_axis_pcd)
    {
        $this->container['rear_axis_pcd'] = $rear_axis_pcd;

        return $this;
    }

    /**
     * Gets rear_axis_centre_bore
     *
     * @return float|null
     */
    public function getRearAxisCentreBore()
    {
        return $this->container['rear_axis_centre_bore'];
    }

    /**
     * Sets rear_axis_centre_bore
     *
     * @param float|null $rear_axis_centre_bore Centre bore diameter, mm (e.g. 64.1, can be null)
     *
     * @return $this
     */
    public function setRearAxisCentreBore($rear_axis_centre_bore)
    {
        $this->container['rear_axis_centre_bore'] = $rear_axis_centre_bore;

        return $this;
    }

    /**
     * Gets rear_axis_bolt_pattern
     *
     * @return string
     */
    public function getRearAxisBoltPattern()
    {
        return $this->container['rear_axis_bolt_pattern'];
    }

    /**
     * Sets rear_axis_bolt_pattern
     *
     * @param string $rear_axis_bolt_pattern Bolt pattern (e.g. `5x105`, can be __*`N/A`*__)
     *
     * @return $this
     */
    public function setRearAxisBoltPattern($rear_axis_bolt_pattern)
    {

        if ((mb_strlen($rear_axis_bolt_pattern) < 1)) {
            throw new \InvalidArgumentException('invalid length for $rear_axis_bolt_pattern when calling Technical., must be bigger than or equal to 1.');
        }

        $this->container['rear_axis_bolt_pattern'] = $rear_axis_bolt_pattern;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


