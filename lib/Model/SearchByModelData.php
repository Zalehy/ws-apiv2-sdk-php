<?php
/**
 * SearchByModelData
 *
 * PHP version 5
 *
 * @category Class
 * @package  WheelSizeApiClient
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Wheel Fitment API
 *
 * The Wheel Fitment API provides a programmatic gateway to the comprehensive database and services of www.wheel-size.com. This API is expertly designed to retrieve detailed information regarding the vehicle fitment database for rims and tires, encompassing both original equipment (OE) and  aftermarket fitments, along with plus/minus sizing fitment data. Our offerings are further diversified  by including a multitude of country-specific and language-specific options.  We take pride in the extensive coverage of our fitment data, which nearly spans 100% for vehicles manufactured since the year 2000. Moreover, to ensure the utmost accuracy and relevance of the information we provide, our fitment data is meticulously updated on a daily basis.
 *
 * OpenAPI spec version: v2
 * Contact: info@wheel-size.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.32
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace WheelSizeApiClient\Model;

use \ArrayAccess;
use \WheelSizeApiClient\ObjectSerializer;

/**
 * SearchByModelData Class Doc Comment
 *
 * @category Class
 * @package  WheelSizeApiClient
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class SearchByModelData implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'SearchByModelData';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'slug' => 'string',
        'trim_scoring' => 'float',
        'trim_attributes' => 'string',
        'trim_body_types' => 'string',
        'trim_levels' => 'string',
        'make' => '\WheelSizeApiClient\Model\MakesDataBase',
        'model' => '\WheelSizeApiClient\Model\ModelsDataBase',
        'generation' => '\WheelSizeApiClient\Model\Generation',
        'start_year' => 'int',
        'end_year' => 'int',
        'engine' => '\WheelSizeApiClient\Model\Engine',
        'regions' => 'string',
        'technical' => '\WheelSizeApiClient\Model\Technical',
        'tire_type' => 'string',
        'wheels' => '\WheelSizeApiClient\Model\WheelPair[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'slug' => null,
        'trim_scoring' => null,
        'trim_attributes' => null,
        'trim_body_types' => null,
        'trim_levels' => null,
        'make' => null,
        'model' => null,
        'generation' => null,
        'start_year' => null,
        'end_year' => null,
        'engine' => null,
        'regions' => null,
        'technical' => null,
        'tire_type' => null,
        'wheels' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'slug' => 'slug',
        'trim_scoring' => 'trim_scoring',
        'trim_attributes' => 'trim_attributes',
        'trim_body_types' => 'trim_body_types',
        'trim_levels' => 'trim_levels',
        'make' => 'make',
        'model' => 'model',
        'generation' => 'generation',
        'start_year' => 'start_year',
        'end_year' => 'end_year',
        'engine' => 'engine',
        'regions' => 'regions',
        'technical' => 'technical',
        'tire_type' => 'tire_type',
        'wheels' => 'wheels'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'slug' => 'setSlug',
        'trim_scoring' => 'setTrimScoring',
        'trim_attributes' => 'setTrimAttributes',
        'trim_body_types' => 'setTrimBodyTypes',
        'trim_levels' => 'setTrimLevels',
        'make' => 'setMake',
        'model' => 'setModel',
        'generation' => 'setGeneration',
        'start_year' => 'setStartYear',
        'end_year' => 'setEndYear',
        'engine' => 'setEngine',
        'regions' => 'setRegions',
        'technical' => 'setTechnical',
        'tire_type' => 'setTireType',
        'wheels' => 'setWheels'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'slug' => 'getSlug',
        'trim_scoring' => 'getTrimScoring',
        'trim_attributes' => 'getTrimAttributes',
        'trim_body_types' => 'getTrimBodyTypes',
        'trim_levels' => 'getTrimLevels',
        'make' => 'getMake',
        'model' => 'getModel',
        'generation' => 'getGeneration',
        'start_year' => 'getStartYear',
        'end_year' => 'getEndYear',
        'engine' => 'getEngine',
        'regions' => 'getRegions',
        'technical' => 'getTechnical',
        'tire_type' => 'getTireType',
        'wheels' => 'getWheels'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['slug'] = isset($data['slug']) ? $data['slug'] : null;
        $this->container['trim_scoring'] = isset($data['trim_scoring']) ? $data['trim_scoring'] : null;
        $this->container['trim_attributes'] = isset($data['trim_attributes']) ? $data['trim_attributes'] : null;
        $this->container['trim_body_types'] = isset($data['trim_body_types']) ? $data['trim_body_types'] : null;
        $this->container['trim_levels'] = isset($data['trim_levels']) ? $data['trim_levels'] : null;
        $this->container['make'] = isset($data['make']) ? $data['make'] : null;
        $this->container['model'] = isset($data['model']) ? $data['model'] : null;
        $this->container['generation'] = isset($data['generation']) ? $data['generation'] : null;
        $this->container['start_year'] = isset($data['start_year']) ? $data['start_year'] : null;
        $this->container['end_year'] = isset($data['end_year']) ? $data['end_year'] : null;
        $this->container['engine'] = isset($data['engine']) ? $data['engine'] : null;
        $this->container['regions'] = isset($data['regions']) ? $data['regions'] : null;
        $this->container['technical'] = isset($data['technical']) ? $data['technical'] : null;
        $this->container['tire_type'] = isset($data['tire_type']) ? $data['tire_type'] : null;
        $this->container['wheels'] = isset($data['wheels']) ? $data['wheels'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['slug'] === null) {
            $invalidProperties[] = "'slug' can't be null";
        }
        if ((mb_strlen($this->container['slug']) < 1)) {
            $invalidProperties[] = "invalid value for 'slug', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['make'] === null) {
            $invalidProperties[] = "'make' can't be null";
        }
        if ($this->container['model'] === null) {
            $invalidProperties[] = "'model' can't be null";
        }
        if ($this->container['generation'] === null) {
            $invalidProperties[] = "'generation' can't be null";
        }
        if ($this->container['start_year'] === null) {
            $invalidProperties[] = "'start_year' can't be null";
        }
        if ($this->container['end_year'] === null) {
            $invalidProperties[] = "'end_year' can't be null";
        }
        if ($this->container['engine'] === null) {
            $invalidProperties[] = "'engine' can't be null";
        }
        if ($this->container['technical'] === null) {
            $invalidProperties[] = "'technical' can't be null";
        }
        if ($this->container['tire_type'] === null) {
            $invalidProperties[] = "'tire_type' can't be null";
        }
        if ((mb_strlen($this->container['tire_type']) < 1)) {
            $invalidProperties[] = "invalid value for 'tire_type', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['wheels'] === null) {
            $invalidProperties[] = "'wheels' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets slug
     *
     * @return string
     */
    public function getSlug()
    {
        return $this->container['slug'];
    }

    /**
     * Sets slug
     *
     * @param string $slug Identifier for the element. Value is a hash based on ID
     *
     * @return $this
     */
    public function setSlug($slug)
    {

        if ((mb_strlen($slug) < 1)) {
            throw new \InvalidArgumentException('invalid length for $slug when calling SearchByModelData., must be bigger than or equal to 1.');
        }

        $this->container['slug'] = $slug;

        return $this;
    }

    /**
     * Gets trim_scoring
     *
     * @return float
     */
    public function getTrimScoring()
    {
        return $this->container['trim_scoring'];
    }

    /**
     * Sets trim_scoring
     *
     * @param float $trim_scoring Relevance score is calculated based on the computing a 'trim' similarity score  A Relevance score between 0 and 100, with 100 being the highest. (e.g. `84.4`)
     *
     * @return $this
     */
    public function setTrimScoring($trim_scoring)
    {
        $this->container['trim_scoring'] = $trim_scoring;

        return $this;
    }

    /**
     * Gets trim_attributes
     *
     * @return string
     */
    public function getTrimAttributes()
    {
        return $this->container['trim_attributes'];
    }

    /**
     * Sets trim_attributes
     *
     * @param string $trim_attributes Trim attributes (e.g. `AWD`, can be __*`empty array`*__)
     *
     * @return $this
     */
    public function setTrimAttributes($trim_attributes)
    {
        $this->container['trim_attributes'] = $trim_attributes;

        return $this;
    }

    /**
     * Gets trim_body_types
     *
     * @return string
     */
    public function getTrimBodyTypes()
    {
        return $this->container['trim_body_types'];
    }

    /**
     * Sets trim_body_types
     *
     * @param string $trim_body_types Trim body types (e.g. `Convertible`, can be __*`empty array`*__)
     *
     * @return $this
     */
    public function setTrimBodyTypes($trim_body_types)
    {
        $this->container['trim_body_types'] = $trim_body_types;

        return $this;
    }

    /**
     * Gets trim_levels
     *
     * @return string
     */
    public function getTrimLevels()
    {
        return $this->container['trim_levels'];
    }

    /**
     * Sets trim_levels
     *
     * @param string $trim_levels Trim Levels (e.g. `EX-L, Touring, Executive`, can be __*`empty array`*__)
     *
     * @return $this
     */
    public function setTrimLevels($trim_levels)
    {
        $this->container['trim_levels'] = $trim_levels;

        return $this;
    }

    /**
     * Gets make
     *
     * @return \WheelSizeApiClient\Model\MakesDataBase
     */
    public function getMake()
    {
        return $this->container['make'];
    }

    /**
     * Sets make
     *
     * @param \WheelSizeApiClient\Model\MakesDataBase $make make
     *
     * @return $this
     */
    public function setMake($make)
    {
        $this->container['make'] = $make;

        return $this;
    }

    /**
     * Gets model
     *
     * @return \WheelSizeApiClient\Model\ModelsDataBase
     */
    public function getModel()
    {
        return $this->container['model'];
    }

    /**
     * Sets model
     *
     * @param \WheelSizeApiClient\Model\ModelsDataBase $model model
     *
     * @return $this
     */
    public function setModel($model)
    {
        $this->container['model'] = $model;

        return $this;
    }

    /**
     * Gets generation
     *
     * @return \WheelSizeApiClient\Model\Generation
     */
    public function getGeneration()
    {
        return $this->container['generation'];
    }

    /**
     * Sets generation
     *
     * @param \WheelSizeApiClient\Model\Generation $generation generation
     *
     * @return $this
     */
    public function setGeneration($generation)
    {
        $this->container['generation'] = $generation;

        return $this;
    }

    /**
     * Gets start_year
     *
     * @return int
     */
    public function getStartYear()
    {
        return $this->container['start_year'];
    }

    /**
     * Sets start_year
     *
     * @param int $start_year start_year
     *
     * @return $this
     */
    public function setStartYear($start_year)
    {
        $this->container['start_year'] = $start_year;

        return $this;
    }

    /**
     * Gets end_year
     *
     * @return int
     */
    public function getEndYear()
    {
        return $this->container['end_year'];
    }

    /**
     * Sets end_year
     *
     * @param int $end_year end_year
     *
     * @return $this
     */
    public function setEndYear($end_year)
    {
        $this->container['end_year'] = $end_year;

        return $this;
    }

    /**
     * Gets engine
     *
     * @return \WheelSizeApiClient\Model\Engine
     */
    public function getEngine()
    {
        return $this->container['engine'];
    }

    /**
     * Sets engine
     *
     * @param \WheelSizeApiClient\Model\Engine $engine engine
     *
     * @return $this
     */
    public function setEngine($engine)
    {
        $this->container['engine'] = $engine;

        return $this;
    }

    /**
     * Gets regions
     *
     * @return string
     */
    public function getRegions()
    {
        return $this->container['regions'];
    }

    /**
     * Sets regions
     *
     * @param string $regions regions
     *
     * @return $this
     */
    public function setRegions($regions)
    {
        $this->container['regions'] = $regions;

        return $this;
    }

    /**
     * Gets technical
     *
     * @return \WheelSizeApiClient\Model\Technical
     */
    public function getTechnical()
    {
        return $this->container['technical'];
    }

    /**
     * Sets technical
     *
     * @param \WheelSizeApiClient\Model\Technical $technical technical
     *
     * @return $this
     */
    public function setTechnical($technical)
    {
        $this->container['technical'] = $technical;

        return $this;
    }

    /**
     * Gets tire_type
     *
     * @return string
     */
    public function getTireType()
    {
        return $this->container['tire_type'];
    }

    /**
     * Sets tire_type
     *
     * @param string $tire_type Tire type to mount on that car
     *
     * @return $this
     */
    public function setTireType($tire_type)
    {

        if ((mb_strlen($tire_type) < 1)) {
            throw new \InvalidArgumentException('invalid length for $tire_type when calling SearchByModelData., must be bigger than or equal to 1.');
        }

        $this->container['tire_type'] = $tire_type;

        return $this;
    }

    /**
     * Gets wheels
     *
     * @return \WheelSizeApiClient\Model\WheelPair[]
     */
    public function getWheels()
    {
        return $this->container['wheels'];
    }

    /**
     * Sets wheels
     *
     * @param \WheelSizeApiClient\Model\WheelPair[] $wheels wheels
     *
     * @return $this
     */
    public function setWheels($wheels)
    {
        $this->container['wheels'] = $wheels;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


