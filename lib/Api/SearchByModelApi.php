<?php
/**
 * SearchByModelApi
 * PHP version 5
 *
 * @category Class
 * @package  WheelSizeApiClient
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Wheel Fitment API
 *
 * The Wheel Fitment API provides a programmatic gateway to the comprehensive database and services of www.wheel-size.com. This API is expertly designed to retrieve detailed information regarding the vehicle fitment database for rims and tires, encompassing both original equipment (OE) and  aftermarket fitments, along with plus/minus sizing fitment data. Our offerings are further diversified  by including a multitude of country-specific and language-specific options.  We take pride in the extensive coverage of our fitment data, which nearly spans 100% for vehicles manufactured since the year 2000. Moreover, to ensure the utmost accuracy and relevance of the information we provide, our fitment data is meticulously updated on a daily basis.
 *
 * OpenAPI spec version: v2
 * Contact: info@wheel-size.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.32
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace WheelSizeApiClient\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use WheelSizeApiClient\ApiException;
use WheelSizeApiClient\Configuration;
use WheelSizeApiClient\HeaderSelector;
use WheelSizeApiClient\ObjectSerializer;

/**
 * SearchByModelApi Class Doc Comment
 *
 * @category Class
 * @package  WheelSizeApiClient
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class SearchByModelApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation generations
     *
     * List generations
     *
     * @param  string $make A car&#39;s **&#x60;Make&#x60;** is the brand of the vehicle. You can use _**&#x60;GET /makes/&#x60;**_ to get a list of available *&#x60;slug&#x60;* values. (e.g. &#x60;mitsubishi&#x60;) (required)
     * @param  string $model The particular **&#x60;Model&#x60;** of the brand. You can use _**&#x60;GET /models/&#x60;**_ to get a list of available *&#x60;slug&#x60;* values. (e.g. &#x60;outlander&#x60;) (required)
     * @param  string[] $region A **&#x60;Region&#x60;** is the region where the car was officially sold or is still being sold. You can use _**&#x60;GET /regions/&#x60;**_ to get a list of available *&#x60;slug&#x60;* values. (e.g. &#x60;usdm&#x60;) (optional)
     * @param  string $ordering Comma-separated list without spaces. Supported field names: *&#x60;start&#x60;* (optional)
     *
     * @throws \WheelSizeApiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \WheelSizeApiClient\Model\GenerationsReportOutput
     */
    public function generations($make, $model, $region = null, $ordering = null)
    {
        list($response) = $this->generationsWithHttpInfo($make, $model, $region, $ordering);
        return $response;
    }

    /**
     * Operation generationsWithHttpInfo
     *
     * List generations
     *
     * @param  string $make A car&#39;s **&#x60;Make&#x60;** is the brand of the vehicle. You can use _**&#x60;GET /makes/&#x60;**_ to get a list of available *&#x60;slug&#x60;* values. (e.g. &#x60;mitsubishi&#x60;) (required)
     * @param  string $model The particular **&#x60;Model&#x60;** of the brand. You can use _**&#x60;GET /models/&#x60;**_ to get a list of available *&#x60;slug&#x60;* values. (e.g. &#x60;outlander&#x60;) (required)
     * @param  string[] $region A **&#x60;Region&#x60;** is the region where the car was officially sold or is still being sold. You can use _**&#x60;GET /regions/&#x60;**_ to get a list of available *&#x60;slug&#x60;* values. (e.g. &#x60;usdm&#x60;) (optional)
     * @param  string $ordering Comma-separated list without spaces. Supported field names: *&#x60;start&#x60;* (optional)
     *
     * @throws \WheelSizeApiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \WheelSizeApiClient\Model\GenerationsReportOutput, HTTP status code, HTTP response headers (array of strings)
     */
    public function generationsWithHttpInfo($make, $model, $region = null, $ordering = null)
    {
        $returnType = '\WheelSizeApiClient\Model\GenerationsReportOutput';
        $request = $this->generationsRequest($make, $model, $region, $ordering);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WheelSizeApiClient\Model\GenerationsReportOutput',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation generationsAsync
     *
     * List generations
     *
     * @param  string $make A car&#39;s **&#x60;Make&#x60;** is the brand of the vehicle. You can use _**&#x60;GET /makes/&#x60;**_ to get a list of available *&#x60;slug&#x60;* values. (e.g. &#x60;mitsubishi&#x60;) (required)
     * @param  string $model The particular **&#x60;Model&#x60;** of the brand. You can use _**&#x60;GET /models/&#x60;**_ to get a list of available *&#x60;slug&#x60;* values. (e.g. &#x60;outlander&#x60;) (required)
     * @param  string[] $region A **&#x60;Region&#x60;** is the region where the car was officially sold or is still being sold. You can use _**&#x60;GET /regions/&#x60;**_ to get a list of available *&#x60;slug&#x60;* values. (e.g. &#x60;usdm&#x60;) (optional)
     * @param  string $ordering Comma-separated list without spaces. Supported field names: *&#x60;start&#x60;* (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function generationsAsync($make, $model, $region = null, $ordering = null)
    {
        return $this->generationsAsyncWithHttpInfo($make, $model, $region, $ordering)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation generationsAsyncWithHttpInfo
     *
     * List generations
     *
     * @param  string $make A car&#39;s **&#x60;Make&#x60;** is the brand of the vehicle. You can use _**&#x60;GET /makes/&#x60;**_ to get a list of available *&#x60;slug&#x60;* values. (e.g. &#x60;mitsubishi&#x60;) (required)
     * @param  string $model The particular **&#x60;Model&#x60;** of the brand. You can use _**&#x60;GET /models/&#x60;**_ to get a list of available *&#x60;slug&#x60;* values. (e.g. &#x60;outlander&#x60;) (required)
     * @param  string[] $region A **&#x60;Region&#x60;** is the region where the car was officially sold or is still being sold. You can use _**&#x60;GET /regions/&#x60;**_ to get a list of available *&#x60;slug&#x60;* values. (e.g. &#x60;usdm&#x60;) (optional)
     * @param  string $ordering Comma-separated list without spaces. Supported field names: *&#x60;start&#x60;* (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function generationsAsyncWithHttpInfo($make, $model, $region = null, $ordering = null)
    {
        $returnType = '\WheelSizeApiClient\Model\GenerationsReportOutput';
        $request = $this->generationsRequest($make, $model, $region, $ordering);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'generations'
     *
     * @param  string $make A car&#39;s **&#x60;Make&#x60;** is the brand of the vehicle. You can use _**&#x60;GET /makes/&#x60;**_ to get a list of available *&#x60;slug&#x60;* values. (e.g. &#x60;mitsubishi&#x60;) (required)
     * @param  string $model The particular **&#x60;Model&#x60;** of the brand. You can use _**&#x60;GET /models/&#x60;**_ to get a list of available *&#x60;slug&#x60;* values. (e.g. &#x60;outlander&#x60;) (required)
     * @param  string[] $region A **&#x60;Region&#x60;** is the region where the car was officially sold or is still being sold. You can use _**&#x60;GET /regions/&#x60;**_ to get a list of available *&#x60;slug&#x60;* values. (e.g. &#x60;usdm&#x60;) (optional)
     * @param  string $ordering Comma-separated list without spaces. Supported field names: *&#x60;start&#x60;* (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function generationsRequest($make, $model, $region = null, $ordering = null)
    {
        // verify the required parameter 'make' is set
        if ($make === null || (is_array($make) && count($make) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $make when calling generations'
            );
        }
        // verify the required parameter 'model' is set
        if ($model === null || (is_array($model) && count($model) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $model when calling generations'
            );
        }
        if ($ordering !== null && strlen($ordering) < 1) {
            throw new \InvalidArgumentException('invalid length for "$ordering" when calling SearchByModelApi.generations, must be bigger than or equal to 1.');
        }


        $resourcePath = '/generations/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($make !== null) {
            $queryParams['make'] = ObjectSerializer::toQueryValue($make);
        }
        // query params
        if ($model !== null) {
            $queryParams['model'] = ObjectSerializer::toQueryValue($model);
        }
        // query params
        if (is_array($region)) {
            $queryParams['region'] = $region;
        } else
        if ($region !== null) {
            $queryParams['region'] = ObjectSerializer::toQueryValue($region);
        }
        // query params
        if ($ordering !== null) {
            $queryParams['ordering'] = ObjectSerializer::toQueryValue($ordering);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('user_key');
        if ($apiKey !== null) {
            $queryParams['user_key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation makes
     *
     * List manufacturers
     *
     * @param  int $year You can use _**&#x60;GET /years/&#x60;**_ to get a list of available *&#x60;slug&#x60;* values. (e.g. &#x60;2015&#x60;) (optional)
     * @param  string[] $region A **&#x60;Region&#x60;** is the region where the car was officially sold or is still being sold. You can use _**&#x60;GET /regions/&#x60;**_ to get a list of available *&#x60;slug&#x60;* values. (e.g. &#x60;usdm&#x60;) (optional)
     * @param  string $ordering Comma-separated list without spaces. Supported field names: *&#x60;slug&#x60;* (optional, default to slug)
     * @param  string $lang Use this parameter to get translations for the fields of the following objects: **&#x60;Make&#x60;**, **&#x60;Model&#x60;**, **&#x60;Region&#x60;**. The field *&#x60;name_en&#x60;* always has the original English name. By default &#x60;en&#x60; language is used.  Currently, translation works in Сhinese (&#x60;zh-cn&#x60;) and Japanese (&#x60;ja&#x60;) languages only. (optional)
     * @param  string $brands Provide data for selected car manufacturers. Use _**&#x60;GET /makes/&#x60;**_ method to get the full list. (e.g. &#x60;mitsubishi,nissan,toyota&#x60;) (optional)
     * @param  string $brands_exclude Exclude data for selected car manufacturers. Use _**&#x60;GET /makes/&#x60;**_ method to get the full list. (e.g. &#x60;geely,great-wall&#x60;) (optional)
     *
     * @throws \WheelSizeApiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \WheelSizeApiClient\Model\MakesReportOutput
     */
    public function makes($year = null, $region = null, $ordering = 'slug', $lang = null, $brands = null, $brands_exclude = null)
    {
        list($response) = $this->makesWithHttpInfo($year, $region, $ordering, $lang, $brands, $brands_exclude);
        return $response;
    }

    /**
     * Operation makesWithHttpInfo
     *
     * List manufacturers
     *
     * @param  int $year You can use _**&#x60;GET /years/&#x60;**_ to get a list of available *&#x60;slug&#x60;* values. (e.g. &#x60;2015&#x60;) (optional)
     * @param  string[] $region A **&#x60;Region&#x60;** is the region where the car was officially sold or is still being sold. You can use _**&#x60;GET /regions/&#x60;**_ to get a list of available *&#x60;slug&#x60;* values. (e.g. &#x60;usdm&#x60;) (optional)
     * @param  string $ordering Comma-separated list without spaces. Supported field names: *&#x60;slug&#x60;* (optional, default to slug)
     * @param  string $lang Use this parameter to get translations for the fields of the following objects: **&#x60;Make&#x60;**, **&#x60;Model&#x60;**, **&#x60;Region&#x60;**. The field *&#x60;name_en&#x60;* always has the original English name. By default &#x60;en&#x60; language is used.  Currently, translation works in Сhinese (&#x60;zh-cn&#x60;) and Japanese (&#x60;ja&#x60;) languages only. (optional)
     * @param  string $brands Provide data for selected car manufacturers. Use _**&#x60;GET /makes/&#x60;**_ method to get the full list. (e.g. &#x60;mitsubishi,nissan,toyota&#x60;) (optional)
     * @param  string $brands_exclude Exclude data for selected car manufacturers. Use _**&#x60;GET /makes/&#x60;**_ method to get the full list. (e.g. &#x60;geely,great-wall&#x60;) (optional)
     *
     * @throws \WheelSizeApiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \WheelSizeApiClient\Model\MakesReportOutput, HTTP status code, HTTP response headers (array of strings)
     */
    public function makesWithHttpInfo($year = null, $region = null, $ordering = 'slug', $lang = null, $brands = null, $brands_exclude = null)
    {
        $returnType = '\WheelSizeApiClient\Model\MakesReportOutput';
        $request = $this->makesRequest($year, $region, $ordering, $lang, $brands, $brands_exclude);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WheelSizeApiClient\Model\MakesReportOutput',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation makesAsync
     *
     * List manufacturers
     *
     * @param  int $year You can use _**&#x60;GET /years/&#x60;**_ to get a list of available *&#x60;slug&#x60;* values. (e.g. &#x60;2015&#x60;) (optional)
     * @param  string[] $region A **&#x60;Region&#x60;** is the region where the car was officially sold or is still being sold. You can use _**&#x60;GET /regions/&#x60;**_ to get a list of available *&#x60;slug&#x60;* values. (e.g. &#x60;usdm&#x60;) (optional)
     * @param  string $ordering Comma-separated list without spaces. Supported field names: *&#x60;slug&#x60;* (optional, default to slug)
     * @param  string $lang Use this parameter to get translations for the fields of the following objects: **&#x60;Make&#x60;**, **&#x60;Model&#x60;**, **&#x60;Region&#x60;**. The field *&#x60;name_en&#x60;* always has the original English name. By default &#x60;en&#x60; language is used.  Currently, translation works in Сhinese (&#x60;zh-cn&#x60;) and Japanese (&#x60;ja&#x60;) languages only. (optional)
     * @param  string $brands Provide data for selected car manufacturers. Use _**&#x60;GET /makes/&#x60;**_ method to get the full list. (e.g. &#x60;mitsubishi,nissan,toyota&#x60;) (optional)
     * @param  string $brands_exclude Exclude data for selected car manufacturers. Use _**&#x60;GET /makes/&#x60;**_ method to get the full list. (e.g. &#x60;geely,great-wall&#x60;) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function makesAsync($year = null, $region = null, $ordering = 'slug', $lang = null, $brands = null, $brands_exclude = null)
    {
        return $this->makesAsyncWithHttpInfo($year, $region, $ordering, $lang, $brands, $brands_exclude)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation makesAsyncWithHttpInfo
     *
     * List manufacturers
     *
     * @param  int $year You can use _**&#x60;GET /years/&#x60;**_ to get a list of available *&#x60;slug&#x60;* values. (e.g. &#x60;2015&#x60;) (optional)
     * @param  string[] $region A **&#x60;Region&#x60;** is the region where the car was officially sold or is still being sold. You can use _**&#x60;GET /regions/&#x60;**_ to get a list of available *&#x60;slug&#x60;* values. (e.g. &#x60;usdm&#x60;) (optional)
     * @param  string $ordering Comma-separated list without spaces. Supported field names: *&#x60;slug&#x60;* (optional, default to slug)
     * @param  string $lang Use this parameter to get translations for the fields of the following objects: **&#x60;Make&#x60;**, **&#x60;Model&#x60;**, **&#x60;Region&#x60;**. The field *&#x60;name_en&#x60;* always has the original English name. By default &#x60;en&#x60; language is used.  Currently, translation works in Сhinese (&#x60;zh-cn&#x60;) and Japanese (&#x60;ja&#x60;) languages only. (optional)
     * @param  string $brands Provide data for selected car manufacturers. Use _**&#x60;GET /makes/&#x60;**_ method to get the full list. (e.g. &#x60;mitsubishi,nissan,toyota&#x60;) (optional)
     * @param  string $brands_exclude Exclude data for selected car manufacturers. Use _**&#x60;GET /makes/&#x60;**_ method to get the full list. (e.g. &#x60;geely,great-wall&#x60;) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function makesAsyncWithHttpInfo($year = null, $region = null, $ordering = 'slug', $lang = null, $brands = null, $brands_exclude = null)
    {
        $returnType = '\WheelSizeApiClient\Model\MakesReportOutput';
        $request = $this->makesRequest($year, $region, $ordering, $lang, $brands, $brands_exclude);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'makes'
     *
     * @param  int $year You can use _**&#x60;GET /years/&#x60;**_ to get a list of available *&#x60;slug&#x60;* values. (e.g. &#x60;2015&#x60;) (optional)
     * @param  string[] $region A **&#x60;Region&#x60;** is the region where the car was officially sold or is still being sold. You can use _**&#x60;GET /regions/&#x60;**_ to get a list of available *&#x60;slug&#x60;* values. (e.g. &#x60;usdm&#x60;) (optional)
     * @param  string $ordering Comma-separated list without spaces. Supported field names: *&#x60;slug&#x60;* (optional, default to slug)
     * @param  string $lang Use this parameter to get translations for the fields of the following objects: **&#x60;Make&#x60;**, **&#x60;Model&#x60;**, **&#x60;Region&#x60;**. The field *&#x60;name_en&#x60;* always has the original English name. By default &#x60;en&#x60; language is used.  Currently, translation works in Сhinese (&#x60;zh-cn&#x60;) and Japanese (&#x60;ja&#x60;) languages only. (optional)
     * @param  string $brands Provide data for selected car manufacturers. Use _**&#x60;GET /makes/&#x60;**_ method to get the full list. (e.g. &#x60;mitsubishi,nissan,toyota&#x60;) (optional)
     * @param  string $brands_exclude Exclude data for selected car manufacturers. Use _**&#x60;GET /makes/&#x60;**_ method to get the full list. (e.g. &#x60;geely,great-wall&#x60;) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function makesRequest($year = null, $region = null, $ordering = 'slug', $lang = null, $brands = null, $brands_exclude = null)
    {
        if ($ordering !== null && strlen($ordering) < 1) {
            throw new \InvalidArgumentException('invalid length for "$ordering" when calling SearchByModelApi.makes, must be bigger than or equal to 1.');
        }


        $resourcePath = '/makes/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($year !== null) {
            $queryParams['year'] = ObjectSerializer::toQueryValue($year);
        }
        // query params
        if (is_array($region)) {
            $queryParams['region'] = $region;
        } else
        if ($region !== null) {
            $queryParams['region'] = ObjectSerializer::toQueryValue($region);
        }
        // query params
        if ($ordering !== null) {
            $queryParams['ordering'] = ObjectSerializer::toQueryValue($ordering);
        }
        // query params
        if ($lang !== null) {
            $queryParams['lang'] = ObjectSerializer::toQueryValue($lang);
        }
        // query params
        if ($brands !== null) {
            $queryParams['brands'] = ObjectSerializer::toQueryValue($brands);
        }
        // query params
        if ($brands_exclude !== null) {
            $queryParams['brands_exclude'] = ObjectSerializer::toQueryValue($brands_exclude);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('user_key');
        if ($apiKey !== null) {
            $queryParams['user_key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation models
     *
     * List models
     *
     * @param  string $make A car&#39;s **&#x60;Make&#x60;** is the brand of the vehicle. You can use _**&#x60;GET /makes/&#x60;**_ to get a list of available *&#x60;slug&#x60;* values. (e.g. &#x60;mitsubishi&#x60;) (required)
     * @param  int $year You can use _**&#x60;GET /years/&#x60;**_ to get a list of available *&#x60;slug&#x60;* values. (e.g. &#x60;2015&#x60;) (optional)
     * @param  string[] $region A **&#x60;Region&#x60;** is the region where the car was officially sold or is still being sold. You can use _**&#x60;GET /regions/&#x60;**_ to get a list of available *&#x60;slug&#x60;* values. (e.g. &#x60;usdm&#x60;) (optional)
     * @param  string $ordering Comma-separated list without spaces. Supported field names: *&#x60;slug&#x60;* (optional)
     * @param  string $lang Use this parameter to get translations for the fields of the following objects: **&#x60;Make&#x60;**, **&#x60;Model&#x60;**, **&#x60;Region&#x60;**. The field *&#x60;name_en&#x60;* always has the original English name. By default &#x60;en&#x60; language is used.  Currently, translation works in Сhinese (&#x60;zh-cn&#x60;) and Japanese (&#x60;ja&#x60;) languages only. (optional)
     *
     * @throws \WheelSizeApiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \WheelSizeApiClient\Model\ModelsReportOutput
     */
    public function models($make, $year = null, $region = null, $ordering = null, $lang = null)
    {
        list($response) = $this->modelsWithHttpInfo($make, $year, $region, $ordering, $lang);
        return $response;
    }

    /**
     * Operation modelsWithHttpInfo
     *
     * List models
     *
     * @param  string $make A car&#39;s **&#x60;Make&#x60;** is the brand of the vehicle. You can use _**&#x60;GET /makes/&#x60;**_ to get a list of available *&#x60;slug&#x60;* values. (e.g. &#x60;mitsubishi&#x60;) (required)
     * @param  int $year You can use _**&#x60;GET /years/&#x60;**_ to get a list of available *&#x60;slug&#x60;* values. (e.g. &#x60;2015&#x60;) (optional)
     * @param  string[] $region A **&#x60;Region&#x60;** is the region where the car was officially sold or is still being sold. You can use _**&#x60;GET /regions/&#x60;**_ to get a list of available *&#x60;slug&#x60;* values. (e.g. &#x60;usdm&#x60;) (optional)
     * @param  string $ordering Comma-separated list without spaces. Supported field names: *&#x60;slug&#x60;* (optional)
     * @param  string $lang Use this parameter to get translations for the fields of the following objects: **&#x60;Make&#x60;**, **&#x60;Model&#x60;**, **&#x60;Region&#x60;**. The field *&#x60;name_en&#x60;* always has the original English name. By default &#x60;en&#x60; language is used.  Currently, translation works in Сhinese (&#x60;zh-cn&#x60;) and Japanese (&#x60;ja&#x60;) languages only. (optional)
     *
     * @throws \WheelSizeApiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \WheelSizeApiClient\Model\ModelsReportOutput, HTTP status code, HTTP response headers (array of strings)
     */
    public function modelsWithHttpInfo($make, $year = null, $region = null, $ordering = null, $lang = null)
    {
        $returnType = '\WheelSizeApiClient\Model\ModelsReportOutput';
        $request = $this->modelsRequest($make, $year, $region, $ordering, $lang);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WheelSizeApiClient\Model\ModelsReportOutput',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation modelsAsync
     *
     * List models
     *
     * @param  string $make A car&#39;s **&#x60;Make&#x60;** is the brand of the vehicle. You can use _**&#x60;GET /makes/&#x60;**_ to get a list of available *&#x60;slug&#x60;* values. (e.g. &#x60;mitsubishi&#x60;) (required)
     * @param  int $year You can use _**&#x60;GET /years/&#x60;**_ to get a list of available *&#x60;slug&#x60;* values. (e.g. &#x60;2015&#x60;) (optional)
     * @param  string[] $region A **&#x60;Region&#x60;** is the region where the car was officially sold or is still being sold. You can use _**&#x60;GET /regions/&#x60;**_ to get a list of available *&#x60;slug&#x60;* values. (e.g. &#x60;usdm&#x60;) (optional)
     * @param  string $ordering Comma-separated list without spaces. Supported field names: *&#x60;slug&#x60;* (optional)
     * @param  string $lang Use this parameter to get translations for the fields of the following objects: **&#x60;Make&#x60;**, **&#x60;Model&#x60;**, **&#x60;Region&#x60;**. The field *&#x60;name_en&#x60;* always has the original English name. By default &#x60;en&#x60; language is used.  Currently, translation works in Сhinese (&#x60;zh-cn&#x60;) and Japanese (&#x60;ja&#x60;) languages only. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function modelsAsync($make, $year = null, $region = null, $ordering = null, $lang = null)
    {
        return $this->modelsAsyncWithHttpInfo($make, $year, $region, $ordering, $lang)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation modelsAsyncWithHttpInfo
     *
     * List models
     *
     * @param  string $make A car&#39;s **&#x60;Make&#x60;** is the brand of the vehicle. You can use _**&#x60;GET /makes/&#x60;**_ to get a list of available *&#x60;slug&#x60;* values. (e.g. &#x60;mitsubishi&#x60;) (required)
     * @param  int $year You can use _**&#x60;GET /years/&#x60;**_ to get a list of available *&#x60;slug&#x60;* values. (e.g. &#x60;2015&#x60;) (optional)
     * @param  string[] $region A **&#x60;Region&#x60;** is the region where the car was officially sold or is still being sold. You can use _**&#x60;GET /regions/&#x60;**_ to get a list of available *&#x60;slug&#x60;* values. (e.g. &#x60;usdm&#x60;) (optional)
     * @param  string $ordering Comma-separated list without spaces. Supported field names: *&#x60;slug&#x60;* (optional)
     * @param  string $lang Use this parameter to get translations for the fields of the following objects: **&#x60;Make&#x60;**, **&#x60;Model&#x60;**, **&#x60;Region&#x60;**. The field *&#x60;name_en&#x60;* always has the original English name. By default &#x60;en&#x60; language is used.  Currently, translation works in Сhinese (&#x60;zh-cn&#x60;) and Japanese (&#x60;ja&#x60;) languages only. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function modelsAsyncWithHttpInfo($make, $year = null, $region = null, $ordering = null, $lang = null)
    {
        $returnType = '\WheelSizeApiClient\Model\ModelsReportOutput';
        $request = $this->modelsRequest($make, $year, $region, $ordering, $lang);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'models'
     *
     * @param  string $make A car&#39;s **&#x60;Make&#x60;** is the brand of the vehicle. You can use _**&#x60;GET /makes/&#x60;**_ to get a list of available *&#x60;slug&#x60;* values. (e.g. &#x60;mitsubishi&#x60;) (required)
     * @param  int $year You can use _**&#x60;GET /years/&#x60;**_ to get a list of available *&#x60;slug&#x60;* values. (e.g. &#x60;2015&#x60;) (optional)
     * @param  string[] $region A **&#x60;Region&#x60;** is the region where the car was officially sold or is still being sold. You can use _**&#x60;GET /regions/&#x60;**_ to get a list of available *&#x60;slug&#x60;* values. (e.g. &#x60;usdm&#x60;) (optional)
     * @param  string $ordering Comma-separated list without spaces. Supported field names: *&#x60;slug&#x60;* (optional)
     * @param  string $lang Use this parameter to get translations for the fields of the following objects: **&#x60;Make&#x60;**, **&#x60;Model&#x60;**, **&#x60;Region&#x60;**. The field *&#x60;name_en&#x60;* always has the original English name. By default &#x60;en&#x60; language is used.  Currently, translation works in Сhinese (&#x60;zh-cn&#x60;) and Japanese (&#x60;ja&#x60;) languages only. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function modelsRequest($make, $year = null, $region = null, $ordering = null, $lang = null)
    {
        // verify the required parameter 'make' is set
        if ($make === null || (is_array($make) && count($make) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $make when calling models'
            );
        }
        if ($ordering !== null && strlen($ordering) < 1) {
            throw new \InvalidArgumentException('invalid length for "$ordering" when calling SearchByModelApi.models, must be bigger than or equal to 1.');
        }


        $resourcePath = '/models/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($make !== null) {
            $queryParams['make'] = ObjectSerializer::toQueryValue($make);
        }
        // query params
        if ($year !== null) {
            $queryParams['year'] = ObjectSerializer::toQueryValue($year);
        }
        // query params
        if (is_array($region)) {
            $queryParams['region'] = $region;
        } else
        if ($region !== null) {
            $queryParams['region'] = ObjectSerializer::toQueryValue($region);
        }
        // query params
        if ($ordering !== null) {
            $queryParams['ordering'] = ObjectSerializer::toQueryValue($ordering);
        }
        // query params
        if ($lang !== null) {
            $queryParams['lang'] = ObjectSerializer::toQueryValue($lang);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('user_key');
        if ($apiKey !== null) {
            $queryParams['user_key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation modifications
     *
     * List modifications
     *
     * @param  string $make A car&#39;s **&#x60;Make&#x60;** is the brand of the vehicle. You can use _**&#x60;GET /makes/&#x60;**_ to get a list of available *&#x60;slug&#x60;* values. (e.g. &#x60;mitsubishi&#x60;) (required)
     * @param  string $model The particular **&#x60;Model&#x60;** of the brand. You can use _**&#x60;GET /models/&#x60;**_ to get a list of available *&#x60;slug&#x60;* values. (e.g. &#x60;outlander&#x60;) (required)
     * @param  int $year You can use _**&#x60;GET /years/&#x60;**_ to get a list of available *&#x60;slug&#x60;* values. (e.g. &#x60;2015&#x60;) (optional)
     * @param  string $generation Vehicle **&#x60;Generation&#x60;** refers to the life cycle of a design for a specific make and model. You can use _**&#x60;GET /generations/&#x60;**_ to get a list of available *&#x60;slug&#x60;* values. (e.g. &#x60;18d10dc6e6&#x60;) (optional)
     * @param  string[] $region A **&#x60;Region&#x60;** is the region where the car was officially sold or is still being sold. You can use _**&#x60;GET /regions/&#x60;**_ to get a list of available *&#x60;slug&#x60;* values. (e.g. &#x60;usdm&#x60;) (optional)
     * @param  string $fuel Engine **&#x60;Fuel&#x60;** is a fuel that is used to provide power to the engine in motor vehicles (e.g. &#x60;diesel&#x60;) (optional)
     * @param  float $horsepower Horsepower value (1hp &#x3D; 550 ft⋅lbf/s), hp.  If defined, the search will be performed within the range of ±2.7hp (e.g. &#x60;150&#x60;) (optional)
     * @param  float $horsepower_min Minimum horsepower value, hp. (e.g. &#x60;125&#x60;) (optional)
     * @param  float $horsepower_max Maximum horsepower value, hp. (e.g. &#x60;225&#x60;) (optional)
     * @param  string $trim Provides a non-strict search by engine/trim name. (e.g. &#x60;(&#39;2.0 PHEV&#39;, &#39;2.0 TDI SCR BlueMotion 4Motion&#39;)&#x60;)  Typically used for integration with other systems (i.e. search by license plate).  To narrow down your results use **&#x60;fuel&#x60;** and/or **&#x60;horsepower&#x60;** filters. (optional)
     * @param  string $trim_level Provides a case-insensitive search by trim level. (e.g. &#x60;EX-L, Touring, Executive&#x60;) (optional)
     * @param  string $ordering Comma-separated list without spaces. Supported field names: *&#x60;trim&#x60;*, *&#x60;start_year&#x60;*, *&#x60;end_year&#x60;* (optional)
     * @param  string $lang Use this parameter to get translations for the fields of the following objects: **&#x60;Make&#x60;**, **&#x60;Model&#x60;**, **&#x60;Region&#x60;**. The field *&#x60;name_en&#x60;* always has the original English name. By default &#x60;en&#x60; language is used.  Currently, translation works in Сhinese (&#x60;zh-cn&#x60;) and Japanese (&#x60;ja&#x60;) languages only. (optional)
     *
     * @throws \WheelSizeApiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \WheelSizeApiClient\Model\ModificationsReportOutput
     */
    public function modifications($make, $model, $year = null, $generation = null, $region = null, $fuel = null, $horsepower = null, $horsepower_min = null, $horsepower_max = null, $trim = null, $trim_level = null, $ordering = null, $lang = null)
    {
        list($response) = $this->modificationsWithHttpInfo($make, $model, $year, $generation, $region, $fuel, $horsepower, $horsepower_min, $horsepower_max, $trim, $trim_level, $ordering, $lang);
        return $response;
    }

    /**
     * Operation modificationsWithHttpInfo
     *
     * List modifications
     *
     * @param  string $make A car&#39;s **&#x60;Make&#x60;** is the brand of the vehicle. You can use _**&#x60;GET /makes/&#x60;**_ to get a list of available *&#x60;slug&#x60;* values. (e.g. &#x60;mitsubishi&#x60;) (required)
     * @param  string $model The particular **&#x60;Model&#x60;** of the brand. You can use _**&#x60;GET /models/&#x60;**_ to get a list of available *&#x60;slug&#x60;* values. (e.g. &#x60;outlander&#x60;) (required)
     * @param  int $year You can use _**&#x60;GET /years/&#x60;**_ to get a list of available *&#x60;slug&#x60;* values. (e.g. &#x60;2015&#x60;) (optional)
     * @param  string $generation Vehicle **&#x60;Generation&#x60;** refers to the life cycle of a design for a specific make and model. You can use _**&#x60;GET /generations/&#x60;**_ to get a list of available *&#x60;slug&#x60;* values. (e.g. &#x60;18d10dc6e6&#x60;) (optional)
     * @param  string[] $region A **&#x60;Region&#x60;** is the region where the car was officially sold or is still being sold. You can use _**&#x60;GET /regions/&#x60;**_ to get a list of available *&#x60;slug&#x60;* values. (e.g. &#x60;usdm&#x60;) (optional)
     * @param  string $fuel Engine **&#x60;Fuel&#x60;** is a fuel that is used to provide power to the engine in motor vehicles (e.g. &#x60;diesel&#x60;) (optional)
     * @param  float $horsepower Horsepower value (1hp &#x3D; 550 ft⋅lbf/s), hp.  If defined, the search will be performed within the range of ±2.7hp (e.g. &#x60;150&#x60;) (optional)
     * @param  float $horsepower_min Minimum horsepower value, hp. (e.g. &#x60;125&#x60;) (optional)
     * @param  float $horsepower_max Maximum horsepower value, hp. (e.g. &#x60;225&#x60;) (optional)
     * @param  string $trim Provides a non-strict search by engine/trim name. (e.g. &#x60;(&#39;2.0 PHEV&#39;, &#39;2.0 TDI SCR BlueMotion 4Motion&#39;)&#x60;)  Typically used for integration with other systems (i.e. search by license plate).  To narrow down your results use **&#x60;fuel&#x60;** and/or **&#x60;horsepower&#x60;** filters. (optional)
     * @param  string $trim_level Provides a case-insensitive search by trim level. (e.g. &#x60;EX-L, Touring, Executive&#x60;) (optional)
     * @param  string $ordering Comma-separated list without spaces. Supported field names: *&#x60;trim&#x60;*, *&#x60;start_year&#x60;*, *&#x60;end_year&#x60;* (optional)
     * @param  string $lang Use this parameter to get translations for the fields of the following objects: **&#x60;Make&#x60;**, **&#x60;Model&#x60;**, **&#x60;Region&#x60;**. The field *&#x60;name_en&#x60;* always has the original English name. By default &#x60;en&#x60; language is used.  Currently, translation works in Сhinese (&#x60;zh-cn&#x60;) and Japanese (&#x60;ja&#x60;) languages only. (optional)
     *
     * @throws \WheelSizeApiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \WheelSizeApiClient\Model\ModificationsReportOutput, HTTP status code, HTTP response headers (array of strings)
     */
    public function modificationsWithHttpInfo($make, $model, $year = null, $generation = null, $region = null, $fuel = null, $horsepower = null, $horsepower_min = null, $horsepower_max = null, $trim = null, $trim_level = null, $ordering = null, $lang = null)
    {
        $returnType = '\WheelSizeApiClient\Model\ModificationsReportOutput';
        $request = $this->modificationsRequest($make, $model, $year, $generation, $region, $fuel, $horsepower, $horsepower_min, $horsepower_max, $trim, $trim_level, $ordering, $lang);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WheelSizeApiClient\Model\ModificationsReportOutput',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation modificationsAsync
     *
     * List modifications
     *
     * @param  string $make A car&#39;s **&#x60;Make&#x60;** is the brand of the vehicle. You can use _**&#x60;GET /makes/&#x60;**_ to get a list of available *&#x60;slug&#x60;* values. (e.g. &#x60;mitsubishi&#x60;) (required)
     * @param  string $model The particular **&#x60;Model&#x60;** of the brand. You can use _**&#x60;GET /models/&#x60;**_ to get a list of available *&#x60;slug&#x60;* values. (e.g. &#x60;outlander&#x60;) (required)
     * @param  int $year You can use _**&#x60;GET /years/&#x60;**_ to get a list of available *&#x60;slug&#x60;* values. (e.g. &#x60;2015&#x60;) (optional)
     * @param  string $generation Vehicle **&#x60;Generation&#x60;** refers to the life cycle of a design for a specific make and model. You can use _**&#x60;GET /generations/&#x60;**_ to get a list of available *&#x60;slug&#x60;* values. (e.g. &#x60;18d10dc6e6&#x60;) (optional)
     * @param  string[] $region A **&#x60;Region&#x60;** is the region where the car was officially sold or is still being sold. You can use _**&#x60;GET /regions/&#x60;**_ to get a list of available *&#x60;slug&#x60;* values. (e.g. &#x60;usdm&#x60;) (optional)
     * @param  string $fuel Engine **&#x60;Fuel&#x60;** is a fuel that is used to provide power to the engine in motor vehicles (e.g. &#x60;diesel&#x60;) (optional)
     * @param  float $horsepower Horsepower value (1hp &#x3D; 550 ft⋅lbf/s), hp.  If defined, the search will be performed within the range of ±2.7hp (e.g. &#x60;150&#x60;) (optional)
     * @param  float $horsepower_min Minimum horsepower value, hp. (e.g. &#x60;125&#x60;) (optional)
     * @param  float $horsepower_max Maximum horsepower value, hp. (e.g. &#x60;225&#x60;) (optional)
     * @param  string $trim Provides a non-strict search by engine/trim name. (e.g. &#x60;(&#39;2.0 PHEV&#39;, &#39;2.0 TDI SCR BlueMotion 4Motion&#39;)&#x60;)  Typically used for integration with other systems (i.e. search by license plate).  To narrow down your results use **&#x60;fuel&#x60;** and/or **&#x60;horsepower&#x60;** filters. (optional)
     * @param  string $trim_level Provides a case-insensitive search by trim level. (e.g. &#x60;EX-L, Touring, Executive&#x60;) (optional)
     * @param  string $ordering Comma-separated list without spaces. Supported field names: *&#x60;trim&#x60;*, *&#x60;start_year&#x60;*, *&#x60;end_year&#x60;* (optional)
     * @param  string $lang Use this parameter to get translations for the fields of the following objects: **&#x60;Make&#x60;**, **&#x60;Model&#x60;**, **&#x60;Region&#x60;**. The field *&#x60;name_en&#x60;* always has the original English name. By default &#x60;en&#x60; language is used.  Currently, translation works in Сhinese (&#x60;zh-cn&#x60;) and Japanese (&#x60;ja&#x60;) languages only. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function modificationsAsync($make, $model, $year = null, $generation = null, $region = null, $fuel = null, $horsepower = null, $horsepower_min = null, $horsepower_max = null, $trim = null, $trim_level = null, $ordering = null, $lang = null)
    {
        return $this->modificationsAsyncWithHttpInfo($make, $model, $year, $generation, $region, $fuel, $horsepower, $horsepower_min, $horsepower_max, $trim, $trim_level, $ordering, $lang)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation modificationsAsyncWithHttpInfo
     *
     * List modifications
     *
     * @param  string $make A car&#39;s **&#x60;Make&#x60;** is the brand of the vehicle. You can use _**&#x60;GET /makes/&#x60;**_ to get a list of available *&#x60;slug&#x60;* values. (e.g. &#x60;mitsubishi&#x60;) (required)
     * @param  string $model The particular **&#x60;Model&#x60;** of the brand. You can use _**&#x60;GET /models/&#x60;**_ to get a list of available *&#x60;slug&#x60;* values. (e.g. &#x60;outlander&#x60;) (required)
     * @param  int $year You can use _**&#x60;GET /years/&#x60;**_ to get a list of available *&#x60;slug&#x60;* values. (e.g. &#x60;2015&#x60;) (optional)
     * @param  string $generation Vehicle **&#x60;Generation&#x60;** refers to the life cycle of a design for a specific make and model. You can use _**&#x60;GET /generations/&#x60;**_ to get a list of available *&#x60;slug&#x60;* values. (e.g. &#x60;18d10dc6e6&#x60;) (optional)
     * @param  string[] $region A **&#x60;Region&#x60;** is the region where the car was officially sold or is still being sold. You can use _**&#x60;GET /regions/&#x60;**_ to get a list of available *&#x60;slug&#x60;* values. (e.g. &#x60;usdm&#x60;) (optional)
     * @param  string $fuel Engine **&#x60;Fuel&#x60;** is a fuel that is used to provide power to the engine in motor vehicles (e.g. &#x60;diesel&#x60;) (optional)
     * @param  float $horsepower Horsepower value (1hp &#x3D; 550 ft⋅lbf/s), hp.  If defined, the search will be performed within the range of ±2.7hp (e.g. &#x60;150&#x60;) (optional)
     * @param  float $horsepower_min Minimum horsepower value, hp. (e.g. &#x60;125&#x60;) (optional)
     * @param  float $horsepower_max Maximum horsepower value, hp. (e.g. &#x60;225&#x60;) (optional)
     * @param  string $trim Provides a non-strict search by engine/trim name. (e.g. &#x60;(&#39;2.0 PHEV&#39;, &#39;2.0 TDI SCR BlueMotion 4Motion&#39;)&#x60;)  Typically used for integration with other systems (i.e. search by license plate).  To narrow down your results use **&#x60;fuel&#x60;** and/or **&#x60;horsepower&#x60;** filters. (optional)
     * @param  string $trim_level Provides a case-insensitive search by trim level. (e.g. &#x60;EX-L, Touring, Executive&#x60;) (optional)
     * @param  string $ordering Comma-separated list without spaces. Supported field names: *&#x60;trim&#x60;*, *&#x60;start_year&#x60;*, *&#x60;end_year&#x60;* (optional)
     * @param  string $lang Use this parameter to get translations for the fields of the following objects: **&#x60;Make&#x60;**, **&#x60;Model&#x60;**, **&#x60;Region&#x60;**. The field *&#x60;name_en&#x60;* always has the original English name. By default &#x60;en&#x60; language is used.  Currently, translation works in Сhinese (&#x60;zh-cn&#x60;) and Japanese (&#x60;ja&#x60;) languages only. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function modificationsAsyncWithHttpInfo($make, $model, $year = null, $generation = null, $region = null, $fuel = null, $horsepower = null, $horsepower_min = null, $horsepower_max = null, $trim = null, $trim_level = null, $ordering = null, $lang = null)
    {
        $returnType = '\WheelSizeApiClient\Model\ModificationsReportOutput';
        $request = $this->modificationsRequest($make, $model, $year, $generation, $region, $fuel, $horsepower, $horsepower_min, $horsepower_max, $trim, $trim_level, $ordering, $lang);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'modifications'
     *
     * @param  string $make A car&#39;s **&#x60;Make&#x60;** is the brand of the vehicle. You can use _**&#x60;GET /makes/&#x60;**_ to get a list of available *&#x60;slug&#x60;* values. (e.g. &#x60;mitsubishi&#x60;) (required)
     * @param  string $model The particular **&#x60;Model&#x60;** of the brand. You can use _**&#x60;GET /models/&#x60;**_ to get a list of available *&#x60;slug&#x60;* values. (e.g. &#x60;outlander&#x60;) (required)
     * @param  int $year You can use _**&#x60;GET /years/&#x60;**_ to get a list of available *&#x60;slug&#x60;* values. (e.g. &#x60;2015&#x60;) (optional)
     * @param  string $generation Vehicle **&#x60;Generation&#x60;** refers to the life cycle of a design for a specific make and model. You can use _**&#x60;GET /generations/&#x60;**_ to get a list of available *&#x60;slug&#x60;* values. (e.g. &#x60;18d10dc6e6&#x60;) (optional)
     * @param  string[] $region A **&#x60;Region&#x60;** is the region where the car was officially sold or is still being sold. You can use _**&#x60;GET /regions/&#x60;**_ to get a list of available *&#x60;slug&#x60;* values. (e.g. &#x60;usdm&#x60;) (optional)
     * @param  string $fuel Engine **&#x60;Fuel&#x60;** is a fuel that is used to provide power to the engine in motor vehicles (e.g. &#x60;diesel&#x60;) (optional)
     * @param  float $horsepower Horsepower value (1hp &#x3D; 550 ft⋅lbf/s), hp.  If defined, the search will be performed within the range of ±2.7hp (e.g. &#x60;150&#x60;) (optional)
     * @param  float $horsepower_min Minimum horsepower value, hp. (e.g. &#x60;125&#x60;) (optional)
     * @param  float $horsepower_max Maximum horsepower value, hp. (e.g. &#x60;225&#x60;) (optional)
     * @param  string $trim Provides a non-strict search by engine/trim name. (e.g. &#x60;(&#39;2.0 PHEV&#39;, &#39;2.0 TDI SCR BlueMotion 4Motion&#39;)&#x60;)  Typically used for integration with other systems (i.e. search by license plate).  To narrow down your results use **&#x60;fuel&#x60;** and/or **&#x60;horsepower&#x60;** filters. (optional)
     * @param  string $trim_level Provides a case-insensitive search by trim level. (e.g. &#x60;EX-L, Touring, Executive&#x60;) (optional)
     * @param  string $ordering Comma-separated list without spaces. Supported field names: *&#x60;trim&#x60;*, *&#x60;start_year&#x60;*, *&#x60;end_year&#x60;* (optional)
     * @param  string $lang Use this parameter to get translations for the fields of the following objects: **&#x60;Make&#x60;**, **&#x60;Model&#x60;**, **&#x60;Region&#x60;**. The field *&#x60;name_en&#x60;* always has the original English name. By default &#x60;en&#x60; language is used.  Currently, translation works in Сhinese (&#x60;zh-cn&#x60;) and Japanese (&#x60;ja&#x60;) languages only. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function modificationsRequest($make, $model, $year = null, $generation = null, $region = null, $fuel = null, $horsepower = null, $horsepower_min = null, $horsepower_max = null, $trim = null, $trim_level = null, $ordering = null, $lang = null)
    {
        // verify the required parameter 'make' is set
        if ($make === null || (is_array($make) && count($make) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $make when calling modifications'
            );
        }
        // verify the required parameter 'model' is set
        if ($model === null || (is_array($model) && count($model) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $model when calling modifications'
            );
        }
        if ($ordering !== null && strlen($ordering) < 1) {
            throw new \InvalidArgumentException('invalid length for "$ordering" when calling SearchByModelApi.modifications, must be bigger than or equal to 1.');
        }


        $resourcePath = '/modifications/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($make !== null) {
            $queryParams['make'] = ObjectSerializer::toQueryValue($make);
        }
        // query params
        if ($model !== null) {
            $queryParams['model'] = ObjectSerializer::toQueryValue($model);
        }
        // query params
        if ($year !== null) {
            $queryParams['year'] = ObjectSerializer::toQueryValue($year);
        }
        // query params
        if ($generation !== null) {
            $queryParams['generation'] = ObjectSerializer::toQueryValue($generation);
        }
        // query params
        if (is_array($region)) {
            $queryParams['region'] = $region;
        } else
        if ($region !== null) {
            $queryParams['region'] = ObjectSerializer::toQueryValue($region);
        }
        // query params
        if ($fuel !== null) {
            $queryParams['fuel'] = ObjectSerializer::toQueryValue($fuel);
        }
        // query params
        if ($horsepower !== null) {
            $queryParams['horsepower'] = ObjectSerializer::toQueryValue($horsepower);
        }
        // query params
        if ($horsepower_min !== null) {
            $queryParams['horsepower_min'] = ObjectSerializer::toQueryValue($horsepower_min);
        }
        // query params
        if ($horsepower_max !== null) {
            $queryParams['horsepower_max'] = ObjectSerializer::toQueryValue($horsepower_max);
        }
        // query params
        if ($trim !== null) {
            $queryParams['trim'] = ObjectSerializer::toQueryValue($trim);
        }
        // query params
        if ($trim_level !== null) {
            $queryParams['trim_level'] = ObjectSerializer::toQueryValue($trim_level);
        }
        // query params
        if ($ordering !== null) {
            $queryParams['ordering'] = ObjectSerializer::toQueryValue($ordering);
        }
        // query params
        if ($lang !== null) {
            $queryParams['lang'] = ObjectSerializer::toQueryValue($lang);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('user_key');
        if ($apiKey !== null) {
            $queryParams['user_key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation searchByModel
     *
     * Search by model
     *
     * @param  string $make A car&#39;s **&#x60;Make&#x60;** is the brand of the vehicle. You can use _**&#x60;GET /makes/&#x60;**_ to get a list of available *&#x60;slug&#x60;* values. (e.g. &#x60;mitsubishi&#x60;) (required)
     * @param  string $model The particular **&#x60;Model&#x60;** of the brand. You can use _**&#x60;GET /models/&#x60;**_ to get a list of available *&#x60;slug&#x60;* values. (e.g. &#x60;outlander&#x60;) (required)
     * @param  int $year You can use _**&#x60;GET /years/&#x60;**_ to get a list of available *&#x60;slug&#x60;* values. (e.g. &#x60;2015&#x60;) (optional)
     * @param  string $generation Vehicle **&#x60;Generation&#x60;** refers to the life cycle of a design for a specific make and model. You can use _**&#x60;GET /generations/&#x60;**_ to get a list of available *&#x60;slug&#x60;* values. (e.g. &#x60;18d10dc6e6&#x60;) (optional)
     * @param  string $modification Vehicle **&#x60;Modification&#x60;** is a variant of the engine of a car model, in some cases supplemented by the following parameters: drivetrain, body, transmission and country of production. You can use _**&#x60;GET /modifications/&#x60;**_ to get a list of available *&#x60;slug&#x60;* values. (e.g. &#x60;7bb1166e91&#x60;) (optional)
     * @param  string $region A **&#x60;Region&#x60;** is the region where the car was officially sold or is still being sold. You can use _**&#x60;GET /regions/&#x60;**_ to get a list of available *&#x60;slug&#x60;* values. (e.g. &#x60;usdm&#x60;) (optional)
     * @param  bool $add_configurator Optional parameter for Wheel Configurator API specifics.  If set to true, information on linked Wheel Configurator templates will be included. (e.g. &#x60;true&#x60;) (optional)
     * @param  string $ordering Comma-separated list without spaces. Supported field names: *&#x60;trim&#x60;*, *&#x60;start_year&#x60;*, *&#x60;end_year&#x60;* (optional)
     * @param  string $lang Use this parameter to get translations for the fields of the following objects: **&#x60;Make&#x60;**, **&#x60;Model&#x60;**, **&#x60;Region&#x60;**. The field *&#x60;name_en&#x60;* always has the original English name. By default &#x60;en&#x60; language is used.  Currently, translation works in Сhinese (&#x60;zh-cn&#x60;) and Japanese (&#x60;ja&#x60;) languages only. (optional)
     *
     * @throws \WheelSizeApiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \WheelSizeApiClient\Model\SearchByModelReportOutput
     */
    public function searchByModel($make, $model, $year = null, $generation = null, $modification = null, $region = null, $add_configurator = null, $ordering = null, $lang = null)
    {
        list($response) = $this->searchByModelWithHttpInfo($make, $model, $year, $generation, $modification, $region, $add_configurator, $ordering, $lang);
        return $response;
    }

    /**
     * Operation searchByModelWithHttpInfo
     *
     * Search by model
     *
     * @param  string $make A car&#39;s **&#x60;Make&#x60;** is the brand of the vehicle. You can use _**&#x60;GET /makes/&#x60;**_ to get a list of available *&#x60;slug&#x60;* values. (e.g. &#x60;mitsubishi&#x60;) (required)
     * @param  string $model The particular **&#x60;Model&#x60;** of the brand. You can use _**&#x60;GET /models/&#x60;**_ to get a list of available *&#x60;slug&#x60;* values. (e.g. &#x60;outlander&#x60;) (required)
     * @param  int $year You can use _**&#x60;GET /years/&#x60;**_ to get a list of available *&#x60;slug&#x60;* values. (e.g. &#x60;2015&#x60;) (optional)
     * @param  string $generation Vehicle **&#x60;Generation&#x60;** refers to the life cycle of a design for a specific make and model. You can use _**&#x60;GET /generations/&#x60;**_ to get a list of available *&#x60;slug&#x60;* values. (e.g. &#x60;18d10dc6e6&#x60;) (optional)
     * @param  string $modification Vehicle **&#x60;Modification&#x60;** is a variant of the engine of a car model, in some cases supplemented by the following parameters: drivetrain, body, transmission and country of production. You can use _**&#x60;GET /modifications/&#x60;**_ to get a list of available *&#x60;slug&#x60;* values. (e.g. &#x60;7bb1166e91&#x60;) (optional)
     * @param  string $region A **&#x60;Region&#x60;** is the region where the car was officially sold or is still being sold. You can use _**&#x60;GET /regions/&#x60;**_ to get a list of available *&#x60;slug&#x60;* values. (e.g. &#x60;usdm&#x60;) (optional)
     * @param  bool $add_configurator Optional parameter for Wheel Configurator API specifics.  If set to true, information on linked Wheel Configurator templates will be included. (e.g. &#x60;true&#x60;) (optional)
     * @param  string $ordering Comma-separated list without spaces. Supported field names: *&#x60;trim&#x60;*, *&#x60;start_year&#x60;*, *&#x60;end_year&#x60;* (optional)
     * @param  string $lang Use this parameter to get translations for the fields of the following objects: **&#x60;Make&#x60;**, **&#x60;Model&#x60;**, **&#x60;Region&#x60;**. The field *&#x60;name_en&#x60;* always has the original English name. By default &#x60;en&#x60; language is used.  Currently, translation works in Сhinese (&#x60;zh-cn&#x60;) and Japanese (&#x60;ja&#x60;) languages only. (optional)
     *
     * @throws \WheelSizeApiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \WheelSizeApiClient\Model\SearchByModelReportOutput, HTTP status code, HTTP response headers (array of strings)
     */
    public function searchByModelWithHttpInfo($make, $model, $year = null, $generation = null, $modification = null, $region = null, $add_configurator = null, $ordering = null, $lang = null)
    {
        $returnType = '\WheelSizeApiClient\Model\SearchByModelReportOutput';
        $request = $this->searchByModelRequest($make, $model, $year, $generation, $modification, $region, $add_configurator, $ordering, $lang);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WheelSizeApiClient\Model\SearchByModelReportOutput',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation searchByModelAsync
     *
     * Search by model
     *
     * @param  string $make A car&#39;s **&#x60;Make&#x60;** is the brand of the vehicle. You can use _**&#x60;GET /makes/&#x60;**_ to get a list of available *&#x60;slug&#x60;* values. (e.g. &#x60;mitsubishi&#x60;) (required)
     * @param  string $model The particular **&#x60;Model&#x60;** of the brand. You can use _**&#x60;GET /models/&#x60;**_ to get a list of available *&#x60;slug&#x60;* values. (e.g. &#x60;outlander&#x60;) (required)
     * @param  int $year You can use _**&#x60;GET /years/&#x60;**_ to get a list of available *&#x60;slug&#x60;* values. (e.g. &#x60;2015&#x60;) (optional)
     * @param  string $generation Vehicle **&#x60;Generation&#x60;** refers to the life cycle of a design for a specific make and model. You can use _**&#x60;GET /generations/&#x60;**_ to get a list of available *&#x60;slug&#x60;* values. (e.g. &#x60;18d10dc6e6&#x60;) (optional)
     * @param  string $modification Vehicle **&#x60;Modification&#x60;** is a variant of the engine of a car model, in some cases supplemented by the following parameters: drivetrain, body, transmission and country of production. You can use _**&#x60;GET /modifications/&#x60;**_ to get a list of available *&#x60;slug&#x60;* values. (e.g. &#x60;7bb1166e91&#x60;) (optional)
     * @param  string $region A **&#x60;Region&#x60;** is the region where the car was officially sold or is still being sold. You can use _**&#x60;GET /regions/&#x60;**_ to get a list of available *&#x60;slug&#x60;* values. (e.g. &#x60;usdm&#x60;) (optional)
     * @param  bool $add_configurator Optional parameter for Wheel Configurator API specifics.  If set to true, information on linked Wheel Configurator templates will be included. (e.g. &#x60;true&#x60;) (optional)
     * @param  string $ordering Comma-separated list without spaces. Supported field names: *&#x60;trim&#x60;*, *&#x60;start_year&#x60;*, *&#x60;end_year&#x60;* (optional)
     * @param  string $lang Use this parameter to get translations for the fields of the following objects: **&#x60;Make&#x60;**, **&#x60;Model&#x60;**, **&#x60;Region&#x60;**. The field *&#x60;name_en&#x60;* always has the original English name. By default &#x60;en&#x60; language is used.  Currently, translation works in Сhinese (&#x60;zh-cn&#x60;) and Japanese (&#x60;ja&#x60;) languages only. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function searchByModelAsync($make, $model, $year = null, $generation = null, $modification = null, $region = null, $add_configurator = null, $ordering = null, $lang = null)
    {
        return $this->searchByModelAsyncWithHttpInfo($make, $model, $year, $generation, $modification, $region, $add_configurator, $ordering, $lang)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation searchByModelAsyncWithHttpInfo
     *
     * Search by model
     *
     * @param  string $make A car&#39;s **&#x60;Make&#x60;** is the brand of the vehicle. You can use _**&#x60;GET /makes/&#x60;**_ to get a list of available *&#x60;slug&#x60;* values. (e.g. &#x60;mitsubishi&#x60;) (required)
     * @param  string $model The particular **&#x60;Model&#x60;** of the brand. You can use _**&#x60;GET /models/&#x60;**_ to get a list of available *&#x60;slug&#x60;* values. (e.g. &#x60;outlander&#x60;) (required)
     * @param  int $year You can use _**&#x60;GET /years/&#x60;**_ to get a list of available *&#x60;slug&#x60;* values. (e.g. &#x60;2015&#x60;) (optional)
     * @param  string $generation Vehicle **&#x60;Generation&#x60;** refers to the life cycle of a design for a specific make and model. You can use _**&#x60;GET /generations/&#x60;**_ to get a list of available *&#x60;slug&#x60;* values. (e.g. &#x60;18d10dc6e6&#x60;) (optional)
     * @param  string $modification Vehicle **&#x60;Modification&#x60;** is a variant of the engine of a car model, in some cases supplemented by the following parameters: drivetrain, body, transmission and country of production. You can use _**&#x60;GET /modifications/&#x60;**_ to get a list of available *&#x60;slug&#x60;* values. (e.g. &#x60;7bb1166e91&#x60;) (optional)
     * @param  string $region A **&#x60;Region&#x60;** is the region where the car was officially sold or is still being sold. You can use _**&#x60;GET /regions/&#x60;**_ to get a list of available *&#x60;slug&#x60;* values. (e.g. &#x60;usdm&#x60;) (optional)
     * @param  bool $add_configurator Optional parameter for Wheel Configurator API specifics.  If set to true, information on linked Wheel Configurator templates will be included. (e.g. &#x60;true&#x60;) (optional)
     * @param  string $ordering Comma-separated list without spaces. Supported field names: *&#x60;trim&#x60;*, *&#x60;start_year&#x60;*, *&#x60;end_year&#x60;* (optional)
     * @param  string $lang Use this parameter to get translations for the fields of the following objects: **&#x60;Make&#x60;**, **&#x60;Model&#x60;**, **&#x60;Region&#x60;**. The field *&#x60;name_en&#x60;* always has the original English name. By default &#x60;en&#x60; language is used.  Currently, translation works in Сhinese (&#x60;zh-cn&#x60;) and Japanese (&#x60;ja&#x60;) languages only. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function searchByModelAsyncWithHttpInfo($make, $model, $year = null, $generation = null, $modification = null, $region = null, $add_configurator = null, $ordering = null, $lang = null)
    {
        $returnType = '\WheelSizeApiClient\Model\SearchByModelReportOutput';
        $request = $this->searchByModelRequest($make, $model, $year, $generation, $modification, $region, $add_configurator, $ordering, $lang);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'searchByModel'
     *
     * @param  string $make A car&#39;s **&#x60;Make&#x60;** is the brand of the vehicle. You can use _**&#x60;GET /makes/&#x60;**_ to get a list of available *&#x60;slug&#x60;* values. (e.g. &#x60;mitsubishi&#x60;) (required)
     * @param  string $model The particular **&#x60;Model&#x60;** of the brand. You can use _**&#x60;GET /models/&#x60;**_ to get a list of available *&#x60;slug&#x60;* values. (e.g. &#x60;outlander&#x60;) (required)
     * @param  int $year You can use _**&#x60;GET /years/&#x60;**_ to get a list of available *&#x60;slug&#x60;* values. (e.g. &#x60;2015&#x60;) (optional)
     * @param  string $generation Vehicle **&#x60;Generation&#x60;** refers to the life cycle of a design for a specific make and model. You can use _**&#x60;GET /generations/&#x60;**_ to get a list of available *&#x60;slug&#x60;* values. (e.g. &#x60;18d10dc6e6&#x60;) (optional)
     * @param  string $modification Vehicle **&#x60;Modification&#x60;** is a variant of the engine of a car model, in some cases supplemented by the following parameters: drivetrain, body, transmission and country of production. You can use _**&#x60;GET /modifications/&#x60;**_ to get a list of available *&#x60;slug&#x60;* values. (e.g. &#x60;7bb1166e91&#x60;) (optional)
     * @param  string $region A **&#x60;Region&#x60;** is the region where the car was officially sold or is still being sold. You can use _**&#x60;GET /regions/&#x60;**_ to get a list of available *&#x60;slug&#x60;* values. (e.g. &#x60;usdm&#x60;) (optional)
     * @param  bool $add_configurator Optional parameter for Wheel Configurator API specifics.  If set to true, information on linked Wheel Configurator templates will be included. (e.g. &#x60;true&#x60;) (optional)
     * @param  string $ordering Comma-separated list without spaces. Supported field names: *&#x60;trim&#x60;*, *&#x60;start_year&#x60;*, *&#x60;end_year&#x60;* (optional)
     * @param  string $lang Use this parameter to get translations for the fields of the following objects: **&#x60;Make&#x60;**, **&#x60;Model&#x60;**, **&#x60;Region&#x60;**. The field *&#x60;name_en&#x60;* always has the original English name. By default &#x60;en&#x60; language is used.  Currently, translation works in Сhinese (&#x60;zh-cn&#x60;) and Japanese (&#x60;ja&#x60;) languages only. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function searchByModelRequest($make, $model, $year = null, $generation = null, $modification = null, $region = null, $add_configurator = null, $ordering = null, $lang = null)
    {
        // verify the required parameter 'make' is set
        if ($make === null || (is_array($make) && count($make) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $make when calling searchByModel'
            );
        }
        // verify the required parameter 'model' is set
        if ($model === null || (is_array($model) && count($model) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $model when calling searchByModel'
            );
        }
        if ($ordering !== null && strlen($ordering) < 1) {
            throw new \InvalidArgumentException('invalid length for "$ordering" when calling SearchByModelApi.searchByModel, must be bigger than or equal to 1.');
        }


        $resourcePath = '/search/by_model/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($make !== null) {
            $queryParams['make'] = ObjectSerializer::toQueryValue($make);
        }
        // query params
        if ($model !== null) {
            $queryParams['model'] = ObjectSerializer::toQueryValue($model);
        }
        // query params
        if ($year !== null) {
            $queryParams['year'] = ObjectSerializer::toQueryValue($year);
        }
        // query params
        if ($generation !== null) {
            $queryParams['generation'] = ObjectSerializer::toQueryValue($generation);
        }
        // query params
        if ($modification !== null) {
            $queryParams['modification'] = ObjectSerializer::toQueryValue($modification);
        }
        // query params
        if ($region !== null) {
            $queryParams['region'] = ObjectSerializer::toQueryValue($region);
        }
        // query params
        if ($add_configurator !== null) {
            $queryParams['add_configurator'] = ObjectSerializer::toQueryValue($add_configurator);
        }
        // query params
        if ($ordering !== null) {
            $queryParams['ordering'] = ObjectSerializer::toQueryValue($ordering);
        }
        // query params
        if ($lang !== null) {
            $queryParams['lang'] = ObjectSerializer::toQueryValue($lang);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('user_key');
        if ($apiKey !== null) {
            $queryParams['user_key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation years
     *
     * List years
     *
     * @param  string $make A car&#39;s **&#x60;Make&#x60;** is the brand of the vehicle. You can use _**&#x60;GET /makes/&#x60;**_ to get a list of available *&#x60;slug&#x60;* values. (e.g. &#x60;mitsubishi&#x60;) (optional)
     * @param  string $model The particular **&#x60;Model&#x60;** of the brand. You can use _**&#x60;GET /models/&#x60;**_ to get a list of available *&#x60;slug&#x60;* values. (e.g. &#x60;outlander&#x60;) (optional)
     * @param  string $region A **&#x60;Region&#x60;** is the region where the car was officially sold or is still being sold. You can use _**&#x60;GET /regions/&#x60;**_ to get a list of available *&#x60;slug&#x60;* values. (e.g. &#x60;usdm&#x60;) (optional)
     * @param  string $ordering Comma-separated list without spaces. Supported field names: *&#x60;slug&#x60;* (optional)
     *
     * @throws \WheelSizeApiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \WheelSizeApiClient\Model\YearsReportOutput
     */
    public function years($make = null, $model = null, $region = null, $ordering = null)
    {
        list($response) = $this->yearsWithHttpInfo($make, $model, $region, $ordering);
        return $response;
    }

    /**
     * Operation yearsWithHttpInfo
     *
     * List years
     *
     * @param  string $make A car&#39;s **&#x60;Make&#x60;** is the brand of the vehicle. You can use _**&#x60;GET /makes/&#x60;**_ to get a list of available *&#x60;slug&#x60;* values. (e.g. &#x60;mitsubishi&#x60;) (optional)
     * @param  string $model The particular **&#x60;Model&#x60;** of the brand. You can use _**&#x60;GET /models/&#x60;**_ to get a list of available *&#x60;slug&#x60;* values. (e.g. &#x60;outlander&#x60;) (optional)
     * @param  string $region A **&#x60;Region&#x60;** is the region where the car was officially sold or is still being sold. You can use _**&#x60;GET /regions/&#x60;**_ to get a list of available *&#x60;slug&#x60;* values. (e.g. &#x60;usdm&#x60;) (optional)
     * @param  string $ordering Comma-separated list without spaces. Supported field names: *&#x60;slug&#x60;* (optional)
     *
     * @throws \WheelSizeApiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \WheelSizeApiClient\Model\YearsReportOutput, HTTP status code, HTTP response headers (array of strings)
     */
    public function yearsWithHttpInfo($make = null, $model = null, $region = null, $ordering = null)
    {
        $returnType = '\WheelSizeApiClient\Model\YearsReportOutput';
        $request = $this->yearsRequest($make, $model, $region, $ordering);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WheelSizeApiClient\Model\YearsReportOutput',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation yearsAsync
     *
     * List years
     *
     * @param  string $make A car&#39;s **&#x60;Make&#x60;** is the brand of the vehicle. You can use _**&#x60;GET /makes/&#x60;**_ to get a list of available *&#x60;slug&#x60;* values. (e.g. &#x60;mitsubishi&#x60;) (optional)
     * @param  string $model The particular **&#x60;Model&#x60;** of the brand. You can use _**&#x60;GET /models/&#x60;**_ to get a list of available *&#x60;slug&#x60;* values. (e.g. &#x60;outlander&#x60;) (optional)
     * @param  string $region A **&#x60;Region&#x60;** is the region where the car was officially sold or is still being sold. You can use _**&#x60;GET /regions/&#x60;**_ to get a list of available *&#x60;slug&#x60;* values. (e.g. &#x60;usdm&#x60;) (optional)
     * @param  string $ordering Comma-separated list without spaces. Supported field names: *&#x60;slug&#x60;* (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function yearsAsync($make = null, $model = null, $region = null, $ordering = null)
    {
        return $this->yearsAsyncWithHttpInfo($make, $model, $region, $ordering)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation yearsAsyncWithHttpInfo
     *
     * List years
     *
     * @param  string $make A car&#39;s **&#x60;Make&#x60;** is the brand of the vehicle. You can use _**&#x60;GET /makes/&#x60;**_ to get a list of available *&#x60;slug&#x60;* values. (e.g. &#x60;mitsubishi&#x60;) (optional)
     * @param  string $model The particular **&#x60;Model&#x60;** of the brand. You can use _**&#x60;GET /models/&#x60;**_ to get a list of available *&#x60;slug&#x60;* values. (e.g. &#x60;outlander&#x60;) (optional)
     * @param  string $region A **&#x60;Region&#x60;** is the region where the car was officially sold or is still being sold. You can use _**&#x60;GET /regions/&#x60;**_ to get a list of available *&#x60;slug&#x60;* values. (e.g. &#x60;usdm&#x60;) (optional)
     * @param  string $ordering Comma-separated list without spaces. Supported field names: *&#x60;slug&#x60;* (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function yearsAsyncWithHttpInfo($make = null, $model = null, $region = null, $ordering = null)
    {
        $returnType = '\WheelSizeApiClient\Model\YearsReportOutput';
        $request = $this->yearsRequest($make, $model, $region, $ordering);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'years'
     *
     * @param  string $make A car&#39;s **&#x60;Make&#x60;** is the brand of the vehicle. You can use _**&#x60;GET /makes/&#x60;**_ to get a list of available *&#x60;slug&#x60;* values. (e.g. &#x60;mitsubishi&#x60;) (optional)
     * @param  string $model The particular **&#x60;Model&#x60;** of the brand. You can use _**&#x60;GET /models/&#x60;**_ to get a list of available *&#x60;slug&#x60;* values. (e.g. &#x60;outlander&#x60;) (optional)
     * @param  string $region A **&#x60;Region&#x60;** is the region where the car was officially sold or is still being sold. You can use _**&#x60;GET /regions/&#x60;**_ to get a list of available *&#x60;slug&#x60;* values. (e.g. &#x60;usdm&#x60;) (optional)
     * @param  string $ordering Comma-separated list without spaces. Supported field names: *&#x60;slug&#x60;* (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function yearsRequest($make = null, $model = null, $region = null, $ordering = null)
    {
        if ($ordering !== null && strlen($ordering) < 1) {
            throw new \InvalidArgumentException('invalid length for "$ordering" when calling SearchByModelApi.years, must be bigger than or equal to 1.');
        }


        $resourcePath = '/years/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($make !== null) {
            $queryParams['make'] = ObjectSerializer::toQueryValue($make);
        }
        // query params
        if ($model !== null) {
            $queryParams['model'] = ObjectSerializer::toQueryValue($model);
        }
        // query params
        if ($region !== null) {
            $queryParams['region'] = ObjectSerializer::toQueryValue($region);
        }
        // query params
        if ($ordering !== null) {
            $queryParams['ordering'] = ObjectSerializer::toQueryValue($ordering);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('user_key');
        if ($apiKey !== null) {
            $queryParams['user_key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
