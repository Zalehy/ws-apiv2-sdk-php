<?php
/**
 * SearchByRimApi
 * PHP version 5
 *
 * @category Class
 * @package  WheelSizeApiClient
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Wheel Fitment API
 *
 * The Wheel Fitment API provides a programmatic gateway to the comprehensive database and services of www.wheel-size.com. This API is expertly designed to retrieve detailed information regarding the vehicle fitment database for rims and tires, encompassing both original equipment (OE) and  aftermarket fitments, along with plus/minus sizing fitment data. Our offerings are further diversified  by including a multitude of country-specific and language-specific options.  We take pride in the extensive coverage of our fitment data, which nearly spans 100% for vehicles manufactured since the year 2000. Moreover, to ensure the utmost accuracy and relevance of the information we provide, our fitment data is meticulously updated on a daily basis.
 *
 * OpenAPI spec version: v2
 * Contact: info@wheel-size.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.32
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace WheelSizeApiClient\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use WheelSizeApiClient\ApiException;
use WheelSizeApiClient\Configuration;
use WheelSizeApiClient\HeaderSelector;
use WheelSizeApiClient\ObjectSerializer;

/**
 * SearchByRimApi Class Doc Comment
 *
 * @category Class
 * @package  WheelSizeApiClient
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class SearchByRimApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation boltPatterns
     *
     * List rim bolt patterns
     *
     * @param  float $rim_diameter Rim **&#x60;diameter&#x60;** is the distance measured in inches across the face of the wheel, from bead seat to bead seat. You can use _**&#x60;GET /by_rim/rd/&#x60;**_ to get a list of available *&#x60;value&#x60;* values. (e.g. &#x60;19&#x60;) (optional)
     * @param  float $rim_width Rim **&#x60;width&#x60;** is the distance measured in inches from bead seat to bead seat. You can use _**&#x60;GET /by_rim/rw/&#x60;**_ to get a list of available *&#x60;value&#x60;* values. (e.g. &#x60;7.5&#x60;) (optional)
     * @param  int $rim_offset_min Minimum rim **&#x60;offset&#x60;** value.  If set, **&#x60;rim_offset&#x60;** value should be empty and **&#x60;rim_offset_max&#x60;** should be defined.  Value difference between **&#x60;rim_offset_max&#x60;** and **&#x60;rim_offset_min&#x60;** must be equal to or less than 50. (e.g. &#x60;33&#x60;) (optional)
     * @param  int $rim_offset_max Maximum rim **&#x60;offset&#x60;** value.  If set, **&#x60;rim_offset&#x60;** value should be empty and **&#x60;rim_offset_min&#x60;** should be defined.  Value difference between **&#x60;rim_offset_max&#x60;** and **&#x60;rim_offset_min&#x60;** must be equal to or less than 50. (e.g. &#x60;53&#x60;) (optional)
     * @param  float $cb_min Minimum **&#x60;centre bore&#x60;** value.  If set, **&#x60;cb&#x60;** value should be empty and **&#x60;cb_max&#x60;** should be defined.  Value difference between **&#x60;cb_max&#x60;** and **&#x60;cb_min&#x60;** must be equal to or less than 50. (e.g. &#x60;60&#x60;) (optional)
     * @param  float $cb_max Maximum **&#x60;centre bore&#x60;** value.  If set, **&#x60;cb&#x60;** value should be empty and **&#x60;cb_min&#x60;** should be defined.  Value difference between **&#x60;cb_max&#x60;** and **&#x60;cb_min&#x60;** must be equal to or less than 50. (e.g. &#x60;75&#x60;) (optional)
     * @param  int $stud_holes **&#x60;Stud holes&#x60;** are the holes that the center cap covers, in which lug nuts go into to hold the wheel together.  Wheels can have __*&#x60;4&#x60;*__, __*&#x60;5&#x60;*__, __*&#x60;6&#x60;*__, or __*&#x60;8&#x60;*__ stud holes. (e.g. &#x60;5&#x60;) (optional)
     * @param  float $pcd Pitch circle diameter, mm (e.g. &#x60;115&#x60;) (optional)
     * @param  string[] $region A **&#x60;Region&#x60;** is the region where the car was officially sold or is still being sold. You can use _**&#x60;GET /regions/&#x60;**_ to get a list of available *&#x60;slug&#x60;* values. (e.g. &#x60;usdm&#x60;) (optional)
     * @param  string $ordering Comma-separated list without spaces. Supported field names: *&#x60;value&#x60;* (optional)
     *
     * @throws \WheelSizeApiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \WheelSizeApiClient\Model\BoltPatternReportOutput
     */
    public function boltPatterns($rim_diameter = null, $rim_width = null, $rim_offset_min = null, $rim_offset_max = null, $cb_min = null, $cb_max = null, $stud_holes = null, $pcd = null, $region = null, $ordering = null)
    {
        list($response) = $this->boltPatternsWithHttpInfo($rim_diameter, $rim_width, $rim_offset_min, $rim_offset_max, $cb_min, $cb_max, $stud_holes, $pcd, $region, $ordering);
        return $response;
    }

    /**
     * Operation boltPatternsWithHttpInfo
     *
     * List rim bolt patterns
     *
     * @param  float $rim_diameter Rim **&#x60;diameter&#x60;** is the distance measured in inches across the face of the wheel, from bead seat to bead seat. You can use _**&#x60;GET /by_rim/rd/&#x60;**_ to get a list of available *&#x60;value&#x60;* values. (e.g. &#x60;19&#x60;) (optional)
     * @param  float $rim_width Rim **&#x60;width&#x60;** is the distance measured in inches from bead seat to bead seat. You can use _**&#x60;GET /by_rim/rw/&#x60;**_ to get a list of available *&#x60;value&#x60;* values. (e.g. &#x60;7.5&#x60;) (optional)
     * @param  int $rim_offset_min Minimum rim **&#x60;offset&#x60;** value.  If set, **&#x60;rim_offset&#x60;** value should be empty and **&#x60;rim_offset_max&#x60;** should be defined.  Value difference between **&#x60;rim_offset_max&#x60;** and **&#x60;rim_offset_min&#x60;** must be equal to or less than 50. (e.g. &#x60;33&#x60;) (optional)
     * @param  int $rim_offset_max Maximum rim **&#x60;offset&#x60;** value.  If set, **&#x60;rim_offset&#x60;** value should be empty and **&#x60;rim_offset_min&#x60;** should be defined.  Value difference between **&#x60;rim_offset_max&#x60;** and **&#x60;rim_offset_min&#x60;** must be equal to or less than 50. (e.g. &#x60;53&#x60;) (optional)
     * @param  float $cb_min Minimum **&#x60;centre bore&#x60;** value.  If set, **&#x60;cb&#x60;** value should be empty and **&#x60;cb_max&#x60;** should be defined.  Value difference between **&#x60;cb_max&#x60;** and **&#x60;cb_min&#x60;** must be equal to or less than 50. (e.g. &#x60;60&#x60;) (optional)
     * @param  float $cb_max Maximum **&#x60;centre bore&#x60;** value.  If set, **&#x60;cb&#x60;** value should be empty and **&#x60;cb_min&#x60;** should be defined.  Value difference between **&#x60;cb_max&#x60;** and **&#x60;cb_min&#x60;** must be equal to or less than 50. (e.g. &#x60;75&#x60;) (optional)
     * @param  int $stud_holes **&#x60;Stud holes&#x60;** are the holes that the center cap covers, in which lug nuts go into to hold the wheel together.  Wheels can have __*&#x60;4&#x60;*__, __*&#x60;5&#x60;*__, __*&#x60;6&#x60;*__, or __*&#x60;8&#x60;*__ stud holes. (e.g. &#x60;5&#x60;) (optional)
     * @param  float $pcd Pitch circle diameter, mm (e.g. &#x60;115&#x60;) (optional)
     * @param  string[] $region A **&#x60;Region&#x60;** is the region where the car was officially sold or is still being sold. You can use _**&#x60;GET /regions/&#x60;**_ to get a list of available *&#x60;slug&#x60;* values. (e.g. &#x60;usdm&#x60;) (optional)
     * @param  string $ordering Comma-separated list without spaces. Supported field names: *&#x60;value&#x60;* (optional)
     *
     * @throws \WheelSizeApiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \WheelSizeApiClient\Model\BoltPatternReportOutput, HTTP status code, HTTP response headers (array of strings)
     */
    public function boltPatternsWithHttpInfo($rim_diameter = null, $rim_width = null, $rim_offset_min = null, $rim_offset_max = null, $cb_min = null, $cb_max = null, $stud_holes = null, $pcd = null, $region = null, $ordering = null)
    {
        $returnType = '\WheelSizeApiClient\Model\BoltPatternReportOutput';
        $request = $this->boltPatternsRequest($rim_diameter, $rim_width, $rim_offset_min, $rim_offset_max, $cb_min, $cb_max, $stud_holes, $pcd, $region, $ordering);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WheelSizeApiClient\Model\BoltPatternReportOutput',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation boltPatternsAsync
     *
     * List rim bolt patterns
     *
     * @param  float $rim_diameter Rim **&#x60;diameter&#x60;** is the distance measured in inches across the face of the wheel, from bead seat to bead seat. You can use _**&#x60;GET /by_rim/rd/&#x60;**_ to get a list of available *&#x60;value&#x60;* values. (e.g. &#x60;19&#x60;) (optional)
     * @param  float $rim_width Rim **&#x60;width&#x60;** is the distance measured in inches from bead seat to bead seat. You can use _**&#x60;GET /by_rim/rw/&#x60;**_ to get a list of available *&#x60;value&#x60;* values. (e.g. &#x60;7.5&#x60;) (optional)
     * @param  int $rim_offset_min Minimum rim **&#x60;offset&#x60;** value.  If set, **&#x60;rim_offset&#x60;** value should be empty and **&#x60;rim_offset_max&#x60;** should be defined.  Value difference between **&#x60;rim_offset_max&#x60;** and **&#x60;rim_offset_min&#x60;** must be equal to or less than 50. (e.g. &#x60;33&#x60;) (optional)
     * @param  int $rim_offset_max Maximum rim **&#x60;offset&#x60;** value.  If set, **&#x60;rim_offset&#x60;** value should be empty and **&#x60;rim_offset_min&#x60;** should be defined.  Value difference between **&#x60;rim_offset_max&#x60;** and **&#x60;rim_offset_min&#x60;** must be equal to or less than 50. (e.g. &#x60;53&#x60;) (optional)
     * @param  float $cb_min Minimum **&#x60;centre bore&#x60;** value.  If set, **&#x60;cb&#x60;** value should be empty and **&#x60;cb_max&#x60;** should be defined.  Value difference between **&#x60;cb_max&#x60;** and **&#x60;cb_min&#x60;** must be equal to or less than 50. (e.g. &#x60;60&#x60;) (optional)
     * @param  float $cb_max Maximum **&#x60;centre bore&#x60;** value.  If set, **&#x60;cb&#x60;** value should be empty and **&#x60;cb_min&#x60;** should be defined.  Value difference between **&#x60;cb_max&#x60;** and **&#x60;cb_min&#x60;** must be equal to or less than 50. (e.g. &#x60;75&#x60;) (optional)
     * @param  int $stud_holes **&#x60;Stud holes&#x60;** are the holes that the center cap covers, in which lug nuts go into to hold the wheel together.  Wheels can have __*&#x60;4&#x60;*__, __*&#x60;5&#x60;*__, __*&#x60;6&#x60;*__, or __*&#x60;8&#x60;*__ stud holes. (e.g. &#x60;5&#x60;) (optional)
     * @param  float $pcd Pitch circle diameter, mm (e.g. &#x60;115&#x60;) (optional)
     * @param  string[] $region A **&#x60;Region&#x60;** is the region where the car was officially sold or is still being sold. You can use _**&#x60;GET /regions/&#x60;**_ to get a list of available *&#x60;slug&#x60;* values. (e.g. &#x60;usdm&#x60;) (optional)
     * @param  string $ordering Comma-separated list without spaces. Supported field names: *&#x60;value&#x60;* (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function boltPatternsAsync($rim_diameter = null, $rim_width = null, $rim_offset_min = null, $rim_offset_max = null, $cb_min = null, $cb_max = null, $stud_holes = null, $pcd = null, $region = null, $ordering = null)
    {
        return $this->boltPatternsAsyncWithHttpInfo($rim_diameter, $rim_width, $rim_offset_min, $rim_offset_max, $cb_min, $cb_max, $stud_holes, $pcd, $region, $ordering)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation boltPatternsAsyncWithHttpInfo
     *
     * List rim bolt patterns
     *
     * @param  float $rim_diameter Rim **&#x60;diameter&#x60;** is the distance measured in inches across the face of the wheel, from bead seat to bead seat. You can use _**&#x60;GET /by_rim/rd/&#x60;**_ to get a list of available *&#x60;value&#x60;* values. (e.g. &#x60;19&#x60;) (optional)
     * @param  float $rim_width Rim **&#x60;width&#x60;** is the distance measured in inches from bead seat to bead seat. You can use _**&#x60;GET /by_rim/rw/&#x60;**_ to get a list of available *&#x60;value&#x60;* values. (e.g. &#x60;7.5&#x60;) (optional)
     * @param  int $rim_offset_min Minimum rim **&#x60;offset&#x60;** value.  If set, **&#x60;rim_offset&#x60;** value should be empty and **&#x60;rim_offset_max&#x60;** should be defined.  Value difference between **&#x60;rim_offset_max&#x60;** and **&#x60;rim_offset_min&#x60;** must be equal to or less than 50. (e.g. &#x60;33&#x60;) (optional)
     * @param  int $rim_offset_max Maximum rim **&#x60;offset&#x60;** value.  If set, **&#x60;rim_offset&#x60;** value should be empty and **&#x60;rim_offset_min&#x60;** should be defined.  Value difference between **&#x60;rim_offset_max&#x60;** and **&#x60;rim_offset_min&#x60;** must be equal to or less than 50. (e.g. &#x60;53&#x60;) (optional)
     * @param  float $cb_min Minimum **&#x60;centre bore&#x60;** value.  If set, **&#x60;cb&#x60;** value should be empty and **&#x60;cb_max&#x60;** should be defined.  Value difference between **&#x60;cb_max&#x60;** and **&#x60;cb_min&#x60;** must be equal to or less than 50. (e.g. &#x60;60&#x60;) (optional)
     * @param  float $cb_max Maximum **&#x60;centre bore&#x60;** value.  If set, **&#x60;cb&#x60;** value should be empty and **&#x60;cb_min&#x60;** should be defined.  Value difference between **&#x60;cb_max&#x60;** and **&#x60;cb_min&#x60;** must be equal to or less than 50. (e.g. &#x60;75&#x60;) (optional)
     * @param  int $stud_holes **&#x60;Stud holes&#x60;** are the holes that the center cap covers, in which lug nuts go into to hold the wheel together.  Wheels can have __*&#x60;4&#x60;*__, __*&#x60;5&#x60;*__, __*&#x60;6&#x60;*__, or __*&#x60;8&#x60;*__ stud holes. (e.g. &#x60;5&#x60;) (optional)
     * @param  float $pcd Pitch circle diameter, mm (e.g. &#x60;115&#x60;) (optional)
     * @param  string[] $region A **&#x60;Region&#x60;** is the region where the car was officially sold or is still being sold. You can use _**&#x60;GET /regions/&#x60;**_ to get a list of available *&#x60;slug&#x60;* values. (e.g. &#x60;usdm&#x60;) (optional)
     * @param  string $ordering Comma-separated list without spaces. Supported field names: *&#x60;value&#x60;* (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function boltPatternsAsyncWithHttpInfo($rim_diameter = null, $rim_width = null, $rim_offset_min = null, $rim_offset_max = null, $cb_min = null, $cb_max = null, $stud_holes = null, $pcd = null, $region = null, $ordering = null)
    {
        $returnType = '\WheelSizeApiClient\Model\BoltPatternReportOutput';
        $request = $this->boltPatternsRequest($rim_diameter, $rim_width, $rim_offset_min, $rim_offset_max, $cb_min, $cb_max, $stud_holes, $pcd, $region, $ordering);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'boltPatterns'
     *
     * @param  float $rim_diameter Rim **&#x60;diameter&#x60;** is the distance measured in inches across the face of the wheel, from bead seat to bead seat. You can use _**&#x60;GET /by_rim/rd/&#x60;**_ to get a list of available *&#x60;value&#x60;* values. (e.g. &#x60;19&#x60;) (optional)
     * @param  float $rim_width Rim **&#x60;width&#x60;** is the distance measured in inches from bead seat to bead seat. You can use _**&#x60;GET /by_rim/rw/&#x60;**_ to get a list of available *&#x60;value&#x60;* values. (e.g. &#x60;7.5&#x60;) (optional)
     * @param  int $rim_offset_min Minimum rim **&#x60;offset&#x60;** value.  If set, **&#x60;rim_offset&#x60;** value should be empty and **&#x60;rim_offset_max&#x60;** should be defined.  Value difference between **&#x60;rim_offset_max&#x60;** and **&#x60;rim_offset_min&#x60;** must be equal to or less than 50. (e.g. &#x60;33&#x60;) (optional)
     * @param  int $rim_offset_max Maximum rim **&#x60;offset&#x60;** value.  If set, **&#x60;rim_offset&#x60;** value should be empty and **&#x60;rim_offset_min&#x60;** should be defined.  Value difference between **&#x60;rim_offset_max&#x60;** and **&#x60;rim_offset_min&#x60;** must be equal to or less than 50. (e.g. &#x60;53&#x60;) (optional)
     * @param  float $cb_min Minimum **&#x60;centre bore&#x60;** value.  If set, **&#x60;cb&#x60;** value should be empty and **&#x60;cb_max&#x60;** should be defined.  Value difference between **&#x60;cb_max&#x60;** and **&#x60;cb_min&#x60;** must be equal to or less than 50. (e.g. &#x60;60&#x60;) (optional)
     * @param  float $cb_max Maximum **&#x60;centre bore&#x60;** value.  If set, **&#x60;cb&#x60;** value should be empty and **&#x60;cb_min&#x60;** should be defined.  Value difference between **&#x60;cb_max&#x60;** and **&#x60;cb_min&#x60;** must be equal to or less than 50. (e.g. &#x60;75&#x60;) (optional)
     * @param  int $stud_holes **&#x60;Stud holes&#x60;** are the holes that the center cap covers, in which lug nuts go into to hold the wheel together.  Wheels can have __*&#x60;4&#x60;*__, __*&#x60;5&#x60;*__, __*&#x60;6&#x60;*__, or __*&#x60;8&#x60;*__ stud holes. (e.g. &#x60;5&#x60;) (optional)
     * @param  float $pcd Pitch circle diameter, mm (e.g. &#x60;115&#x60;) (optional)
     * @param  string[] $region A **&#x60;Region&#x60;** is the region where the car was officially sold or is still being sold. You can use _**&#x60;GET /regions/&#x60;**_ to get a list of available *&#x60;slug&#x60;* values. (e.g. &#x60;usdm&#x60;) (optional)
     * @param  string $ordering Comma-separated list without spaces. Supported field names: *&#x60;value&#x60;* (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function boltPatternsRequest($rim_diameter = null, $rim_width = null, $rim_offset_min = null, $rim_offset_max = null, $cb_min = null, $cb_max = null, $stud_holes = null, $pcd = null, $region = null, $ordering = null)
    {
        if ($ordering !== null && strlen($ordering) < 1) {
            throw new \InvalidArgumentException('invalid length for "$ordering" when calling SearchByRimApi.boltPatterns, must be bigger than or equal to 1.');
        }


        $resourcePath = '/by_rim/bp/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($rim_diameter !== null) {
            $queryParams['rim_diameter'] = ObjectSerializer::toQueryValue($rim_diameter);
        }
        // query params
        if ($rim_width !== null) {
            $queryParams['rim_width'] = ObjectSerializer::toQueryValue($rim_width);
        }
        // query params
        if ($rim_offset_min !== null) {
            $queryParams['rim_offset_min'] = ObjectSerializer::toQueryValue($rim_offset_min);
        }
        // query params
        if ($rim_offset_max !== null) {
            $queryParams['rim_offset_max'] = ObjectSerializer::toQueryValue($rim_offset_max);
        }
        // query params
        if ($cb_min !== null) {
            $queryParams['cb_min'] = ObjectSerializer::toQueryValue($cb_min);
        }
        // query params
        if ($cb_max !== null) {
            $queryParams['cb_max'] = ObjectSerializer::toQueryValue($cb_max);
        }
        // query params
        if ($stud_holes !== null) {
            $queryParams['stud_holes'] = ObjectSerializer::toQueryValue($stud_holes);
        }
        // query params
        if ($pcd !== null) {
            $queryParams['pcd'] = ObjectSerializer::toQueryValue($pcd);
        }
        // query params
        if (is_array($region)) {
            $queryParams['region'] = $region;
        } else
        if ($region !== null) {
            $queryParams['region'] = ObjectSerializer::toQueryValue($region);
        }
        // query params
        if ($ordering !== null) {
            $queryParams['ordering'] = ObjectSerializer::toQueryValue($ordering);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('user_key');
        if ($apiKey !== null) {
            $queryParams['user_key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation centreBores
     *
     * List rim centre bores
     *
     * @param  float $rim_diameter Rim **&#x60;diameter&#x60;** is the distance measured in inches across the face of the wheel, from bead seat to bead seat. You can use _**&#x60;GET /by_rim/rd/&#x60;**_ to get a list of available *&#x60;value&#x60;* values. (e.g. &#x60;19&#x60;) (optional)
     * @param  float $rim_width Rim **&#x60;width&#x60;** is the distance measured in inches from bead seat to bead seat. You can use _**&#x60;GET /by_rim/rw/&#x60;**_ to get a list of available *&#x60;value&#x60;* values. (e.g. &#x60;7.5&#x60;) (optional)
     * @param  int $rim_offset Rim **&#x60;offset&#x60;** is a distance between wheel mounting surface where it is bolted to hub and the centerline of rim. You can use _**&#x60;GET /by_rim/of/&#x60;**_ to get a list of available *&#x60;value&#x60;* values. (e.g. &#x60;38&#x60;) (optional)
     * @param  int $rim_offset_min Minimum rim **&#x60;offset&#x60;** value.  If set, **&#x60;rim_offset&#x60;** value should be empty and **&#x60;rim_offset_max&#x60;** should be defined.  Value difference between **&#x60;rim_offset_max&#x60;** and **&#x60;rim_offset_min&#x60;** must be equal to or less than 50. (e.g. &#x60;33&#x60;) (optional)
     * @param  int $rim_offset_max Maximum rim **&#x60;offset&#x60;** value.  If set, **&#x60;rim_offset&#x60;** value should be empty and **&#x60;rim_offset_min&#x60;** should be defined.  Value difference between **&#x60;rim_offset_max&#x60;** and **&#x60;rim_offset_min&#x60;** must be equal to or less than 50. (e.g. &#x60;53&#x60;) (optional)
     * @param  string $bolt_pattern **&#x60;Bolt pattern&#x60;** is expressed as the number of lugs by the diameter of an imaginary circle formed by the centers of the wheel lugs. You can use _**&#x60;GET /by_rim/bp/&#x60;**_ to get a list of available *&#x60;value&#x60;* values. (e.g. &#x60;5x114.3&#x60;) (optional)
     * @param  string[] $region A **&#x60;Region&#x60;** is the region where the car was officially sold or is still being sold. You can use _**&#x60;GET /regions/&#x60;**_ to get a list of available *&#x60;slug&#x60;* values. (e.g. &#x60;usdm&#x60;) (optional)
     * @param  string $ordering Comma-separated list without spaces. Supported field names: *&#x60;value&#x60;* (optional)
     *
     * @throws \WheelSizeApiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \WheelSizeApiClient\Model\CentreBoreReportOutput
     */
    public function centreBores($rim_diameter = null, $rim_width = null, $rim_offset = null, $rim_offset_min = null, $rim_offset_max = null, $bolt_pattern = null, $region = null, $ordering = null)
    {
        list($response) = $this->centreBoresWithHttpInfo($rim_diameter, $rim_width, $rim_offset, $rim_offset_min, $rim_offset_max, $bolt_pattern, $region, $ordering);
        return $response;
    }

    /**
     * Operation centreBoresWithHttpInfo
     *
     * List rim centre bores
     *
     * @param  float $rim_diameter Rim **&#x60;diameter&#x60;** is the distance measured in inches across the face of the wheel, from bead seat to bead seat. You can use _**&#x60;GET /by_rim/rd/&#x60;**_ to get a list of available *&#x60;value&#x60;* values. (e.g. &#x60;19&#x60;) (optional)
     * @param  float $rim_width Rim **&#x60;width&#x60;** is the distance measured in inches from bead seat to bead seat. You can use _**&#x60;GET /by_rim/rw/&#x60;**_ to get a list of available *&#x60;value&#x60;* values. (e.g. &#x60;7.5&#x60;) (optional)
     * @param  int $rim_offset Rim **&#x60;offset&#x60;** is a distance between wheel mounting surface where it is bolted to hub and the centerline of rim. You can use _**&#x60;GET /by_rim/of/&#x60;**_ to get a list of available *&#x60;value&#x60;* values. (e.g. &#x60;38&#x60;) (optional)
     * @param  int $rim_offset_min Minimum rim **&#x60;offset&#x60;** value.  If set, **&#x60;rim_offset&#x60;** value should be empty and **&#x60;rim_offset_max&#x60;** should be defined.  Value difference between **&#x60;rim_offset_max&#x60;** and **&#x60;rim_offset_min&#x60;** must be equal to or less than 50. (e.g. &#x60;33&#x60;) (optional)
     * @param  int $rim_offset_max Maximum rim **&#x60;offset&#x60;** value.  If set, **&#x60;rim_offset&#x60;** value should be empty and **&#x60;rim_offset_min&#x60;** should be defined.  Value difference between **&#x60;rim_offset_max&#x60;** and **&#x60;rim_offset_min&#x60;** must be equal to or less than 50. (e.g. &#x60;53&#x60;) (optional)
     * @param  string $bolt_pattern **&#x60;Bolt pattern&#x60;** is expressed as the number of lugs by the diameter of an imaginary circle formed by the centers of the wheel lugs. You can use _**&#x60;GET /by_rim/bp/&#x60;**_ to get a list of available *&#x60;value&#x60;* values. (e.g. &#x60;5x114.3&#x60;) (optional)
     * @param  string[] $region A **&#x60;Region&#x60;** is the region where the car was officially sold or is still being sold. You can use _**&#x60;GET /regions/&#x60;**_ to get a list of available *&#x60;slug&#x60;* values. (e.g. &#x60;usdm&#x60;) (optional)
     * @param  string $ordering Comma-separated list without spaces. Supported field names: *&#x60;value&#x60;* (optional)
     *
     * @throws \WheelSizeApiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \WheelSizeApiClient\Model\CentreBoreReportOutput, HTTP status code, HTTP response headers (array of strings)
     */
    public function centreBoresWithHttpInfo($rim_diameter = null, $rim_width = null, $rim_offset = null, $rim_offset_min = null, $rim_offset_max = null, $bolt_pattern = null, $region = null, $ordering = null)
    {
        $returnType = '\WheelSizeApiClient\Model\CentreBoreReportOutput';
        $request = $this->centreBoresRequest($rim_diameter, $rim_width, $rim_offset, $rim_offset_min, $rim_offset_max, $bolt_pattern, $region, $ordering);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WheelSizeApiClient\Model\CentreBoreReportOutput',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation centreBoresAsync
     *
     * List rim centre bores
     *
     * @param  float $rim_diameter Rim **&#x60;diameter&#x60;** is the distance measured in inches across the face of the wheel, from bead seat to bead seat. You can use _**&#x60;GET /by_rim/rd/&#x60;**_ to get a list of available *&#x60;value&#x60;* values. (e.g. &#x60;19&#x60;) (optional)
     * @param  float $rim_width Rim **&#x60;width&#x60;** is the distance measured in inches from bead seat to bead seat. You can use _**&#x60;GET /by_rim/rw/&#x60;**_ to get a list of available *&#x60;value&#x60;* values. (e.g. &#x60;7.5&#x60;) (optional)
     * @param  int $rim_offset Rim **&#x60;offset&#x60;** is a distance between wheel mounting surface where it is bolted to hub and the centerline of rim. You can use _**&#x60;GET /by_rim/of/&#x60;**_ to get a list of available *&#x60;value&#x60;* values. (e.g. &#x60;38&#x60;) (optional)
     * @param  int $rim_offset_min Minimum rim **&#x60;offset&#x60;** value.  If set, **&#x60;rim_offset&#x60;** value should be empty and **&#x60;rim_offset_max&#x60;** should be defined.  Value difference between **&#x60;rim_offset_max&#x60;** and **&#x60;rim_offset_min&#x60;** must be equal to or less than 50. (e.g. &#x60;33&#x60;) (optional)
     * @param  int $rim_offset_max Maximum rim **&#x60;offset&#x60;** value.  If set, **&#x60;rim_offset&#x60;** value should be empty and **&#x60;rim_offset_min&#x60;** should be defined.  Value difference between **&#x60;rim_offset_max&#x60;** and **&#x60;rim_offset_min&#x60;** must be equal to or less than 50. (e.g. &#x60;53&#x60;) (optional)
     * @param  string $bolt_pattern **&#x60;Bolt pattern&#x60;** is expressed as the number of lugs by the diameter of an imaginary circle formed by the centers of the wheel lugs. You can use _**&#x60;GET /by_rim/bp/&#x60;**_ to get a list of available *&#x60;value&#x60;* values. (e.g. &#x60;5x114.3&#x60;) (optional)
     * @param  string[] $region A **&#x60;Region&#x60;** is the region where the car was officially sold or is still being sold. You can use _**&#x60;GET /regions/&#x60;**_ to get a list of available *&#x60;slug&#x60;* values. (e.g. &#x60;usdm&#x60;) (optional)
     * @param  string $ordering Comma-separated list without spaces. Supported field names: *&#x60;value&#x60;* (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function centreBoresAsync($rim_diameter = null, $rim_width = null, $rim_offset = null, $rim_offset_min = null, $rim_offset_max = null, $bolt_pattern = null, $region = null, $ordering = null)
    {
        return $this->centreBoresAsyncWithHttpInfo($rim_diameter, $rim_width, $rim_offset, $rim_offset_min, $rim_offset_max, $bolt_pattern, $region, $ordering)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation centreBoresAsyncWithHttpInfo
     *
     * List rim centre bores
     *
     * @param  float $rim_diameter Rim **&#x60;diameter&#x60;** is the distance measured in inches across the face of the wheel, from bead seat to bead seat. You can use _**&#x60;GET /by_rim/rd/&#x60;**_ to get a list of available *&#x60;value&#x60;* values. (e.g. &#x60;19&#x60;) (optional)
     * @param  float $rim_width Rim **&#x60;width&#x60;** is the distance measured in inches from bead seat to bead seat. You can use _**&#x60;GET /by_rim/rw/&#x60;**_ to get a list of available *&#x60;value&#x60;* values. (e.g. &#x60;7.5&#x60;) (optional)
     * @param  int $rim_offset Rim **&#x60;offset&#x60;** is a distance between wheel mounting surface where it is bolted to hub and the centerline of rim. You can use _**&#x60;GET /by_rim/of/&#x60;**_ to get a list of available *&#x60;value&#x60;* values. (e.g. &#x60;38&#x60;) (optional)
     * @param  int $rim_offset_min Minimum rim **&#x60;offset&#x60;** value.  If set, **&#x60;rim_offset&#x60;** value should be empty and **&#x60;rim_offset_max&#x60;** should be defined.  Value difference between **&#x60;rim_offset_max&#x60;** and **&#x60;rim_offset_min&#x60;** must be equal to or less than 50. (e.g. &#x60;33&#x60;) (optional)
     * @param  int $rim_offset_max Maximum rim **&#x60;offset&#x60;** value.  If set, **&#x60;rim_offset&#x60;** value should be empty and **&#x60;rim_offset_min&#x60;** should be defined.  Value difference between **&#x60;rim_offset_max&#x60;** and **&#x60;rim_offset_min&#x60;** must be equal to or less than 50. (e.g. &#x60;53&#x60;) (optional)
     * @param  string $bolt_pattern **&#x60;Bolt pattern&#x60;** is expressed as the number of lugs by the diameter of an imaginary circle formed by the centers of the wheel lugs. You can use _**&#x60;GET /by_rim/bp/&#x60;**_ to get a list of available *&#x60;value&#x60;* values. (e.g. &#x60;5x114.3&#x60;) (optional)
     * @param  string[] $region A **&#x60;Region&#x60;** is the region where the car was officially sold or is still being sold. You can use _**&#x60;GET /regions/&#x60;**_ to get a list of available *&#x60;slug&#x60;* values. (e.g. &#x60;usdm&#x60;) (optional)
     * @param  string $ordering Comma-separated list without spaces. Supported field names: *&#x60;value&#x60;* (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function centreBoresAsyncWithHttpInfo($rim_diameter = null, $rim_width = null, $rim_offset = null, $rim_offset_min = null, $rim_offset_max = null, $bolt_pattern = null, $region = null, $ordering = null)
    {
        $returnType = '\WheelSizeApiClient\Model\CentreBoreReportOutput';
        $request = $this->centreBoresRequest($rim_diameter, $rim_width, $rim_offset, $rim_offset_min, $rim_offset_max, $bolt_pattern, $region, $ordering);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'centreBores'
     *
     * @param  float $rim_diameter Rim **&#x60;diameter&#x60;** is the distance measured in inches across the face of the wheel, from bead seat to bead seat. You can use _**&#x60;GET /by_rim/rd/&#x60;**_ to get a list of available *&#x60;value&#x60;* values. (e.g. &#x60;19&#x60;) (optional)
     * @param  float $rim_width Rim **&#x60;width&#x60;** is the distance measured in inches from bead seat to bead seat. You can use _**&#x60;GET /by_rim/rw/&#x60;**_ to get a list of available *&#x60;value&#x60;* values. (e.g. &#x60;7.5&#x60;) (optional)
     * @param  int $rim_offset Rim **&#x60;offset&#x60;** is a distance between wheel mounting surface where it is bolted to hub and the centerline of rim. You can use _**&#x60;GET /by_rim/of/&#x60;**_ to get a list of available *&#x60;value&#x60;* values. (e.g. &#x60;38&#x60;) (optional)
     * @param  int $rim_offset_min Minimum rim **&#x60;offset&#x60;** value.  If set, **&#x60;rim_offset&#x60;** value should be empty and **&#x60;rim_offset_max&#x60;** should be defined.  Value difference between **&#x60;rim_offset_max&#x60;** and **&#x60;rim_offset_min&#x60;** must be equal to or less than 50. (e.g. &#x60;33&#x60;) (optional)
     * @param  int $rim_offset_max Maximum rim **&#x60;offset&#x60;** value.  If set, **&#x60;rim_offset&#x60;** value should be empty and **&#x60;rim_offset_min&#x60;** should be defined.  Value difference between **&#x60;rim_offset_max&#x60;** and **&#x60;rim_offset_min&#x60;** must be equal to or less than 50. (e.g. &#x60;53&#x60;) (optional)
     * @param  string $bolt_pattern **&#x60;Bolt pattern&#x60;** is expressed as the number of lugs by the diameter of an imaginary circle formed by the centers of the wheel lugs. You can use _**&#x60;GET /by_rim/bp/&#x60;**_ to get a list of available *&#x60;value&#x60;* values. (e.g. &#x60;5x114.3&#x60;) (optional)
     * @param  string[] $region A **&#x60;Region&#x60;** is the region where the car was officially sold or is still being sold. You can use _**&#x60;GET /regions/&#x60;**_ to get a list of available *&#x60;slug&#x60;* values. (e.g. &#x60;usdm&#x60;) (optional)
     * @param  string $ordering Comma-separated list without spaces. Supported field names: *&#x60;value&#x60;* (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function centreBoresRequest($rim_diameter = null, $rim_width = null, $rim_offset = null, $rim_offset_min = null, $rim_offset_max = null, $bolt_pattern = null, $region = null, $ordering = null)
    {
        if ($ordering !== null && strlen($ordering) < 1) {
            throw new \InvalidArgumentException('invalid length for "$ordering" when calling SearchByRimApi.centreBores, must be bigger than or equal to 1.');
        }


        $resourcePath = '/by_rim/cb/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($rim_diameter !== null) {
            $queryParams['rim_diameter'] = ObjectSerializer::toQueryValue($rim_diameter);
        }
        // query params
        if ($rim_width !== null) {
            $queryParams['rim_width'] = ObjectSerializer::toQueryValue($rim_width);
        }
        // query params
        if ($rim_offset !== null) {
            $queryParams['rim_offset'] = ObjectSerializer::toQueryValue($rim_offset);
        }
        // query params
        if ($rim_offset_min !== null) {
            $queryParams['rim_offset_min'] = ObjectSerializer::toQueryValue($rim_offset_min);
        }
        // query params
        if ($rim_offset_max !== null) {
            $queryParams['rim_offset_max'] = ObjectSerializer::toQueryValue($rim_offset_max);
        }
        // query params
        if ($bolt_pattern !== null) {
            $queryParams['bolt_pattern'] = ObjectSerializer::toQueryValue($bolt_pattern);
        }
        // query params
        if (is_array($region)) {
            $queryParams['region'] = $region;
        } else
        if ($region !== null) {
            $queryParams['region'] = ObjectSerializer::toQueryValue($region);
        }
        // query params
        if ($ordering !== null) {
            $queryParams['ordering'] = ObjectSerializer::toQueryValue($ordering);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('user_key');
        if ($apiKey !== null) {
            $queryParams['user_key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation diameters
     *
     * List rim diameters
     *
     * @param  string $bolt_pattern **&#x60;Bolt pattern&#x60;** is expressed as the number of lugs by the diameter of an imaginary circle formed by the centers of the wheel lugs. You can use _**&#x60;GET /by_rim/bp/&#x60;**_ to get a list of available *&#x60;value&#x60;* values. (e.g. &#x60;5x114.3&#x60;) (optional)
     * @param  string[] $region A **&#x60;Region&#x60;** is the region where the car was officially sold or is still being sold. You can use _**&#x60;GET /regions/&#x60;**_ to get a list of available *&#x60;slug&#x60;* values. (e.g. &#x60;usdm&#x60;) (optional)
     * @param  string $ordering Comma-separated list without spaces. Supported field names: *&#x60;value&#x60;* (optional)
     *
     * @throws \WheelSizeApiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \WheelSizeApiClient\Model\DiameterReportOutput
     */
    public function diameters($bolt_pattern = null, $region = null, $ordering = null)
    {
        list($response) = $this->diametersWithHttpInfo($bolt_pattern, $region, $ordering);
        return $response;
    }

    /**
     * Operation diametersWithHttpInfo
     *
     * List rim diameters
     *
     * @param  string $bolt_pattern **&#x60;Bolt pattern&#x60;** is expressed as the number of lugs by the diameter of an imaginary circle formed by the centers of the wheel lugs. You can use _**&#x60;GET /by_rim/bp/&#x60;**_ to get a list of available *&#x60;value&#x60;* values. (e.g. &#x60;5x114.3&#x60;) (optional)
     * @param  string[] $region A **&#x60;Region&#x60;** is the region where the car was officially sold or is still being sold. You can use _**&#x60;GET /regions/&#x60;**_ to get a list of available *&#x60;slug&#x60;* values. (e.g. &#x60;usdm&#x60;) (optional)
     * @param  string $ordering Comma-separated list without spaces. Supported field names: *&#x60;value&#x60;* (optional)
     *
     * @throws \WheelSizeApiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \WheelSizeApiClient\Model\DiameterReportOutput, HTTP status code, HTTP response headers (array of strings)
     */
    public function diametersWithHttpInfo($bolt_pattern = null, $region = null, $ordering = null)
    {
        $returnType = '\WheelSizeApiClient\Model\DiameterReportOutput';
        $request = $this->diametersRequest($bolt_pattern, $region, $ordering);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WheelSizeApiClient\Model\DiameterReportOutput',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation diametersAsync
     *
     * List rim diameters
     *
     * @param  string $bolt_pattern **&#x60;Bolt pattern&#x60;** is expressed as the number of lugs by the diameter of an imaginary circle formed by the centers of the wheel lugs. You can use _**&#x60;GET /by_rim/bp/&#x60;**_ to get a list of available *&#x60;value&#x60;* values. (e.g. &#x60;5x114.3&#x60;) (optional)
     * @param  string[] $region A **&#x60;Region&#x60;** is the region where the car was officially sold or is still being sold. You can use _**&#x60;GET /regions/&#x60;**_ to get a list of available *&#x60;slug&#x60;* values. (e.g. &#x60;usdm&#x60;) (optional)
     * @param  string $ordering Comma-separated list without spaces. Supported field names: *&#x60;value&#x60;* (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function diametersAsync($bolt_pattern = null, $region = null, $ordering = null)
    {
        return $this->diametersAsyncWithHttpInfo($bolt_pattern, $region, $ordering)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation diametersAsyncWithHttpInfo
     *
     * List rim diameters
     *
     * @param  string $bolt_pattern **&#x60;Bolt pattern&#x60;** is expressed as the number of lugs by the diameter of an imaginary circle formed by the centers of the wheel lugs. You can use _**&#x60;GET /by_rim/bp/&#x60;**_ to get a list of available *&#x60;value&#x60;* values. (e.g. &#x60;5x114.3&#x60;) (optional)
     * @param  string[] $region A **&#x60;Region&#x60;** is the region where the car was officially sold or is still being sold. You can use _**&#x60;GET /regions/&#x60;**_ to get a list of available *&#x60;slug&#x60;* values. (e.g. &#x60;usdm&#x60;) (optional)
     * @param  string $ordering Comma-separated list without spaces. Supported field names: *&#x60;value&#x60;* (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function diametersAsyncWithHttpInfo($bolt_pattern = null, $region = null, $ordering = null)
    {
        $returnType = '\WheelSizeApiClient\Model\DiameterReportOutput';
        $request = $this->diametersRequest($bolt_pattern, $region, $ordering);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'diameters'
     *
     * @param  string $bolt_pattern **&#x60;Bolt pattern&#x60;** is expressed as the number of lugs by the diameter of an imaginary circle formed by the centers of the wheel lugs. You can use _**&#x60;GET /by_rim/bp/&#x60;**_ to get a list of available *&#x60;value&#x60;* values. (e.g. &#x60;5x114.3&#x60;) (optional)
     * @param  string[] $region A **&#x60;Region&#x60;** is the region where the car was officially sold or is still being sold. You can use _**&#x60;GET /regions/&#x60;**_ to get a list of available *&#x60;slug&#x60;* values. (e.g. &#x60;usdm&#x60;) (optional)
     * @param  string $ordering Comma-separated list without spaces. Supported field names: *&#x60;value&#x60;* (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function diametersRequest($bolt_pattern = null, $region = null, $ordering = null)
    {
        if ($ordering !== null && strlen($ordering) < 1) {
            throw new \InvalidArgumentException('invalid length for "$ordering" when calling SearchByRimApi.diameters, must be bigger than or equal to 1.');
        }


        $resourcePath = '/by_rim/rd/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($bolt_pattern !== null) {
            $queryParams['bolt_pattern'] = ObjectSerializer::toQueryValue($bolt_pattern);
        }
        // query params
        if (is_array($region)) {
            $queryParams['region'] = $region;
        } else
        if ($region !== null) {
            $queryParams['region'] = ObjectSerializer::toQueryValue($region);
        }
        // query params
        if ($ordering !== null) {
            $queryParams['ordering'] = ObjectSerializer::toQueryValue($ordering);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('user_key');
        if ($apiKey !== null) {
            $queryParams['user_key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation offsets
     *
     * List rim offsets
     *
     * @param  float $rim_diameter Rim **&#x60;diameter&#x60;** is the distance measured in inches across the face of the wheel, from bead seat to bead seat. You can use _**&#x60;GET /by_rim/rd/&#x60;**_ to get a list of available *&#x60;value&#x60;* values. (e.g. &#x60;19&#x60;) (optional)
     * @param  float $rim_width Rim **&#x60;width&#x60;** is the distance measured in inches from bead seat to bead seat. You can use _**&#x60;GET /by_rim/rw/&#x60;**_ to get a list of available *&#x60;value&#x60;* values. (e.g. &#x60;7.5&#x60;) (optional)
     * @param  string $bolt_pattern **&#x60;Bolt pattern&#x60;** is expressed as the number of lugs by the diameter of an imaginary circle formed by the centers of the wheel lugs. You can use _**&#x60;GET /by_rim/bp/&#x60;**_ to get a list of available *&#x60;value&#x60;* values. (e.g. &#x60;5x114.3&#x60;) (optional)
     * @param  string[] $region A **&#x60;Region&#x60;** is the region where the car was officially sold or is still being sold. You can use _**&#x60;GET /regions/&#x60;**_ to get a list of available *&#x60;slug&#x60;* values. (e.g. &#x60;usdm&#x60;) (optional)
     * @param  string $ordering Comma-separated list without spaces. Supported field names: *&#x60;value&#x60;* (optional)
     *
     * @throws \WheelSizeApiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \WheelSizeApiClient\Model\OffsetReportOutput
     */
    public function offsets($rim_diameter = null, $rim_width = null, $bolt_pattern = null, $region = null, $ordering = null)
    {
        list($response) = $this->offsetsWithHttpInfo($rim_diameter, $rim_width, $bolt_pattern, $region, $ordering);
        return $response;
    }

    /**
     * Operation offsetsWithHttpInfo
     *
     * List rim offsets
     *
     * @param  float $rim_diameter Rim **&#x60;diameter&#x60;** is the distance measured in inches across the face of the wheel, from bead seat to bead seat. You can use _**&#x60;GET /by_rim/rd/&#x60;**_ to get a list of available *&#x60;value&#x60;* values. (e.g. &#x60;19&#x60;) (optional)
     * @param  float $rim_width Rim **&#x60;width&#x60;** is the distance measured in inches from bead seat to bead seat. You can use _**&#x60;GET /by_rim/rw/&#x60;**_ to get a list of available *&#x60;value&#x60;* values. (e.g. &#x60;7.5&#x60;) (optional)
     * @param  string $bolt_pattern **&#x60;Bolt pattern&#x60;** is expressed as the number of lugs by the diameter of an imaginary circle formed by the centers of the wheel lugs. You can use _**&#x60;GET /by_rim/bp/&#x60;**_ to get a list of available *&#x60;value&#x60;* values. (e.g. &#x60;5x114.3&#x60;) (optional)
     * @param  string[] $region A **&#x60;Region&#x60;** is the region where the car was officially sold or is still being sold. You can use _**&#x60;GET /regions/&#x60;**_ to get a list of available *&#x60;slug&#x60;* values. (e.g. &#x60;usdm&#x60;) (optional)
     * @param  string $ordering Comma-separated list without spaces. Supported field names: *&#x60;value&#x60;* (optional)
     *
     * @throws \WheelSizeApiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \WheelSizeApiClient\Model\OffsetReportOutput, HTTP status code, HTTP response headers (array of strings)
     */
    public function offsetsWithHttpInfo($rim_diameter = null, $rim_width = null, $bolt_pattern = null, $region = null, $ordering = null)
    {
        $returnType = '\WheelSizeApiClient\Model\OffsetReportOutput';
        $request = $this->offsetsRequest($rim_diameter, $rim_width, $bolt_pattern, $region, $ordering);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WheelSizeApiClient\Model\OffsetReportOutput',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation offsetsAsync
     *
     * List rim offsets
     *
     * @param  float $rim_diameter Rim **&#x60;diameter&#x60;** is the distance measured in inches across the face of the wheel, from bead seat to bead seat. You can use _**&#x60;GET /by_rim/rd/&#x60;**_ to get a list of available *&#x60;value&#x60;* values. (e.g. &#x60;19&#x60;) (optional)
     * @param  float $rim_width Rim **&#x60;width&#x60;** is the distance measured in inches from bead seat to bead seat. You can use _**&#x60;GET /by_rim/rw/&#x60;**_ to get a list of available *&#x60;value&#x60;* values. (e.g. &#x60;7.5&#x60;) (optional)
     * @param  string $bolt_pattern **&#x60;Bolt pattern&#x60;** is expressed as the number of lugs by the diameter of an imaginary circle formed by the centers of the wheel lugs. You can use _**&#x60;GET /by_rim/bp/&#x60;**_ to get a list of available *&#x60;value&#x60;* values. (e.g. &#x60;5x114.3&#x60;) (optional)
     * @param  string[] $region A **&#x60;Region&#x60;** is the region where the car was officially sold or is still being sold. You can use _**&#x60;GET /regions/&#x60;**_ to get a list of available *&#x60;slug&#x60;* values. (e.g. &#x60;usdm&#x60;) (optional)
     * @param  string $ordering Comma-separated list without spaces. Supported field names: *&#x60;value&#x60;* (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function offsetsAsync($rim_diameter = null, $rim_width = null, $bolt_pattern = null, $region = null, $ordering = null)
    {
        return $this->offsetsAsyncWithHttpInfo($rim_diameter, $rim_width, $bolt_pattern, $region, $ordering)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation offsetsAsyncWithHttpInfo
     *
     * List rim offsets
     *
     * @param  float $rim_diameter Rim **&#x60;diameter&#x60;** is the distance measured in inches across the face of the wheel, from bead seat to bead seat. You can use _**&#x60;GET /by_rim/rd/&#x60;**_ to get a list of available *&#x60;value&#x60;* values. (e.g. &#x60;19&#x60;) (optional)
     * @param  float $rim_width Rim **&#x60;width&#x60;** is the distance measured in inches from bead seat to bead seat. You can use _**&#x60;GET /by_rim/rw/&#x60;**_ to get a list of available *&#x60;value&#x60;* values. (e.g. &#x60;7.5&#x60;) (optional)
     * @param  string $bolt_pattern **&#x60;Bolt pattern&#x60;** is expressed as the number of lugs by the diameter of an imaginary circle formed by the centers of the wheel lugs. You can use _**&#x60;GET /by_rim/bp/&#x60;**_ to get a list of available *&#x60;value&#x60;* values. (e.g. &#x60;5x114.3&#x60;) (optional)
     * @param  string[] $region A **&#x60;Region&#x60;** is the region where the car was officially sold or is still being sold. You can use _**&#x60;GET /regions/&#x60;**_ to get a list of available *&#x60;slug&#x60;* values. (e.g. &#x60;usdm&#x60;) (optional)
     * @param  string $ordering Comma-separated list without spaces. Supported field names: *&#x60;value&#x60;* (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function offsetsAsyncWithHttpInfo($rim_diameter = null, $rim_width = null, $bolt_pattern = null, $region = null, $ordering = null)
    {
        $returnType = '\WheelSizeApiClient\Model\OffsetReportOutput';
        $request = $this->offsetsRequest($rim_diameter, $rim_width, $bolt_pattern, $region, $ordering);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'offsets'
     *
     * @param  float $rim_diameter Rim **&#x60;diameter&#x60;** is the distance measured in inches across the face of the wheel, from bead seat to bead seat. You can use _**&#x60;GET /by_rim/rd/&#x60;**_ to get a list of available *&#x60;value&#x60;* values. (e.g. &#x60;19&#x60;) (optional)
     * @param  float $rim_width Rim **&#x60;width&#x60;** is the distance measured in inches from bead seat to bead seat. You can use _**&#x60;GET /by_rim/rw/&#x60;**_ to get a list of available *&#x60;value&#x60;* values. (e.g. &#x60;7.5&#x60;) (optional)
     * @param  string $bolt_pattern **&#x60;Bolt pattern&#x60;** is expressed as the number of lugs by the diameter of an imaginary circle formed by the centers of the wheel lugs. You can use _**&#x60;GET /by_rim/bp/&#x60;**_ to get a list of available *&#x60;value&#x60;* values. (e.g. &#x60;5x114.3&#x60;) (optional)
     * @param  string[] $region A **&#x60;Region&#x60;** is the region where the car was officially sold or is still being sold. You can use _**&#x60;GET /regions/&#x60;**_ to get a list of available *&#x60;slug&#x60;* values. (e.g. &#x60;usdm&#x60;) (optional)
     * @param  string $ordering Comma-separated list without spaces. Supported field names: *&#x60;value&#x60;* (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function offsetsRequest($rim_diameter = null, $rim_width = null, $bolt_pattern = null, $region = null, $ordering = null)
    {
        if ($ordering !== null && strlen($ordering) < 1) {
            throw new \InvalidArgumentException('invalid length for "$ordering" when calling SearchByRimApi.offsets, must be bigger than or equal to 1.');
        }


        $resourcePath = '/by_rim/of/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($rim_diameter !== null) {
            $queryParams['rim_diameter'] = ObjectSerializer::toQueryValue($rim_diameter);
        }
        // query params
        if ($rim_width !== null) {
            $queryParams['rim_width'] = ObjectSerializer::toQueryValue($rim_width);
        }
        // query params
        if ($bolt_pattern !== null) {
            $queryParams['bolt_pattern'] = ObjectSerializer::toQueryValue($bolt_pattern);
        }
        // query params
        if (is_array($region)) {
            $queryParams['region'] = $region;
        } else
        if ($region !== null) {
            $queryParams['region'] = ObjectSerializer::toQueryValue($region);
        }
        // query params
        if ($ordering !== null) {
            $queryParams['ordering'] = ObjectSerializer::toQueryValue($ordering);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('user_key');
        if ($apiKey !== null) {
            $queryParams['user_key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation searchByRim
     *
     * Search by rim
     *
     * @param  string $bolt_pattern **&#x60;Bolt pattern&#x60;** is expressed as the number of lugs by the diameter of an imaginary circle formed by the centers of the wheel lugs. You can use _**&#x60;GET /by_rim/bp/&#x60;**_ to get a list of available *&#x60;value&#x60;* values. (e.g. &#x60;5x114.3&#x60;) (required)
     * @param  float $rim_diameter Rim **&#x60;diameter&#x60;** is the distance measured in inches across the face of the wheel, from bead seat to bead seat. You can use _**&#x60;GET /by_rim/rd/&#x60;**_ to get a list of available *&#x60;value&#x60;* values. (e.g. &#x60;19&#x60;) (required)
     * @param  float $rim_width Rim **&#x60;width&#x60;** is the distance measured in inches from bead seat to bead seat. You can use _**&#x60;GET /by_rim/rw/&#x60;**_ to get a list of available *&#x60;value&#x60;* values. (e.g. &#x60;7.5&#x60;) (optional)
     * @param  float $rim_width_min Minimum rim **&#x60;width&#x60;** value.  If set, **&#x60;rim_width&#x60;** value should be empty and **&#x60;rim_width_max&#x60;** should be defined.  Value difference between **&#x60;rim_width_max&#x60;** and **&#x60;rim_width_min&#x60;** must be equal to or less than 2.0. (e.g. &#x60;7.0&#x60;) (optional)
     * @param  float $rim_width_max Maximum rim **&#x60;width&#x60;** value.  If set, **&#x60;rim_width&#x60;** value should be empty and **&#x60;rim_width_min&#x60;** should be defined.  Value difference between **&#x60;rim_width_max&#x60;** and **&#x60;rim_width_min&#x60;** must be equal to or less than 2.0. (e.g. &#x60;8.0&#x60;) (optional)
     * @param  int $rim_offset Rim **&#x60;offset&#x60;** is a distance between wheel mounting surface where it is bolted to hub and the centerline of rim. You can use _**&#x60;GET /by_rim/of/&#x60;**_ to get a list of available *&#x60;value&#x60;* values. (e.g. &#x60;38&#x60;) (optional)
     * @param  int $rim_offset_min Minimum rim **&#x60;offset&#x60;** value.  If set, **&#x60;rim_offset&#x60;** value should be empty and **&#x60;rim_offset_max&#x60;** should be defined.  Value difference between **&#x60;rim_offset_max&#x60;** and **&#x60;rim_offset_min&#x60;** must be equal to or less than 50. (e.g. &#x60;33&#x60;) (optional)
     * @param  int $rim_offset_max Maximum rim **&#x60;offset&#x60;** value.  If set, **&#x60;rim_offset&#x60;** value should be empty and **&#x60;rim_offset_min&#x60;** should be defined.  Value difference between **&#x60;rim_offset_max&#x60;** and **&#x60;rim_offset_min&#x60;** must be equal to or less than 50. (e.g. &#x60;53&#x60;) (optional)
     * @param  float $cb Centre bore value, mm (e.g. &#x60;60&#x60;) (optional)
     * @param  float $cb_min Minimum **&#x60;centre bore&#x60;** value.  If set, **&#x60;cb&#x60;** value should be empty and **&#x60;cb_max&#x60;** should be defined.  Value difference between **&#x60;cb_max&#x60;** and **&#x60;cb_min&#x60;** must be equal to or less than 50. (e.g. &#x60;60&#x60;) (optional)
     * @param  float $cb_max Maximum **&#x60;centre bore&#x60;** value.  If set, **&#x60;cb&#x60;** value should be empty and **&#x60;cb_min&#x60;** should be defined.  Value difference between **&#x60;cb_max&#x60;** and **&#x60;cb_min&#x60;** must be equal to or less than 50. (e.g. &#x60;75&#x60;) (optional)
     * @param  string[] $region A **&#x60;Region&#x60;** is the region where the car was officially sold or is still being sold. You can use _**&#x60;GET /regions/&#x60;**_ to get a list of available *&#x60;slug&#x60;* values. (e.g. &#x60;usdm&#x60;) (optional)
     * @param  string $mode The **&#x60;Mode&#x60;** is used to set the search mode for data on the axes of wheelpairs. By default, the search uses the axles of the front and rear wheelset. **&#x60;Mode&#x60;** possible values: __*&#x60;both&#x60;*__, __*&#x60;front_only&#x60;*__ or __*&#x60;rear_only&#x60;*__. (e.g. &#x60;both&#x60;) (optional)
     * @param  bool $add_configurator Optional parameter for Wheel Configurator API specifics.  If set to true, information on linked Wheel Configurator templates will be included. (e.g. &#x60;true&#x60;) (optional)
     * @param  bool $configurator Optional parameter for Wheel Configurator API specifics.  If set to true, car models without linked Wheel Configurator templates will be omitted from the results. (e.g. &#x60;true&#x60;) (optional)
     * @param  string $ordering Comma-separated list without spaces. Supported field names: *&#x60;make&#x60;*, *&#x60;model&#x60;* (optional)
     *
     * @throws \WheelSizeApiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \WheelSizeApiClient\Model\SearchByRimCarReportOutput
     */
    public function searchByRim($bolt_pattern, $rim_diameter, $rim_width = null, $rim_width_min = null, $rim_width_max = null, $rim_offset = null, $rim_offset_min = null, $rim_offset_max = null, $cb = null, $cb_min = null, $cb_max = null, $region = null, $mode = null, $add_configurator = null, $configurator = null, $ordering = null)
    {
        list($response) = $this->searchByRimWithHttpInfo($bolt_pattern, $rim_diameter, $rim_width, $rim_width_min, $rim_width_max, $rim_offset, $rim_offset_min, $rim_offset_max, $cb, $cb_min, $cb_max, $region, $mode, $add_configurator, $configurator, $ordering);
        return $response;
    }

    /**
     * Operation searchByRimWithHttpInfo
     *
     * Search by rim
     *
     * @param  string $bolt_pattern **&#x60;Bolt pattern&#x60;** is expressed as the number of lugs by the diameter of an imaginary circle formed by the centers of the wheel lugs. You can use _**&#x60;GET /by_rim/bp/&#x60;**_ to get a list of available *&#x60;value&#x60;* values. (e.g. &#x60;5x114.3&#x60;) (required)
     * @param  float $rim_diameter Rim **&#x60;diameter&#x60;** is the distance measured in inches across the face of the wheel, from bead seat to bead seat. You can use _**&#x60;GET /by_rim/rd/&#x60;**_ to get a list of available *&#x60;value&#x60;* values. (e.g. &#x60;19&#x60;) (required)
     * @param  float $rim_width Rim **&#x60;width&#x60;** is the distance measured in inches from bead seat to bead seat. You can use _**&#x60;GET /by_rim/rw/&#x60;**_ to get a list of available *&#x60;value&#x60;* values. (e.g. &#x60;7.5&#x60;) (optional)
     * @param  float $rim_width_min Minimum rim **&#x60;width&#x60;** value.  If set, **&#x60;rim_width&#x60;** value should be empty and **&#x60;rim_width_max&#x60;** should be defined.  Value difference between **&#x60;rim_width_max&#x60;** and **&#x60;rim_width_min&#x60;** must be equal to or less than 2.0. (e.g. &#x60;7.0&#x60;) (optional)
     * @param  float $rim_width_max Maximum rim **&#x60;width&#x60;** value.  If set, **&#x60;rim_width&#x60;** value should be empty and **&#x60;rim_width_min&#x60;** should be defined.  Value difference between **&#x60;rim_width_max&#x60;** and **&#x60;rim_width_min&#x60;** must be equal to or less than 2.0. (e.g. &#x60;8.0&#x60;) (optional)
     * @param  int $rim_offset Rim **&#x60;offset&#x60;** is a distance between wheel mounting surface where it is bolted to hub and the centerline of rim. You can use _**&#x60;GET /by_rim/of/&#x60;**_ to get a list of available *&#x60;value&#x60;* values. (e.g. &#x60;38&#x60;) (optional)
     * @param  int $rim_offset_min Minimum rim **&#x60;offset&#x60;** value.  If set, **&#x60;rim_offset&#x60;** value should be empty and **&#x60;rim_offset_max&#x60;** should be defined.  Value difference between **&#x60;rim_offset_max&#x60;** and **&#x60;rim_offset_min&#x60;** must be equal to or less than 50. (e.g. &#x60;33&#x60;) (optional)
     * @param  int $rim_offset_max Maximum rim **&#x60;offset&#x60;** value.  If set, **&#x60;rim_offset&#x60;** value should be empty and **&#x60;rim_offset_min&#x60;** should be defined.  Value difference between **&#x60;rim_offset_max&#x60;** and **&#x60;rim_offset_min&#x60;** must be equal to or less than 50. (e.g. &#x60;53&#x60;) (optional)
     * @param  float $cb Centre bore value, mm (e.g. &#x60;60&#x60;) (optional)
     * @param  float $cb_min Minimum **&#x60;centre bore&#x60;** value.  If set, **&#x60;cb&#x60;** value should be empty and **&#x60;cb_max&#x60;** should be defined.  Value difference between **&#x60;cb_max&#x60;** and **&#x60;cb_min&#x60;** must be equal to or less than 50. (e.g. &#x60;60&#x60;) (optional)
     * @param  float $cb_max Maximum **&#x60;centre bore&#x60;** value.  If set, **&#x60;cb&#x60;** value should be empty and **&#x60;cb_min&#x60;** should be defined.  Value difference between **&#x60;cb_max&#x60;** and **&#x60;cb_min&#x60;** must be equal to or less than 50. (e.g. &#x60;75&#x60;) (optional)
     * @param  string[] $region A **&#x60;Region&#x60;** is the region where the car was officially sold or is still being sold. You can use _**&#x60;GET /regions/&#x60;**_ to get a list of available *&#x60;slug&#x60;* values. (e.g. &#x60;usdm&#x60;) (optional)
     * @param  string $mode The **&#x60;Mode&#x60;** is used to set the search mode for data on the axes of wheelpairs. By default, the search uses the axles of the front and rear wheelset. **&#x60;Mode&#x60;** possible values: __*&#x60;both&#x60;*__, __*&#x60;front_only&#x60;*__ or __*&#x60;rear_only&#x60;*__. (e.g. &#x60;both&#x60;) (optional)
     * @param  bool $add_configurator Optional parameter for Wheel Configurator API specifics.  If set to true, information on linked Wheel Configurator templates will be included. (e.g. &#x60;true&#x60;) (optional)
     * @param  bool $configurator Optional parameter for Wheel Configurator API specifics.  If set to true, car models without linked Wheel Configurator templates will be omitted from the results. (e.g. &#x60;true&#x60;) (optional)
     * @param  string $ordering Comma-separated list without spaces. Supported field names: *&#x60;make&#x60;*, *&#x60;model&#x60;* (optional)
     *
     * @throws \WheelSizeApiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \WheelSizeApiClient\Model\SearchByRimCarReportOutput, HTTP status code, HTTP response headers (array of strings)
     */
    public function searchByRimWithHttpInfo($bolt_pattern, $rim_diameter, $rim_width = null, $rim_width_min = null, $rim_width_max = null, $rim_offset = null, $rim_offset_min = null, $rim_offset_max = null, $cb = null, $cb_min = null, $cb_max = null, $region = null, $mode = null, $add_configurator = null, $configurator = null, $ordering = null)
    {
        $returnType = '\WheelSizeApiClient\Model\SearchByRimCarReportOutput';
        $request = $this->searchByRimRequest($bolt_pattern, $rim_diameter, $rim_width, $rim_width_min, $rim_width_max, $rim_offset, $rim_offset_min, $rim_offset_max, $cb, $cb_min, $cb_max, $region, $mode, $add_configurator, $configurator, $ordering);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WheelSizeApiClient\Model\SearchByRimCarReportOutput',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation searchByRimAsync
     *
     * Search by rim
     *
     * @param  string $bolt_pattern **&#x60;Bolt pattern&#x60;** is expressed as the number of lugs by the diameter of an imaginary circle formed by the centers of the wheel lugs. You can use _**&#x60;GET /by_rim/bp/&#x60;**_ to get a list of available *&#x60;value&#x60;* values. (e.g. &#x60;5x114.3&#x60;) (required)
     * @param  float $rim_diameter Rim **&#x60;diameter&#x60;** is the distance measured in inches across the face of the wheel, from bead seat to bead seat. You can use _**&#x60;GET /by_rim/rd/&#x60;**_ to get a list of available *&#x60;value&#x60;* values. (e.g. &#x60;19&#x60;) (required)
     * @param  float $rim_width Rim **&#x60;width&#x60;** is the distance measured in inches from bead seat to bead seat. You can use _**&#x60;GET /by_rim/rw/&#x60;**_ to get a list of available *&#x60;value&#x60;* values. (e.g. &#x60;7.5&#x60;) (optional)
     * @param  float $rim_width_min Minimum rim **&#x60;width&#x60;** value.  If set, **&#x60;rim_width&#x60;** value should be empty and **&#x60;rim_width_max&#x60;** should be defined.  Value difference between **&#x60;rim_width_max&#x60;** and **&#x60;rim_width_min&#x60;** must be equal to or less than 2.0. (e.g. &#x60;7.0&#x60;) (optional)
     * @param  float $rim_width_max Maximum rim **&#x60;width&#x60;** value.  If set, **&#x60;rim_width&#x60;** value should be empty and **&#x60;rim_width_min&#x60;** should be defined.  Value difference between **&#x60;rim_width_max&#x60;** and **&#x60;rim_width_min&#x60;** must be equal to or less than 2.0. (e.g. &#x60;8.0&#x60;) (optional)
     * @param  int $rim_offset Rim **&#x60;offset&#x60;** is a distance between wheel mounting surface where it is bolted to hub and the centerline of rim. You can use _**&#x60;GET /by_rim/of/&#x60;**_ to get a list of available *&#x60;value&#x60;* values. (e.g. &#x60;38&#x60;) (optional)
     * @param  int $rim_offset_min Minimum rim **&#x60;offset&#x60;** value.  If set, **&#x60;rim_offset&#x60;** value should be empty and **&#x60;rim_offset_max&#x60;** should be defined.  Value difference between **&#x60;rim_offset_max&#x60;** and **&#x60;rim_offset_min&#x60;** must be equal to or less than 50. (e.g. &#x60;33&#x60;) (optional)
     * @param  int $rim_offset_max Maximum rim **&#x60;offset&#x60;** value.  If set, **&#x60;rim_offset&#x60;** value should be empty and **&#x60;rim_offset_min&#x60;** should be defined.  Value difference between **&#x60;rim_offset_max&#x60;** and **&#x60;rim_offset_min&#x60;** must be equal to or less than 50. (e.g. &#x60;53&#x60;) (optional)
     * @param  float $cb Centre bore value, mm (e.g. &#x60;60&#x60;) (optional)
     * @param  float $cb_min Minimum **&#x60;centre bore&#x60;** value.  If set, **&#x60;cb&#x60;** value should be empty and **&#x60;cb_max&#x60;** should be defined.  Value difference between **&#x60;cb_max&#x60;** and **&#x60;cb_min&#x60;** must be equal to or less than 50. (e.g. &#x60;60&#x60;) (optional)
     * @param  float $cb_max Maximum **&#x60;centre bore&#x60;** value.  If set, **&#x60;cb&#x60;** value should be empty and **&#x60;cb_min&#x60;** should be defined.  Value difference between **&#x60;cb_max&#x60;** and **&#x60;cb_min&#x60;** must be equal to or less than 50. (e.g. &#x60;75&#x60;) (optional)
     * @param  string[] $region A **&#x60;Region&#x60;** is the region where the car was officially sold or is still being sold. You can use _**&#x60;GET /regions/&#x60;**_ to get a list of available *&#x60;slug&#x60;* values. (e.g. &#x60;usdm&#x60;) (optional)
     * @param  string $mode The **&#x60;Mode&#x60;** is used to set the search mode for data on the axes of wheelpairs. By default, the search uses the axles of the front and rear wheelset. **&#x60;Mode&#x60;** possible values: __*&#x60;both&#x60;*__, __*&#x60;front_only&#x60;*__ or __*&#x60;rear_only&#x60;*__. (e.g. &#x60;both&#x60;) (optional)
     * @param  bool $add_configurator Optional parameter for Wheel Configurator API specifics.  If set to true, information on linked Wheel Configurator templates will be included. (e.g. &#x60;true&#x60;) (optional)
     * @param  bool $configurator Optional parameter for Wheel Configurator API specifics.  If set to true, car models without linked Wheel Configurator templates will be omitted from the results. (e.g. &#x60;true&#x60;) (optional)
     * @param  string $ordering Comma-separated list without spaces. Supported field names: *&#x60;make&#x60;*, *&#x60;model&#x60;* (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function searchByRimAsync($bolt_pattern, $rim_diameter, $rim_width = null, $rim_width_min = null, $rim_width_max = null, $rim_offset = null, $rim_offset_min = null, $rim_offset_max = null, $cb = null, $cb_min = null, $cb_max = null, $region = null, $mode = null, $add_configurator = null, $configurator = null, $ordering = null)
    {
        return $this->searchByRimAsyncWithHttpInfo($bolt_pattern, $rim_diameter, $rim_width, $rim_width_min, $rim_width_max, $rim_offset, $rim_offset_min, $rim_offset_max, $cb, $cb_min, $cb_max, $region, $mode, $add_configurator, $configurator, $ordering)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation searchByRimAsyncWithHttpInfo
     *
     * Search by rim
     *
     * @param  string $bolt_pattern **&#x60;Bolt pattern&#x60;** is expressed as the number of lugs by the diameter of an imaginary circle formed by the centers of the wheel lugs. You can use _**&#x60;GET /by_rim/bp/&#x60;**_ to get a list of available *&#x60;value&#x60;* values. (e.g. &#x60;5x114.3&#x60;) (required)
     * @param  float $rim_diameter Rim **&#x60;diameter&#x60;** is the distance measured in inches across the face of the wheel, from bead seat to bead seat. You can use _**&#x60;GET /by_rim/rd/&#x60;**_ to get a list of available *&#x60;value&#x60;* values. (e.g. &#x60;19&#x60;) (required)
     * @param  float $rim_width Rim **&#x60;width&#x60;** is the distance measured in inches from bead seat to bead seat. You can use _**&#x60;GET /by_rim/rw/&#x60;**_ to get a list of available *&#x60;value&#x60;* values. (e.g. &#x60;7.5&#x60;) (optional)
     * @param  float $rim_width_min Minimum rim **&#x60;width&#x60;** value.  If set, **&#x60;rim_width&#x60;** value should be empty and **&#x60;rim_width_max&#x60;** should be defined.  Value difference between **&#x60;rim_width_max&#x60;** and **&#x60;rim_width_min&#x60;** must be equal to or less than 2.0. (e.g. &#x60;7.0&#x60;) (optional)
     * @param  float $rim_width_max Maximum rim **&#x60;width&#x60;** value.  If set, **&#x60;rim_width&#x60;** value should be empty and **&#x60;rim_width_min&#x60;** should be defined.  Value difference between **&#x60;rim_width_max&#x60;** and **&#x60;rim_width_min&#x60;** must be equal to or less than 2.0. (e.g. &#x60;8.0&#x60;) (optional)
     * @param  int $rim_offset Rim **&#x60;offset&#x60;** is a distance between wheel mounting surface where it is bolted to hub and the centerline of rim. You can use _**&#x60;GET /by_rim/of/&#x60;**_ to get a list of available *&#x60;value&#x60;* values. (e.g. &#x60;38&#x60;) (optional)
     * @param  int $rim_offset_min Minimum rim **&#x60;offset&#x60;** value.  If set, **&#x60;rim_offset&#x60;** value should be empty and **&#x60;rim_offset_max&#x60;** should be defined.  Value difference between **&#x60;rim_offset_max&#x60;** and **&#x60;rim_offset_min&#x60;** must be equal to or less than 50. (e.g. &#x60;33&#x60;) (optional)
     * @param  int $rim_offset_max Maximum rim **&#x60;offset&#x60;** value.  If set, **&#x60;rim_offset&#x60;** value should be empty and **&#x60;rim_offset_min&#x60;** should be defined.  Value difference between **&#x60;rim_offset_max&#x60;** and **&#x60;rim_offset_min&#x60;** must be equal to or less than 50. (e.g. &#x60;53&#x60;) (optional)
     * @param  float $cb Centre bore value, mm (e.g. &#x60;60&#x60;) (optional)
     * @param  float $cb_min Minimum **&#x60;centre bore&#x60;** value.  If set, **&#x60;cb&#x60;** value should be empty and **&#x60;cb_max&#x60;** should be defined.  Value difference between **&#x60;cb_max&#x60;** and **&#x60;cb_min&#x60;** must be equal to or less than 50. (e.g. &#x60;60&#x60;) (optional)
     * @param  float $cb_max Maximum **&#x60;centre bore&#x60;** value.  If set, **&#x60;cb&#x60;** value should be empty and **&#x60;cb_min&#x60;** should be defined.  Value difference between **&#x60;cb_max&#x60;** and **&#x60;cb_min&#x60;** must be equal to or less than 50. (e.g. &#x60;75&#x60;) (optional)
     * @param  string[] $region A **&#x60;Region&#x60;** is the region where the car was officially sold or is still being sold. You can use _**&#x60;GET /regions/&#x60;**_ to get a list of available *&#x60;slug&#x60;* values. (e.g. &#x60;usdm&#x60;) (optional)
     * @param  string $mode The **&#x60;Mode&#x60;** is used to set the search mode for data on the axes of wheelpairs. By default, the search uses the axles of the front and rear wheelset. **&#x60;Mode&#x60;** possible values: __*&#x60;both&#x60;*__, __*&#x60;front_only&#x60;*__ or __*&#x60;rear_only&#x60;*__. (e.g. &#x60;both&#x60;) (optional)
     * @param  bool $add_configurator Optional parameter for Wheel Configurator API specifics.  If set to true, information on linked Wheel Configurator templates will be included. (e.g. &#x60;true&#x60;) (optional)
     * @param  bool $configurator Optional parameter for Wheel Configurator API specifics.  If set to true, car models without linked Wheel Configurator templates will be omitted from the results. (e.g. &#x60;true&#x60;) (optional)
     * @param  string $ordering Comma-separated list without spaces. Supported field names: *&#x60;make&#x60;*, *&#x60;model&#x60;* (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function searchByRimAsyncWithHttpInfo($bolt_pattern, $rim_diameter, $rim_width = null, $rim_width_min = null, $rim_width_max = null, $rim_offset = null, $rim_offset_min = null, $rim_offset_max = null, $cb = null, $cb_min = null, $cb_max = null, $region = null, $mode = null, $add_configurator = null, $configurator = null, $ordering = null)
    {
        $returnType = '\WheelSizeApiClient\Model\SearchByRimCarReportOutput';
        $request = $this->searchByRimRequest($bolt_pattern, $rim_diameter, $rim_width, $rim_width_min, $rim_width_max, $rim_offset, $rim_offset_min, $rim_offset_max, $cb, $cb_min, $cb_max, $region, $mode, $add_configurator, $configurator, $ordering);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'searchByRim'
     *
     * @param  string $bolt_pattern **&#x60;Bolt pattern&#x60;** is expressed as the number of lugs by the diameter of an imaginary circle formed by the centers of the wheel lugs. You can use _**&#x60;GET /by_rim/bp/&#x60;**_ to get a list of available *&#x60;value&#x60;* values. (e.g. &#x60;5x114.3&#x60;) (required)
     * @param  float $rim_diameter Rim **&#x60;diameter&#x60;** is the distance measured in inches across the face of the wheel, from bead seat to bead seat. You can use _**&#x60;GET /by_rim/rd/&#x60;**_ to get a list of available *&#x60;value&#x60;* values. (e.g. &#x60;19&#x60;) (required)
     * @param  float $rim_width Rim **&#x60;width&#x60;** is the distance measured in inches from bead seat to bead seat. You can use _**&#x60;GET /by_rim/rw/&#x60;**_ to get a list of available *&#x60;value&#x60;* values. (e.g. &#x60;7.5&#x60;) (optional)
     * @param  float $rim_width_min Minimum rim **&#x60;width&#x60;** value.  If set, **&#x60;rim_width&#x60;** value should be empty and **&#x60;rim_width_max&#x60;** should be defined.  Value difference between **&#x60;rim_width_max&#x60;** and **&#x60;rim_width_min&#x60;** must be equal to or less than 2.0. (e.g. &#x60;7.0&#x60;) (optional)
     * @param  float $rim_width_max Maximum rim **&#x60;width&#x60;** value.  If set, **&#x60;rim_width&#x60;** value should be empty and **&#x60;rim_width_min&#x60;** should be defined.  Value difference between **&#x60;rim_width_max&#x60;** and **&#x60;rim_width_min&#x60;** must be equal to or less than 2.0. (e.g. &#x60;8.0&#x60;) (optional)
     * @param  int $rim_offset Rim **&#x60;offset&#x60;** is a distance between wheel mounting surface where it is bolted to hub and the centerline of rim. You can use _**&#x60;GET /by_rim/of/&#x60;**_ to get a list of available *&#x60;value&#x60;* values. (e.g. &#x60;38&#x60;) (optional)
     * @param  int $rim_offset_min Minimum rim **&#x60;offset&#x60;** value.  If set, **&#x60;rim_offset&#x60;** value should be empty and **&#x60;rim_offset_max&#x60;** should be defined.  Value difference between **&#x60;rim_offset_max&#x60;** and **&#x60;rim_offset_min&#x60;** must be equal to or less than 50. (e.g. &#x60;33&#x60;) (optional)
     * @param  int $rim_offset_max Maximum rim **&#x60;offset&#x60;** value.  If set, **&#x60;rim_offset&#x60;** value should be empty and **&#x60;rim_offset_min&#x60;** should be defined.  Value difference between **&#x60;rim_offset_max&#x60;** and **&#x60;rim_offset_min&#x60;** must be equal to or less than 50. (e.g. &#x60;53&#x60;) (optional)
     * @param  float $cb Centre bore value, mm (e.g. &#x60;60&#x60;) (optional)
     * @param  float $cb_min Minimum **&#x60;centre bore&#x60;** value.  If set, **&#x60;cb&#x60;** value should be empty and **&#x60;cb_max&#x60;** should be defined.  Value difference between **&#x60;cb_max&#x60;** and **&#x60;cb_min&#x60;** must be equal to or less than 50. (e.g. &#x60;60&#x60;) (optional)
     * @param  float $cb_max Maximum **&#x60;centre bore&#x60;** value.  If set, **&#x60;cb&#x60;** value should be empty and **&#x60;cb_min&#x60;** should be defined.  Value difference between **&#x60;cb_max&#x60;** and **&#x60;cb_min&#x60;** must be equal to or less than 50. (e.g. &#x60;75&#x60;) (optional)
     * @param  string[] $region A **&#x60;Region&#x60;** is the region where the car was officially sold or is still being sold. You can use _**&#x60;GET /regions/&#x60;**_ to get a list of available *&#x60;slug&#x60;* values. (e.g. &#x60;usdm&#x60;) (optional)
     * @param  string $mode The **&#x60;Mode&#x60;** is used to set the search mode for data on the axes of wheelpairs. By default, the search uses the axles of the front and rear wheelset. **&#x60;Mode&#x60;** possible values: __*&#x60;both&#x60;*__, __*&#x60;front_only&#x60;*__ or __*&#x60;rear_only&#x60;*__. (e.g. &#x60;both&#x60;) (optional)
     * @param  bool $add_configurator Optional parameter for Wheel Configurator API specifics.  If set to true, information on linked Wheel Configurator templates will be included. (e.g. &#x60;true&#x60;) (optional)
     * @param  bool $configurator Optional parameter for Wheel Configurator API specifics.  If set to true, car models without linked Wheel Configurator templates will be omitted from the results. (e.g. &#x60;true&#x60;) (optional)
     * @param  string $ordering Comma-separated list without spaces. Supported field names: *&#x60;make&#x60;*, *&#x60;model&#x60;* (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function searchByRimRequest($bolt_pattern, $rim_diameter, $rim_width = null, $rim_width_min = null, $rim_width_max = null, $rim_offset = null, $rim_offset_min = null, $rim_offset_max = null, $cb = null, $cb_min = null, $cb_max = null, $region = null, $mode = null, $add_configurator = null, $configurator = null, $ordering = null)
    {
        // verify the required parameter 'bolt_pattern' is set
        if ($bolt_pattern === null || (is_array($bolt_pattern) && count($bolt_pattern) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $bolt_pattern when calling searchByRim'
            );
        }
        // verify the required parameter 'rim_diameter' is set
        if ($rim_diameter === null || (is_array($rim_diameter) && count($rim_diameter) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $rim_diameter when calling searchByRim'
            );
        }
        if ($ordering !== null && strlen($ordering) < 1) {
            throw new \InvalidArgumentException('invalid length for "$ordering" when calling SearchByRimApi.searchByRim, must be bigger than or equal to 1.');
        }


        $resourcePath = '/by_rim/search/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($bolt_pattern !== null) {
            $queryParams['bolt_pattern'] = ObjectSerializer::toQueryValue($bolt_pattern);
        }
        // query params
        if ($rim_diameter !== null) {
            $queryParams['rim_diameter'] = ObjectSerializer::toQueryValue($rim_diameter);
        }
        // query params
        if ($rim_width !== null) {
            $queryParams['rim_width'] = ObjectSerializer::toQueryValue($rim_width);
        }
        // query params
        if ($rim_width_min !== null) {
            $queryParams['rim_width_min'] = ObjectSerializer::toQueryValue($rim_width_min);
        }
        // query params
        if ($rim_width_max !== null) {
            $queryParams['rim_width_max'] = ObjectSerializer::toQueryValue($rim_width_max);
        }
        // query params
        if ($rim_offset !== null) {
            $queryParams['rim_offset'] = ObjectSerializer::toQueryValue($rim_offset);
        }
        // query params
        if ($rim_offset_min !== null) {
            $queryParams['rim_offset_min'] = ObjectSerializer::toQueryValue($rim_offset_min);
        }
        // query params
        if ($rim_offset_max !== null) {
            $queryParams['rim_offset_max'] = ObjectSerializer::toQueryValue($rim_offset_max);
        }
        // query params
        if ($cb !== null) {
            $queryParams['cb'] = ObjectSerializer::toQueryValue($cb);
        }
        // query params
        if ($cb_min !== null) {
            $queryParams['cb_min'] = ObjectSerializer::toQueryValue($cb_min);
        }
        // query params
        if ($cb_max !== null) {
            $queryParams['cb_max'] = ObjectSerializer::toQueryValue($cb_max);
        }
        // query params
        if (is_array($region)) {
            $queryParams['region'] = $region;
        } else
        if ($region !== null) {
            $queryParams['region'] = ObjectSerializer::toQueryValue($region);
        }
        // query params
        if ($mode !== null) {
            $queryParams['mode'] = ObjectSerializer::toQueryValue($mode);
        }
        // query params
        if ($add_configurator !== null) {
            $queryParams['add_configurator'] = ObjectSerializer::toQueryValue($add_configurator);
        }
        // query params
        if ($configurator !== null) {
            $queryParams['configurator'] = ObjectSerializer::toQueryValue($configurator);
        }
        // query params
        if ($ordering !== null) {
            $queryParams['ordering'] = ObjectSerializer::toQueryValue($ordering);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('user_key');
        if ($apiKey !== null) {
            $queryParams['user_key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation searchByRimModifications
     *
     * Search by rim modifications
     *
     * @param  string $make A car&#39;s **&#x60;Make&#x60;** is the brand of the vehicle. You can use _**&#x60;GET /makes/&#x60;**_ to get a list of available *&#x60;slug&#x60;* values. (e.g. &#x60;mitsubishi&#x60;) (required)
     * @param  string $model The particular **&#x60;Model&#x60;** of the brand. You can use _**&#x60;GET /models/&#x60;**_ to get a list of available *&#x60;slug&#x60;* values. (e.g. &#x60;outlander&#x60;) (required)
     * @param  string $bolt_pattern **&#x60;Bolt pattern&#x60;** is expressed as the number of lugs by the diameter of an imaginary circle formed by the centers of the wheel lugs. You can use _**&#x60;GET /by_rim/bp/&#x60;**_ to get a list of available *&#x60;value&#x60;* values. (e.g. &#x60;5x114.3&#x60;) (required)
     * @param  float $rim_diameter Rim **&#x60;diameter&#x60;** is the distance measured in inches across the face of the wheel, from bead seat to bead seat. You can use _**&#x60;GET /by_rim/rd/&#x60;**_ to get a list of available *&#x60;value&#x60;* values. (e.g. &#x60;19&#x60;) (required)
     * @param  float $rim_width Rim **&#x60;width&#x60;** is the distance measured in inches from bead seat to bead seat. You can use _**&#x60;GET /by_rim/rw/&#x60;**_ to get a list of available *&#x60;value&#x60;* values. (e.g. &#x60;7.5&#x60;) (required)
     * @param  float $rim_width_min Minimum rim **&#x60;width&#x60;** value.  If set, **&#x60;rim_width&#x60;** value should be empty and **&#x60;rim_width_max&#x60;** should be defined.  Value difference between **&#x60;rim_width_max&#x60;** and **&#x60;rim_width_min&#x60;** must be equal to or less than 2.0. (e.g. &#x60;7.0&#x60;) (optional)
     * @param  float $rim_width_max Maximum rim **&#x60;width&#x60;** value.  If set, **&#x60;rim_width&#x60;** value should be empty and **&#x60;rim_width_min&#x60;** should be defined.  Value difference between **&#x60;rim_width_max&#x60;** and **&#x60;rim_width_min&#x60;** must be equal to or less than 2.0. (e.g. &#x60;8.0&#x60;) (optional)
     * @param  int $rim_offset Rim **&#x60;offset&#x60;** is a distance between wheel mounting surface where it is bolted to hub and the centerline of rim. You can use _**&#x60;GET /by_rim/of/&#x60;**_ to get a list of available *&#x60;value&#x60;* values. (e.g. &#x60;38&#x60;) (optional)
     * @param  int $rim_offset_min Minimum rim **&#x60;offset&#x60;** value.  If set, **&#x60;rim_offset&#x60;** value should be empty and **&#x60;rim_offset_max&#x60;** should be defined.  Value difference between **&#x60;rim_offset_max&#x60;** and **&#x60;rim_offset_min&#x60;** must be equal to or less than 50. (e.g. &#x60;33&#x60;) (optional)
     * @param  int $rim_offset_max Maximum rim **&#x60;offset&#x60;** value.  If set, **&#x60;rim_offset&#x60;** value should be empty and **&#x60;rim_offset_min&#x60;** should be defined.  Value difference between **&#x60;rim_offset_max&#x60;** and **&#x60;rim_offset_min&#x60;** must be equal to or less than 50. (e.g. &#x60;53&#x60;) (optional)
     * @param  float $cb Centre bore value, mm (e.g. &#x60;60&#x60;) (optional)
     * @param  float $cb_min Minimum **&#x60;centre bore&#x60;** value.  If set, **&#x60;cb&#x60;** value should be empty and **&#x60;cb_max&#x60;** should be defined.  Value difference between **&#x60;cb_max&#x60;** and **&#x60;cb_min&#x60;** must be equal to or less than 50. (e.g. &#x60;60&#x60;) (optional)
     * @param  float $cb_max Maximum **&#x60;centre bore&#x60;** value.  If set, **&#x60;cb&#x60;** value should be empty and **&#x60;cb_min&#x60;** should be defined.  Value difference between **&#x60;cb_max&#x60;** and **&#x60;cb_min&#x60;** must be equal to or less than 50. (e.g. &#x60;75&#x60;) (optional)
     * @param  string[] $region A **&#x60;Region&#x60;** is the region where the car was officially sold or is still being sold. You can use _**&#x60;GET /regions/&#x60;**_ to get a list of available *&#x60;slug&#x60;* values. (e.g. &#x60;usdm&#x60;) (optional)
     * @param  string $mode The **&#x60;Mode&#x60;** is used to set the search mode for data on the axes of wheelpairs. By default, the search uses the axles of the front and rear wheelset. **&#x60;Mode&#x60;** possible values: __*&#x60;both&#x60;*__, __*&#x60;front_only&#x60;*__ or __*&#x60;rear_only&#x60;*__. (e.g. &#x60;both&#x60;) (optional)
     * @param  int $configurator configurator (optional)
     * @param  string $ordering Comma-separated list without spaces. Supported field names: *&#x60;make&#x60;*, *&#x60;model&#x60;*, *&#x60;trim&#x60;*, *&#x60;start_year&#x60;*, *&#x60;end_year&#x60;* (optional)
     * @param  int $limit limit (optional, default to 50)
     * @param  int $offset offset (optional, default to 0)
     *
     * @throws \WheelSizeApiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \WheelSizeApiClient\Model\SearchByRimModificationReportOutput
     */
    public function searchByRimModifications($make, $model, $bolt_pattern, $rim_diameter, $rim_width, $rim_width_min = null, $rim_width_max = null, $rim_offset = null, $rim_offset_min = null, $rim_offset_max = null, $cb = null, $cb_min = null, $cb_max = null, $region = null, $mode = null, $configurator = null, $ordering = null, $limit = '50', $offset = '0')
    {
        list($response) = $this->searchByRimModificationsWithHttpInfo($make, $model, $bolt_pattern, $rim_diameter, $rim_width, $rim_width_min, $rim_width_max, $rim_offset, $rim_offset_min, $rim_offset_max, $cb, $cb_min, $cb_max, $region, $mode, $configurator, $ordering, $limit, $offset);
        return $response;
    }

    /**
     * Operation searchByRimModificationsWithHttpInfo
     *
     * Search by rim modifications
     *
     * @param  string $make A car&#39;s **&#x60;Make&#x60;** is the brand of the vehicle. You can use _**&#x60;GET /makes/&#x60;**_ to get a list of available *&#x60;slug&#x60;* values. (e.g. &#x60;mitsubishi&#x60;) (required)
     * @param  string $model The particular **&#x60;Model&#x60;** of the brand. You can use _**&#x60;GET /models/&#x60;**_ to get a list of available *&#x60;slug&#x60;* values. (e.g. &#x60;outlander&#x60;) (required)
     * @param  string $bolt_pattern **&#x60;Bolt pattern&#x60;** is expressed as the number of lugs by the diameter of an imaginary circle formed by the centers of the wheel lugs. You can use _**&#x60;GET /by_rim/bp/&#x60;**_ to get a list of available *&#x60;value&#x60;* values. (e.g. &#x60;5x114.3&#x60;) (required)
     * @param  float $rim_diameter Rim **&#x60;diameter&#x60;** is the distance measured in inches across the face of the wheel, from bead seat to bead seat. You can use _**&#x60;GET /by_rim/rd/&#x60;**_ to get a list of available *&#x60;value&#x60;* values. (e.g. &#x60;19&#x60;) (required)
     * @param  float $rim_width Rim **&#x60;width&#x60;** is the distance measured in inches from bead seat to bead seat. You can use _**&#x60;GET /by_rim/rw/&#x60;**_ to get a list of available *&#x60;value&#x60;* values. (e.g. &#x60;7.5&#x60;) (required)
     * @param  float $rim_width_min Minimum rim **&#x60;width&#x60;** value.  If set, **&#x60;rim_width&#x60;** value should be empty and **&#x60;rim_width_max&#x60;** should be defined.  Value difference between **&#x60;rim_width_max&#x60;** and **&#x60;rim_width_min&#x60;** must be equal to or less than 2.0. (e.g. &#x60;7.0&#x60;) (optional)
     * @param  float $rim_width_max Maximum rim **&#x60;width&#x60;** value.  If set, **&#x60;rim_width&#x60;** value should be empty and **&#x60;rim_width_min&#x60;** should be defined.  Value difference between **&#x60;rim_width_max&#x60;** and **&#x60;rim_width_min&#x60;** must be equal to or less than 2.0. (e.g. &#x60;8.0&#x60;) (optional)
     * @param  int $rim_offset Rim **&#x60;offset&#x60;** is a distance between wheel mounting surface where it is bolted to hub and the centerline of rim. You can use _**&#x60;GET /by_rim/of/&#x60;**_ to get a list of available *&#x60;value&#x60;* values. (e.g. &#x60;38&#x60;) (optional)
     * @param  int $rim_offset_min Minimum rim **&#x60;offset&#x60;** value.  If set, **&#x60;rim_offset&#x60;** value should be empty and **&#x60;rim_offset_max&#x60;** should be defined.  Value difference between **&#x60;rim_offset_max&#x60;** and **&#x60;rim_offset_min&#x60;** must be equal to or less than 50. (e.g. &#x60;33&#x60;) (optional)
     * @param  int $rim_offset_max Maximum rim **&#x60;offset&#x60;** value.  If set, **&#x60;rim_offset&#x60;** value should be empty and **&#x60;rim_offset_min&#x60;** should be defined.  Value difference between **&#x60;rim_offset_max&#x60;** and **&#x60;rim_offset_min&#x60;** must be equal to or less than 50. (e.g. &#x60;53&#x60;) (optional)
     * @param  float $cb Centre bore value, mm (e.g. &#x60;60&#x60;) (optional)
     * @param  float $cb_min Minimum **&#x60;centre bore&#x60;** value.  If set, **&#x60;cb&#x60;** value should be empty and **&#x60;cb_max&#x60;** should be defined.  Value difference between **&#x60;cb_max&#x60;** and **&#x60;cb_min&#x60;** must be equal to or less than 50. (e.g. &#x60;60&#x60;) (optional)
     * @param  float $cb_max Maximum **&#x60;centre bore&#x60;** value.  If set, **&#x60;cb&#x60;** value should be empty and **&#x60;cb_min&#x60;** should be defined.  Value difference between **&#x60;cb_max&#x60;** and **&#x60;cb_min&#x60;** must be equal to or less than 50. (e.g. &#x60;75&#x60;) (optional)
     * @param  string[] $region A **&#x60;Region&#x60;** is the region where the car was officially sold or is still being sold. You can use _**&#x60;GET /regions/&#x60;**_ to get a list of available *&#x60;slug&#x60;* values. (e.g. &#x60;usdm&#x60;) (optional)
     * @param  string $mode The **&#x60;Mode&#x60;** is used to set the search mode for data on the axes of wheelpairs. By default, the search uses the axles of the front and rear wheelset. **&#x60;Mode&#x60;** possible values: __*&#x60;both&#x60;*__, __*&#x60;front_only&#x60;*__ or __*&#x60;rear_only&#x60;*__. (e.g. &#x60;both&#x60;) (optional)
     * @param  int $configurator (optional)
     * @param  string $ordering Comma-separated list without spaces. Supported field names: *&#x60;make&#x60;*, *&#x60;model&#x60;*, *&#x60;trim&#x60;*, *&#x60;start_year&#x60;*, *&#x60;end_year&#x60;* (optional)
     * @param  int $limit (optional, default to 50)
     * @param  int $offset (optional, default to 0)
     *
     * @throws \WheelSizeApiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \WheelSizeApiClient\Model\SearchByRimModificationReportOutput, HTTP status code, HTTP response headers (array of strings)
     */
    public function searchByRimModificationsWithHttpInfo($make, $model, $bolt_pattern, $rim_diameter, $rim_width, $rim_width_min = null, $rim_width_max = null, $rim_offset = null, $rim_offset_min = null, $rim_offset_max = null, $cb = null, $cb_min = null, $cb_max = null, $region = null, $mode = null, $configurator = null, $ordering = null, $limit = '50', $offset = '0')
    {
        $returnType = '\WheelSizeApiClient\Model\SearchByRimModificationReportOutput';
        $request = $this->searchByRimModificationsRequest($make, $model, $bolt_pattern, $rim_diameter, $rim_width, $rim_width_min, $rim_width_max, $rim_offset, $rim_offset_min, $rim_offset_max, $cb, $cb_min, $cb_max, $region, $mode, $configurator, $ordering, $limit, $offset);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WheelSizeApiClient\Model\SearchByRimModificationReportOutput',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation searchByRimModificationsAsync
     *
     * Search by rim modifications
     *
     * @param  string $make A car&#39;s **&#x60;Make&#x60;** is the brand of the vehicle. You can use _**&#x60;GET /makes/&#x60;**_ to get a list of available *&#x60;slug&#x60;* values. (e.g. &#x60;mitsubishi&#x60;) (required)
     * @param  string $model The particular **&#x60;Model&#x60;** of the brand. You can use _**&#x60;GET /models/&#x60;**_ to get a list of available *&#x60;slug&#x60;* values. (e.g. &#x60;outlander&#x60;) (required)
     * @param  string $bolt_pattern **&#x60;Bolt pattern&#x60;** is expressed as the number of lugs by the diameter of an imaginary circle formed by the centers of the wheel lugs. You can use _**&#x60;GET /by_rim/bp/&#x60;**_ to get a list of available *&#x60;value&#x60;* values. (e.g. &#x60;5x114.3&#x60;) (required)
     * @param  float $rim_diameter Rim **&#x60;diameter&#x60;** is the distance measured in inches across the face of the wheel, from bead seat to bead seat. You can use _**&#x60;GET /by_rim/rd/&#x60;**_ to get a list of available *&#x60;value&#x60;* values. (e.g. &#x60;19&#x60;) (required)
     * @param  float $rim_width Rim **&#x60;width&#x60;** is the distance measured in inches from bead seat to bead seat. You can use _**&#x60;GET /by_rim/rw/&#x60;**_ to get a list of available *&#x60;value&#x60;* values. (e.g. &#x60;7.5&#x60;) (required)
     * @param  float $rim_width_min Minimum rim **&#x60;width&#x60;** value.  If set, **&#x60;rim_width&#x60;** value should be empty and **&#x60;rim_width_max&#x60;** should be defined.  Value difference between **&#x60;rim_width_max&#x60;** and **&#x60;rim_width_min&#x60;** must be equal to or less than 2.0. (e.g. &#x60;7.0&#x60;) (optional)
     * @param  float $rim_width_max Maximum rim **&#x60;width&#x60;** value.  If set, **&#x60;rim_width&#x60;** value should be empty and **&#x60;rim_width_min&#x60;** should be defined.  Value difference between **&#x60;rim_width_max&#x60;** and **&#x60;rim_width_min&#x60;** must be equal to or less than 2.0. (e.g. &#x60;8.0&#x60;) (optional)
     * @param  int $rim_offset Rim **&#x60;offset&#x60;** is a distance between wheel mounting surface where it is bolted to hub and the centerline of rim. You can use _**&#x60;GET /by_rim/of/&#x60;**_ to get a list of available *&#x60;value&#x60;* values. (e.g. &#x60;38&#x60;) (optional)
     * @param  int $rim_offset_min Minimum rim **&#x60;offset&#x60;** value.  If set, **&#x60;rim_offset&#x60;** value should be empty and **&#x60;rim_offset_max&#x60;** should be defined.  Value difference between **&#x60;rim_offset_max&#x60;** and **&#x60;rim_offset_min&#x60;** must be equal to or less than 50. (e.g. &#x60;33&#x60;) (optional)
     * @param  int $rim_offset_max Maximum rim **&#x60;offset&#x60;** value.  If set, **&#x60;rim_offset&#x60;** value should be empty and **&#x60;rim_offset_min&#x60;** should be defined.  Value difference between **&#x60;rim_offset_max&#x60;** and **&#x60;rim_offset_min&#x60;** must be equal to or less than 50. (e.g. &#x60;53&#x60;) (optional)
     * @param  float $cb Centre bore value, mm (e.g. &#x60;60&#x60;) (optional)
     * @param  float $cb_min Minimum **&#x60;centre bore&#x60;** value.  If set, **&#x60;cb&#x60;** value should be empty and **&#x60;cb_max&#x60;** should be defined.  Value difference between **&#x60;cb_max&#x60;** and **&#x60;cb_min&#x60;** must be equal to or less than 50. (e.g. &#x60;60&#x60;) (optional)
     * @param  float $cb_max Maximum **&#x60;centre bore&#x60;** value.  If set, **&#x60;cb&#x60;** value should be empty and **&#x60;cb_min&#x60;** should be defined.  Value difference between **&#x60;cb_max&#x60;** and **&#x60;cb_min&#x60;** must be equal to or less than 50. (e.g. &#x60;75&#x60;) (optional)
     * @param  string[] $region A **&#x60;Region&#x60;** is the region where the car was officially sold or is still being sold. You can use _**&#x60;GET /regions/&#x60;**_ to get a list of available *&#x60;slug&#x60;* values. (e.g. &#x60;usdm&#x60;) (optional)
     * @param  string $mode The **&#x60;Mode&#x60;** is used to set the search mode for data on the axes of wheelpairs. By default, the search uses the axles of the front and rear wheelset. **&#x60;Mode&#x60;** possible values: __*&#x60;both&#x60;*__, __*&#x60;front_only&#x60;*__ or __*&#x60;rear_only&#x60;*__. (e.g. &#x60;both&#x60;) (optional)
     * @param  int $configurator (optional)
     * @param  string $ordering Comma-separated list without spaces. Supported field names: *&#x60;make&#x60;*, *&#x60;model&#x60;*, *&#x60;trim&#x60;*, *&#x60;start_year&#x60;*, *&#x60;end_year&#x60;* (optional)
     * @param  int $limit (optional, default to 50)
     * @param  int $offset (optional, default to 0)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function searchByRimModificationsAsync($make, $model, $bolt_pattern, $rim_diameter, $rim_width, $rim_width_min = null, $rim_width_max = null, $rim_offset = null, $rim_offset_min = null, $rim_offset_max = null, $cb = null, $cb_min = null, $cb_max = null, $region = null, $mode = null, $configurator = null, $ordering = null, $limit = '50', $offset = '0')
    {
        return $this->searchByRimModificationsAsyncWithHttpInfo($make, $model, $bolt_pattern, $rim_diameter, $rim_width, $rim_width_min, $rim_width_max, $rim_offset, $rim_offset_min, $rim_offset_max, $cb, $cb_min, $cb_max, $region, $mode, $configurator, $ordering, $limit, $offset)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation searchByRimModificationsAsyncWithHttpInfo
     *
     * Search by rim modifications
     *
     * @param  string $make A car&#39;s **&#x60;Make&#x60;** is the brand of the vehicle. You can use _**&#x60;GET /makes/&#x60;**_ to get a list of available *&#x60;slug&#x60;* values. (e.g. &#x60;mitsubishi&#x60;) (required)
     * @param  string $model The particular **&#x60;Model&#x60;** of the brand. You can use _**&#x60;GET /models/&#x60;**_ to get a list of available *&#x60;slug&#x60;* values. (e.g. &#x60;outlander&#x60;) (required)
     * @param  string $bolt_pattern **&#x60;Bolt pattern&#x60;** is expressed as the number of lugs by the diameter of an imaginary circle formed by the centers of the wheel lugs. You can use _**&#x60;GET /by_rim/bp/&#x60;**_ to get a list of available *&#x60;value&#x60;* values. (e.g. &#x60;5x114.3&#x60;) (required)
     * @param  float $rim_diameter Rim **&#x60;diameter&#x60;** is the distance measured in inches across the face of the wheel, from bead seat to bead seat. You can use _**&#x60;GET /by_rim/rd/&#x60;**_ to get a list of available *&#x60;value&#x60;* values. (e.g. &#x60;19&#x60;) (required)
     * @param  float $rim_width Rim **&#x60;width&#x60;** is the distance measured in inches from bead seat to bead seat. You can use _**&#x60;GET /by_rim/rw/&#x60;**_ to get a list of available *&#x60;value&#x60;* values. (e.g. &#x60;7.5&#x60;) (required)
     * @param  float $rim_width_min Minimum rim **&#x60;width&#x60;** value.  If set, **&#x60;rim_width&#x60;** value should be empty and **&#x60;rim_width_max&#x60;** should be defined.  Value difference between **&#x60;rim_width_max&#x60;** and **&#x60;rim_width_min&#x60;** must be equal to or less than 2.0. (e.g. &#x60;7.0&#x60;) (optional)
     * @param  float $rim_width_max Maximum rim **&#x60;width&#x60;** value.  If set, **&#x60;rim_width&#x60;** value should be empty and **&#x60;rim_width_min&#x60;** should be defined.  Value difference between **&#x60;rim_width_max&#x60;** and **&#x60;rim_width_min&#x60;** must be equal to or less than 2.0. (e.g. &#x60;8.0&#x60;) (optional)
     * @param  int $rim_offset Rim **&#x60;offset&#x60;** is a distance between wheel mounting surface where it is bolted to hub and the centerline of rim. You can use _**&#x60;GET /by_rim/of/&#x60;**_ to get a list of available *&#x60;value&#x60;* values. (e.g. &#x60;38&#x60;) (optional)
     * @param  int $rim_offset_min Minimum rim **&#x60;offset&#x60;** value.  If set, **&#x60;rim_offset&#x60;** value should be empty and **&#x60;rim_offset_max&#x60;** should be defined.  Value difference between **&#x60;rim_offset_max&#x60;** and **&#x60;rim_offset_min&#x60;** must be equal to or less than 50. (e.g. &#x60;33&#x60;) (optional)
     * @param  int $rim_offset_max Maximum rim **&#x60;offset&#x60;** value.  If set, **&#x60;rim_offset&#x60;** value should be empty and **&#x60;rim_offset_min&#x60;** should be defined.  Value difference between **&#x60;rim_offset_max&#x60;** and **&#x60;rim_offset_min&#x60;** must be equal to or less than 50. (e.g. &#x60;53&#x60;) (optional)
     * @param  float $cb Centre bore value, mm (e.g. &#x60;60&#x60;) (optional)
     * @param  float $cb_min Minimum **&#x60;centre bore&#x60;** value.  If set, **&#x60;cb&#x60;** value should be empty and **&#x60;cb_max&#x60;** should be defined.  Value difference between **&#x60;cb_max&#x60;** and **&#x60;cb_min&#x60;** must be equal to or less than 50. (e.g. &#x60;60&#x60;) (optional)
     * @param  float $cb_max Maximum **&#x60;centre bore&#x60;** value.  If set, **&#x60;cb&#x60;** value should be empty and **&#x60;cb_min&#x60;** should be defined.  Value difference between **&#x60;cb_max&#x60;** and **&#x60;cb_min&#x60;** must be equal to or less than 50. (e.g. &#x60;75&#x60;) (optional)
     * @param  string[] $region A **&#x60;Region&#x60;** is the region where the car was officially sold or is still being sold. You can use _**&#x60;GET /regions/&#x60;**_ to get a list of available *&#x60;slug&#x60;* values. (e.g. &#x60;usdm&#x60;) (optional)
     * @param  string $mode The **&#x60;Mode&#x60;** is used to set the search mode for data on the axes of wheelpairs. By default, the search uses the axles of the front and rear wheelset. **&#x60;Mode&#x60;** possible values: __*&#x60;both&#x60;*__, __*&#x60;front_only&#x60;*__ or __*&#x60;rear_only&#x60;*__. (e.g. &#x60;both&#x60;) (optional)
     * @param  int $configurator (optional)
     * @param  string $ordering Comma-separated list without spaces. Supported field names: *&#x60;make&#x60;*, *&#x60;model&#x60;*, *&#x60;trim&#x60;*, *&#x60;start_year&#x60;*, *&#x60;end_year&#x60;* (optional)
     * @param  int $limit (optional, default to 50)
     * @param  int $offset (optional, default to 0)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function searchByRimModificationsAsyncWithHttpInfo($make, $model, $bolt_pattern, $rim_diameter, $rim_width, $rim_width_min = null, $rim_width_max = null, $rim_offset = null, $rim_offset_min = null, $rim_offset_max = null, $cb = null, $cb_min = null, $cb_max = null, $region = null, $mode = null, $configurator = null, $ordering = null, $limit = '50', $offset = '0')
    {
        $returnType = '\WheelSizeApiClient\Model\SearchByRimModificationReportOutput';
        $request = $this->searchByRimModificationsRequest($make, $model, $bolt_pattern, $rim_diameter, $rim_width, $rim_width_min, $rim_width_max, $rim_offset, $rim_offset_min, $rim_offset_max, $cb, $cb_min, $cb_max, $region, $mode, $configurator, $ordering, $limit, $offset);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'searchByRimModifications'
     *
     * @param  string $make A car&#39;s **&#x60;Make&#x60;** is the brand of the vehicle. You can use _**&#x60;GET /makes/&#x60;**_ to get a list of available *&#x60;slug&#x60;* values. (e.g. &#x60;mitsubishi&#x60;) (required)
     * @param  string $model The particular **&#x60;Model&#x60;** of the brand. You can use _**&#x60;GET /models/&#x60;**_ to get a list of available *&#x60;slug&#x60;* values. (e.g. &#x60;outlander&#x60;) (required)
     * @param  string $bolt_pattern **&#x60;Bolt pattern&#x60;** is expressed as the number of lugs by the diameter of an imaginary circle formed by the centers of the wheel lugs. You can use _**&#x60;GET /by_rim/bp/&#x60;**_ to get a list of available *&#x60;value&#x60;* values. (e.g. &#x60;5x114.3&#x60;) (required)
     * @param  float $rim_diameter Rim **&#x60;diameter&#x60;** is the distance measured in inches across the face of the wheel, from bead seat to bead seat. You can use _**&#x60;GET /by_rim/rd/&#x60;**_ to get a list of available *&#x60;value&#x60;* values. (e.g. &#x60;19&#x60;) (required)
     * @param  float $rim_width Rim **&#x60;width&#x60;** is the distance measured in inches from bead seat to bead seat. You can use _**&#x60;GET /by_rim/rw/&#x60;**_ to get a list of available *&#x60;value&#x60;* values. (e.g. &#x60;7.5&#x60;) (required)
     * @param  float $rim_width_min Minimum rim **&#x60;width&#x60;** value.  If set, **&#x60;rim_width&#x60;** value should be empty and **&#x60;rim_width_max&#x60;** should be defined.  Value difference between **&#x60;rim_width_max&#x60;** and **&#x60;rim_width_min&#x60;** must be equal to or less than 2.0. (e.g. &#x60;7.0&#x60;) (optional)
     * @param  float $rim_width_max Maximum rim **&#x60;width&#x60;** value.  If set, **&#x60;rim_width&#x60;** value should be empty and **&#x60;rim_width_min&#x60;** should be defined.  Value difference between **&#x60;rim_width_max&#x60;** and **&#x60;rim_width_min&#x60;** must be equal to or less than 2.0. (e.g. &#x60;8.0&#x60;) (optional)
     * @param  int $rim_offset Rim **&#x60;offset&#x60;** is a distance between wheel mounting surface where it is bolted to hub and the centerline of rim. You can use _**&#x60;GET /by_rim/of/&#x60;**_ to get a list of available *&#x60;value&#x60;* values. (e.g. &#x60;38&#x60;) (optional)
     * @param  int $rim_offset_min Minimum rim **&#x60;offset&#x60;** value.  If set, **&#x60;rim_offset&#x60;** value should be empty and **&#x60;rim_offset_max&#x60;** should be defined.  Value difference between **&#x60;rim_offset_max&#x60;** and **&#x60;rim_offset_min&#x60;** must be equal to or less than 50. (e.g. &#x60;33&#x60;) (optional)
     * @param  int $rim_offset_max Maximum rim **&#x60;offset&#x60;** value.  If set, **&#x60;rim_offset&#x60;** value should be empty and **&#x60;rim_offset_min&#x60;** should be defined.  Value difference between **&#x60;rim_offset_max&#x60;** and **&#x60;rim_offset_min&#x60;** must be equal to or less than 50. (e.g. &#x60;53&#x60;) (optional)
     * @param  float $cb Centre bore value, mm (e.g. &#x60;60&#x60;) (optional)
     * @param  float $cb_min Minimum **&#x60;centre bore&#x60;** value.  If set, **&#x60;cb&#x60;** value should be empty and **&#x60;cb_max&#x60;** should be defined.  Value difference between **&#x60;cb_max&#x60;** and **&#x60;cb_min&#x60;** must be equal to or less than 50. (e.g. &#x60;60&#x60;) (optional)
     * @param  float $cb_max Maximum **&#x60;centre bore&#x60;** value.  If set, **&#x60;cb&#x60;** value should be empty and **&#x60;cb_min&#x60;** should be defined.  Value difference between **&#x60;cb_max&#x60;** and **&#x60;cb_min&#x60;** must be equal to or less than 50. (e.g. &#x60;75&#x60;) (optional)
     * @param  string[] $region A **&#x60;Region&#x60;** is the region where the car was officially sold or is still being sold. You can use _**&#x60;GET /regions/&#x60;**_ to get a list of available *&#x60;slug&#x60;* values. (e.g. &#x60;usdm&#x60;) (optional)
     * @param  string $mode The **&#x60;Mode&#x60;** is used to set the search mode for data on the axes of wheelpairs. By default, the search uses the axles of the front and rear wheelset. **&#x60;Mode&#x60;** possible values: __*&#x60;both&#x60;*__, __*&#x60;front_only&#x60;*__ or __*&#x60;rear_only&#x60;*__. (e.g. &#x60;both&#x60;) (optional)
     * @param  int $configurator (optional)
     * @param  string $ordering Comma-separated list without spaces. Supported field names: *&#x60;make&#x60;*, *&#x60;model&#x60;*, *&#x60;trim&#x60;*, *&#x60;start_year&#x60;*, *&#x60;end_year&#x60;* (optional)
     * @param  int $limit (optional, default to 50)
     * @param  int $offset (optional, default to 0)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function searchByRimModificationsRequest($make, $model, $bolt_pattern, $rim_diameter, $rim_width, $rim_width_min = null, $rim_width_max = null, $rim_offset = null, $rim_offset_min = null, $rim_offset_max = null, $cb = null, $cb_min = null, $cb_max = null, $region = null, $mode = null, $configurator = null, $ordering = null, $limit = '50', $offset = '0')
    {
        // verify the required parameter 'make' is set
        if ($make === null || (is_array($make) && count($make) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $make when calling searchByRimModifications'
            );
        }
        // verify the required parameter 'model' is set
        if ($model === null || (is_array($model) && count($model) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $model when calling searchByRimModifications'
            );
        }
        // verify the required parameter 'bolt_pattern' is set
        if ($bolt_pattern === null || (is_array($bolt_pattern) && count($bolt_pattern) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $bolt_pattern when calling searchByRimModifications'
            );
        }
        // verify the required parameter 'rim_diameter' is set
        if ($rim_diameter === null || (is_array($rim_diameter) && count($rim_diameter) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $rim_diameter when calling searchByRimModifications'
            );
        }
        // verify the required parameter 'rim_width' is set
        if ($rim_width === null || (is_array($rim_width) && count($rim_width) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $rim_width when calling searchByRimModifications'
            );
        }
        if ($ordering !== null && strlen($ordering) < 1) {
            throw new \InvalidArgumentException('invalid length for "$ordering" when calling SearchByRimApi.searchByRimModifications, must be bigger than or equal to 1.');
        }

        if ($limit !== null && $limit > 100) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling SearchByRimApi.searchByRimModifications, must be smaller than or equal to 100.');
        }
        if ($limit !== null && $limit < 0) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling SearchByRimApi.searchByRimModifications, must be bigger than or equal to 0.');
        }

        if ($offset !== null && $offset < 0) {
            throw new \InvalidArgumentException('invalid value for "$offset" when calling SearchByRimApi.searchByRimModifications, must be bigger than or equal to 0.');
        }


        $resourcePath = '/by_rim/search/modifications/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($make !== null) {
            $queryParams['make'] = ObjectSerializer::toQueryValue($make);
        }
        // query params
        if ($model !== null) {
            $queryParams['model'] = ObjectSerializer::toQueryValue($model);
        }
        // query params
        if ($bolt_pattern !== null) {
            $queryParams['bolt_pattern'] = ObjectSerializer::toQueryValue($bolt_pattern);
        }
        // query params
        if ($rim_diameter !== null) {
            $queryParams['rim_diameter'] = ObjectSerializer::toQueryValue($rim_diameter);
        }
        // query params
        if ($rim_width !== null) {
            $queryParams['rim_width'] = ObjectSerializer::toQueryValue($rim_width);
        }
        // query params
        if ($rim_width_min !== null) {
            $queryParams['rim_width_min'] = ObjectSerializer::toQueryValue($rim_width_min);
        }
        // query params
        if ($rim_width_max !== null) {
            $queryParams['rim_width_max'] = ObjectSerializer::toQueryValue($rim_width_max);
        }
        // query params
        if ($rim_offset !== null) {
            $queryParams['rim_offset'] = ObjectSerializer::toQueryValue($rim_offset);
        }
        // query params
        if ($rim_offset_min !== null) {
            $queryParams['rim_offset_min'] = ObjectSerializer::toQueryValue($rim_offset_min);
        }
        // query params
        if ($rim_offset_max !== null) {
            $queryParams['rim_offset_max'] = ObjectSerializer::toQueryValue($rim_offset_max);
        }
        // query params
        if ($cb !== null) {
            $queryParams['cb'] = ObjectSerializer::toQueryValue($cb);
        }
        // query params
        if ($cb_min !== null) {
            $queryParams['cb_min'] = ObjectSerializer::toQueryValue($cb_min);
        }
        // query params
        if ($cb_max !== null) {
            $queryParams['cb_max'] = ObjectSerializer::toQueryValue($cb_max);
        }
        // query params
        if (is_array($region)) {
            $queryParams['region'] = $region;
        } else
        if ($region !== null) {
            $queryParams['region'] = ObjectSerializer::toQueryValue($region);
        }
        // query params
        if ($mode !== null) {
            $queryParams['mode'] = ObjectSerializer::toQueryValue($mode);
        }
        // query params
        if ($configurator !== null) {
            $queryParams['configurator'] = ObjectSerializer::toQueryValue($configurator);
        }
        // query params
        if ($ordering !== null) {
            $queryParams['ordering'] = ObjectSerializer::toQueryValue($ordering);
        }
        // query params
        if ($limit !== null) {
            $queryParams['limit'] = ObjectSerializer::toQueryValue($limit);
        }
        // query params
        if ($offset !== null) {
            $queryParams['offset'] = ObjectSerializer::toQueryValue($offset);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('user_key');
        if ($apiKey !== null) {
            $queryParams['user_key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation widths
     *
     * List rim widths
     *
     * @param  float $rim_diameter Rim **&#x60;diameter&#x60;** is the distance measured in inches across the face of the wheel, from bead seat to bead seat. You can use _**&#x60;GET /by_rim/rd/&#x60;**_ to get a list of available *&#x60;value&#x60;* values. (e.g. &#x60;19&#x60;) (optional)
     * @param  string $bolt_pattern **&#x60;Bolt pattern&#x60;** is expressed as the number of lugs by the diameter of an imaginary circle formed by the centers of the wheel lugs. You can use _**&#x60;GET /by_rim/bp/&#x60;**_ to get a list of available *&#x60;value&#x60;* values. (e.g. &#x60;5x114.3&#x60;) (optional)
     * @param  string[] $region A **&#x60;Region&#x60;** is the region where the car was officially sold or is still being sold. You can use _**&#x60;GET /regions/&#x60;**_ to get a list of available *&#x60;slug&#x60;* values. (e.g. &#x60;usdm&#x60;) (optional)
     * @param  string $ordering Comma-separated list without spaces. Supported field names: *&#x60;value&#x60;* (optional)
     *
     * @throws \WheelSizeApiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \WheelSizeApiClient\Model\WidthReportOutput
     */
    public function widths($rim_diameter = null, $bolt_pattern = null, $region = null, $ordering = null)
    {
        list($response) = $this->widthsWithHttpInfo($rim_diameter, $bolt_pattern, $region, $ordering);
        return $response;
    }

    /**
     * Operation widthsWithHttpInfo
     *
     * List rim widths
     *
     * @param  float $rim_diameter Rim **&#x60;diameter&#x60;** is the distance measured in inches across the face of the wheel, from bead seat to bead seat. You can use _**&#x60;GET /by_rim/rd/&#x60;**_ to get a list of available *&#x60;value&#x60;* values. (e.g. &#x60;19&#x60;) (optional)
     * @param  string $bolt_pattern **&#x60;Bolt pattern&#x60;** is expressed as the number of lugs by the diameter of an imaginary circle formed by the centers of the wheel lugs. You can use _**&#x60;GET /by_rim/bp/&#x60;**_ to get a list of available *&#x60;value&#x60;* values. (e.g. &#x60;5x114.3&#x60;) (optional)
     * @param  string[] $region A **&#x60;Region&#x60;** is the region where the car was officially sold or is still being sold. You can use _**&#x60;GET /regions/&#x60;**_ to get a list of available *&#x60;slug&#x60;* values. (e.g. &#x60;usdm&#x60;) (optional)
     * @param  string $ordering Comma-separated list without spaces. Supported field names: *&#x60;value&#x60;* (optional)
     *
     * @throws \WheelSizeApiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \WheelSizeApiClient\Model\WidthReportOutput, HTTP status code, HTTP response headers (array of strings)
     */
    public function widthsWithHttpInfo($rim_diameter = null, $bolt_pattern = null, $region = null, $ordering = null)
    {
        $returnType = '\WheelSizeApiClient\Model\WidthReportOutput';
        $request = $this->widthsRequest($rim_diameter, $bolt_pattern, $region, $ordering);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WheelSizeApiClient\Model\WidthReportOutput',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation widthsAsync
     *
     * List rim widths
     *
     * @param  float $rim_diameter Rim **&#x60;diameter&#x60;** is the distance measured in inches across the face of the wheel, from bead seat to bead seat. You can use _**&#x60;GET /by_rim/rd/&#x60;**_ to get a list of available *&#x60;value&#x60;* values. (e.g. &#x60;19&#x60;) (optional)
     * @param  string $bolt_pattern **&#x60;Bolt pattern&#x60;** is expressed as the number of lugs by the diameter of an imaginary circle formed by the centers of the wheel lugs. You can use _**&#x60;GET /by_rim/bp/&#x60;**_ to get a list of available *&#x60;value&#x60;* values. (e.g. &#x60;5x114.3&#x60;) (optional)
     * @param  string[] $region A **&#x60;Region&#x60;** is the region where the car was officially sold or is still being sold. You can use _**&#x60;GET /regions/&#x60;**_ to get a list of available *&#x60;slug&#x60;* values. (e.g. &#x60;usdm&#x60;) (optional)
     * @param  string $ordering Comma-separated list without spaces. Supported field names: *&#x60;value&#x60;* (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function widthsAsync($rim_diameter = null, $bolt_pattern = null, $region = null, $ordering = null)
    {
        return $this->widthsAsyncWithHttpInfo($rim_diameter, $bolt_pattern, $region, $ordering)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation widthsAsyncWithHttpInfo
     *
     * List rim widths
     *
     * @param  float $rim_diameter Rim **&#x60;diameter&#x60;** is the distance measured in inches across the face of the wheel, from bead seat to bead seat. You can use _**&#x60;GET /by_rim/rd/&#x60;**_ to get a list of available *&#x60;value&#x60;* values. (e.g. &#x60;19&#x60;) (optional)
     * @param  string $bolt_pattern **&#x60;Bolt pattern&#x60;** is expressed as the number of lugs by the diameter of an imaginary circle formed by the centers of the wheel lugs. You can use _**&#x60;GET /by_rim/bp/&#x60;**_ to get a list of available *&#x60;value&#x60;* values. (e.g. &#x60;5x114.3&#x60;) (optional)
     * @param  string[] $region A **&#x60;Region&#x60;** is the region where the car was officially sold or is still being sold. You can use _**&#x60;GET /regions/&#x60;**_ to get a list of available *&#x60;slug&#x60;* values. (e.g. &#x60;usdm&#x60;) (optional)
     * @param  string $ordering Comma-separated list without spaces. Supported field names: *&#x60;value&#x60;* (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function widthsAsyncWithHttpInfo($rim_diameter = null, $bolt_pattern = null, $region = null, $ordering = null)
    {
        $returnType = '\WheelSizeApiClient\Model\WidthReportOutput';
        $request = $this->widthsRequest($rim_diameter, $bolt_pattern, $region, $ordering);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'widths'
     *
     * @param  float $rim_diameter Rim **&#x60;diameter&#x60;** is the distance measured in inches across the face of the wheel, from bead seat to bead seat. You can use _**&#x60;GET /by_rim/rd/&#x60;**_ to get a list of available *&#x60;value&#x60;* values. (e.g. &#x60;19&#x60;) (optional)
     * @param  string $bolt_pattern **&#x60;Bolt pattern&#x60;** is expressed as the number of lugs by the diameter of an imaginary circle formed by the centers of the wheel lugs. You can use _**&#x60;GET /by_rim/bp/&#x60;**_ to get a list of available *&#x60;value&#x60;* values. (e.g. &#x60;5x114.3&#x60;) (optional)
     * @param  string[] $region A **&#x60;Region&#x60;** is the region where the car was officially sold or is still being sold. You can use _**&#x60;GET /regions/&#x60;**_ to get a list of available *&#x60;slug&#x60;* values. (e.g. &#x60;usdm&#x60;) (optional)
     * @param  string $ordering Comma-separated list without spaces. Supported field names: *&#x60;value&#x60;* (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function widthsRequest($rim_diameter = null, $bolt_pattern = null, $region = null, $ordering = null)
    {
        if ($ordering !== null && strlen($ordering) < 1) {
            throw new \InvalidArgumentException('invalid length for "$ordering" when calling SearchByRimApi.widths, must be bigger than or equal to 1.');
        }


        $resourcePath = '/by_rim/rw/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($rim_diameter !== null) {
            $queryParams['rim_diameter'] = ObjectSerializer::toQueryValue($rim_diameter);
        }
        // query params
        if ($bolt_pattern !== null) {
            $queryParams['bolt_pattern'] = ObjectSerializer::toQueryValue($bolt_pattern);
        }
        // query params
        if (is_array($region)) {
            $queryParams['region'] = $region;
        } else
        if ($region !== null) {
            $queryParams['region'] = ObjectSerializer::toQueryValue($region);
        }
        // query params
        if ($ordering !== null) {
            $queryParams['ordering'] = ObjectSerializer::toQueryValue($ordering);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('user_key');
        if ($apiKey !== null) {
            $queryParams['user_key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
