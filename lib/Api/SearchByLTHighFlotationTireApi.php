<?php
/**
 * SearchByLTHighFlotationTireApi
 * PHP version 5
 *
 * @category Class
 * @package  WheelSizeApiClient
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Wheel Fitment API
 *
 * The Wheel Fitment API provides a programmatic gateway to the comprehensive database and services of www.wheel-size.com. This API is expertly designed to retrieve detailed information regarding the vehicle fitment database for rims and tires, encompassing both original equipment (OE) and  aftermarket fitments, along with plus/minus sizing fitment data. Our offerings are further diversified  by including a multitude of country-specific and language-specific options.  We take pride in the extensive coverage of our fitment data, which nearly spans 100% for vehicles manufactured since the year 2000. Moreover, to ensure the utmost accuracy and relevance of the information we provide, our fitment data is meticulously updated on a daily basis.
 *
 * OpenAPI spec version: v2
 * Contact: info@wheel-size.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.32
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace WheelSizeApiClient\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use WheelSizeApiClient\ApiException;
use WheelSizeApiClient\Configuration;
use WheelSizeApiClient\HeaderSelector;
use WheelSizeApiClient\ObjectSerializer;

/**
 * SearchByLTHighFlotationTireApi Class Doc Comment
 *
 * @category Class
 * @package  WheelSizeApiClient
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class SearchByLTHighFlotationTireApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation hfOverallDiameters
     *
     * List overall diameters
     *
     * @param  string[] $region A **&#x60;Region&#x60;** is the region where the car was officially sold or is still being sold. You can use _**&#x60;GET /regions/&#x60;**_ to get a list of available *&#x60;slug&#x60;* values. (e.g. &#x60;usdm&#x60;) (optional)
     * @param  string $ordering Comma-separated list without spaces. Supported field names: *&#x60;value&#x60;* (optional)
     *
     * @throws \WheelSizeApiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \WheelSizeApiClient\Model\OverallDiameterReportOutput
     */
    public function hfOverallDiameters($region = null, $ordering = null)
    {
        list($response) = $this->hfOverallDiametersWithHttpInfo($region, $ordering);
        return $response;
    }

    /**
     * Operation hfOverallDiametersWithHttpInfo
     *
     * List overall diameters
     *
     * @param  string[] $region A **&#x60;Region&#x60;** is the region where the car was officially sold or is still being sold. You can use _**&#x60;GET /regions/&#x60;**_ to get a list of available *&#x60;slug&#x60;* values. (e.g. &#x60;usdm&#x60;) (optional)
     * @param  string $ordering Comma-separated list without spaces. Supported field names: *&#x60;value&#x60;* (optional)
     *
     * @throws \WheelSizeApiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \WheelSizeApiClient\Model\OverallDiameterReportOutput, HTTP status code, HTTP response headers (array of strings)
     */
    public function hfOverallDiametersWithHttpInfo($region = null, $ordering = null)
    {
        $returnType = '\WheelSizeApiClient\Model\OverallDiameterReportOutput';
        $request = $this->hfOverallDiametersRequest($region, $ordering);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WheelSizeApiClient\Model\OverallDiameterReportOutput',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation hfOverallDiametersAsync
     *
     * List overall diameters
     *
     * @param  string[] $region A **&#x60;Region&#x60;** is the region where the car was officially sold or is still being sold. You can use _**&#x60;GET /regions/&#x60;**_ to get a list of available *&#x60;slug&#x60;* values. (e.g. &#x60;usdm&#x60;) (optional)
     * @param  string $ordering Comma-separated list without spaces. Supported field names: *&#x60;value&#x60;* (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function hfOverallDiametersAsync($region = null, $ordering = null)
    {
        return $this->hfOverallDiametersAsyncWithHttpInfo($region, $ordering)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation hfOverallDiametersAsyncWithHttpInfo
     *
     * List overall diameters
     *
     * @param  string[] $region A **&#x60;Region&#x60;** is the region where the car was officially sold or is still being sold. You can use _**&#x60;GET /regions/&#x60;**_ to get a list of available *&#x60;slug&#x60;* values. (e.g. &#x60;usdm&#x60;) (optional)
     * @param  string $ordering Comma-separated list without spaces. Supported field names: *&#x60;value&#x60;* (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function hfOverallDiametersAsyncWithHttpInfo($region = null, $ordering = null)
    {
        $returnType = '\WheelSizeApiClient\Model\OverallDiameterReportOutput';
        $request = $this->hfOverallDiametersRequest($region, $ordering);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'hfOverallDiameters'
     *
     * @param  string[] $region A **&#x60;Region&#x60;** is the region where the car was officially sold or is still being sold. You can use _**&#x60;GET /regions/&#x60;**_ to get a list of available *&#x60;slug&#x60;* values. (e.g. &#x60;usdm&#x60;) (optional)
     * @param  string $ordering Comma-separated list without spaces. Supported field names: *&#x60;value&#x60;* (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function hfOverallDiametersRequest($region = null, $ordering = null)
    {
        if ($ordering !== null && strlen($ordering) < 1) {
            throw new \InvalidArgumentException('invalid length for "$ordering" when calling SearchByLTHighFlotationTireApi.hfOverallDiameters, must be bigger than or equal to 1.');
        }


        $resourcePath = '/by_hf_tire/od/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($region)) {
            $queryParams['region'] = $region;
        } else
        if ($region !== null) {
            $queryParams['region'] = ObjectSerializer::toQueryValue($region);
        }
        // query params
        if ($ordering !== null) {
            $queryParams['ordering'] = ObjectSerializer::toQueryValue($ordering);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('user_key');
        if ($apiKey !== null) {
            $queryParams['user_key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation hfRimDiameters
     *
     * List rim diameters
     *
     * @param  float $overall_diameter **&#x60;Overall diameter&#x60;** is the diameter of the inflated tire without any load, inches. You can use _**&#x60;GET /by_hf_tire/od/&#x60;**_ to get a list of available *&#x60;value&#x60;* values. (e.g. &#x60;37&#x60;) (optional)
     * @param  float $section_width **&#x60;Section width&#x60;** is the width of the tire in inches. You can use _**&#x60;GET /by_hf_tire/sw/&#x60;**_ to get a list of available *&#x60;value&#x60;* values. (e.g. &#x60;12.5&#x60;) (optional)
     * @param  string[] $region A **&#x60;Region&#x60;** is the region where the car was officially sold or is still being sold. You can use _**&#x60;GET /regions/&#x60;**_ to get a list of available *&#x60;slug&#x60;* values. (e.g. &#x60;usdm&#x60;) (optional)
     * @param  string $ordering Comma-separated list without spaces. Supported field names: *&#x60;value&#x60;* (optional)
     *
     * @throws \WheelSizeApiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \WheelSizeApiClient\Model\RimDiameterReportOutput
     */
    public function hfRimDiameters($overall_diameter = null, $section_width = null, $region = null, $ordering = null)
    {
        list($response) = $this->hfRimDiametersWithHttpInfo($overall_diameter, $section_width, $region, $ordering);
        return $response;
    }

    /**
     * Operation hfRimDiametersWithHttpInfo
     *
     * List rim diameters
     *
     * @param  float $overall_diameter **&#x60;Overall diameter&#x60;** is the diameter of the inflated tire without any load, inches. You can use _**&#x60;GET /by_hf_tire/od/&#x60;**_ to get a list of available *&#x60;value&#x60;* values. (e.g. &#x60;37&#x60;) (optional)
     * @param  float $section_width **&#x60;Section width&#x60;** is the width of the tire in inches. You can use _**&#x60;GET /by_hf_tire/sw/&#x60;**_ to get a list of available *&#x60;value&#x60;* values. (e.g. &#x60;12.5&#x60;) (optional)
     * @param  string[] $region A **&#x60;Region&#x60;** is the region where the car was officially sold or is still being sold. You can use _**&#x60;GET /regions/&#x60;**_ to get a list of available *&#x60;slug&#x60;* values. (e.g. &#x60;usdm&#x60;) (optional)
     * @param  string $ordering Comma-separated list without spaces. Supported field names: *&#x60;value&#x60;* (optional)
     *
     * @throws \WheelSizeApiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \WheelSizeApiClient\Model\RimDiameterReportOutput, HTTP status code, HTTP response headers (array of strings)
     */
    public function hfRimDiametersWithHttpInfo($overall_diameter = null, $section_width = null, $region = null, $ordering = null)
    {
        $returnType = '\WheelSizeApiClient\Model\RimDiameterReportOutput';
        $request = $this->hfRimDiametersRequest($overall_diameter, $section_width, $region, $ordering);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WheelSizeApiClient\Model\RimDiameterReportOutput',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation hfRimDiametersAsync
     *
     * List rim diameters
     *
     * @param  float $overall_diameter **&#x60;Overall diameter&#x60;** is the diameter of the inflated tire without any load, inches. You can use _**&#x60;GET /by_hf_tire/od/&#x60;**_ to get a list of available *&#x60;value&#x60;* values. (e.g. &#x60;37&#x60;) (optional)
     * @param  float $section_width **&#x60;Section width&#x60;** is the width of the tire in inches. You can use _**&#x60;GET /by_hf_tire/sw/&#x60;**_ to get a list of available *&#x60;value&#x60;* values. (e.g. &#x60;12.5&#x60;) (optional)
     * @param  string[] $region A **&#x60;Region&#x60;** is the region where the car was officially sold or is still being sold. You can use _**&#x60;GET /regions/&#x60;**_ to get a list of available *&#x60;slug&#x60;* values. (e.g. &#x60;usdm&#x60;) (optional)
     * @param  string $ordering Comma-separated list without spaces. Supported field names: *&#x60;value&#x60;* (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function hfRimDiametersAsync($overall_diameter = null, $section_width = null, $region = null, $ordering = null)
    {
        return $this->hfRimDiametersAsyncWithHttpInfo($overall_diameter, $section_width, $region, $ordering)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation hfRimDiametersAsyncWithHttpInfo
     *
     * List rim diameters
     *
     * @param  float $overall_diameter **&#x60;Overall diameter&#x60;** is the diameter of the inflated tire without any load, inches. You can use _**&#x60;GET /by_hf_tire/od/&#x60;**_ to get a list of available *&#x60;value&#x60;* values. (e.g. &#x60;37&#x60;) (optional)
     * @param  float $section_width **&#x60;Section width&#x60;** is the width of the tire in inches. You can use _**&#x60;GET /by_hf_tire/sw/&#x60;**_ to get a list of available *&#x60;value&#x60;* values. (e.g. &#x60;12.5&#x60;) (optional)
     * @param  string[] $region A **&#x60;Region&#x60;** is the region where the car was officially sold or is still being sold. You can use _**&#x60;GET /regions/&#x60;**_ to get a list of available *&#x60;slug&#x60;* values. (e.g. &#x60;usdm&#x60;) (optional)
     * @param  string $ordering Comma-separated list without spaces. Supported field names: *&#x60;value&#x60;* (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function hfRimDiametersAsyncWithHttpInfo($overall_diameter = null, $section_width = null, $region = null, $ordering = null)
    {
        $returnType = '\WheelSizeApiClient\Model\RimDiameterReportOutput';
        $request = $this->hfRimDiametersRequest($overall_diameter, $section_width, $region, $ordering);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'hfRimDiameters'
     *
     * @param  float $overall_diameter **&#x60;Overall diameter&#x60;** is the diameter of the inflated tire without any load, inches. You can use _**&#x60;GET /by_hf_tire/od/&#x60;**_ to get a list of available *&#x60;value&#x60;* values. (e.g. &#x60;37&#x60;) (optional)
     * @param  float $section_width **&#x60;Section width&#x60;** is the width of the tire in inches. You can use _**&#x60;GET /by_hf_tire/sw/&#x60;**_ to get a list of available *&#x60;value&#x60;* values. (e.g. &#x60;12.5&#x60;) (optional)
     * @param  string[] $region A **&#x60;Region&#x60;** is the region where the car was officially sold or is still being sold. You can use _**&#x60;GET /regions/&#x60;**_ to get a list of available *&#x60;slug&#x60;* values. (e.g. &#x60;usdm&#x60;) (optional)
     * @param  string $ordering Comma-separated list without spaces. Supported field names: *&#x60;value&#x60;* (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function hfRimDiametersRequest($overall_diameter = null, $section_width = null, $region = null, $ordering = null)
    {
        if ($ordering !== null && strlen($ordering) < 1) {
            throw new \InvalidArgumentException('invalid length for "$ordering" when calling SearchByLTHighFlotationTireApi.hfRimDiameters, must be bigger than or equal to 1.');
        }


        $resourcePath = '/by_hf_tire/rd/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($overall_diameter !== null) {
            $queryParams['overall_diameter'] = ObjectSerializer::toQueryValue($overall_diameter);
        }
        // query params
        if ($section_width !== null) {
            $queryParams['section_width'] = ObjectSerializer::toQueryValue($section_width);
        }
        // query params
        if (is_array($region)) {
            $queryParams['region'] = $region;
        } else
        if ($region !== null) {
            $queryParams['region'] = ObjectSerializer::toQueryValue($region);
        }
        // query params
        if ($ordering !== null) {
            $queryParams['ordering'] = ObjectSerializer::toQueryValue($ordering);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('user_key');
        if ($apiKey !== null) {
            $queryParams['user_key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation hfSearchByTire
     *
     * Search by LT High Flotation Tire
     *
     * @param  float $overall_diameter **&#x60;Overall diameter&#x60;** is the diameter of the inflated tire without any load, inches. You can use _**&#x60;GET /by_hf_tire/od/&#x60;**_ to get a list of available *&#x60;value&#x60;* values. (e.g. &#x60;37&#x60;) (required)
     * @param  float $section_width **&#x60;Section width&#x60;** is the width of the tire in inches. You can use _**&#x60;GET /by_hf_tire/sw/&#x60;**_ to get a list of available *&#x60;value&#x60;* values. (e.g. &#x60;12.5&#x60;) (required)
     * @param  float $rim_diameter Rim **&#x60;diameter&#x60;** is the distance measured in inches across the face of the wheel, from bead seat to bead seat. You can use _**&#x60;GET /by_hf_tire/rd/&#x60;**_ to get a list of available *&#x60;value&#x60;* values. (e.g. &#x60;16.5&#x60;) (required)
     * @param  string $mode The **&#x60;Mode&#x60;** is used to set the search mode for data on the axes of wheelpairs. By default, the search uses the axles of the front and rear wheelset. **&#x60;Mode&#x60;** possible values: __*&#x60;both&#x60;*__, __*&#x60;front_only&#x60;*__ or __*&#x60;rear_only&#x60;*__. (e.g. &#x60;both&#x60;) (optional)
     * @param  string[] $region A **&#x60;Region&#x60;** is the region where the car was officially sold or is still being sold. You can use _**&#x60;GET /regions/&#x60;**_ to get a list of available *&#x60;slug&#x60;* values. (e.g. &#x60;usdm&#x60;) (optional)
     * @param  string $ordering Comma-separated list without spaces. Supported field names: *&#x60;make&#x60;*, *&#x60;model&#x60;* (optional)
     *
     * @throws \WheelSizeApiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \WheelSizeApiClient\Model\SearchByHFTireCarReportOutput
     */
    public function hfSearchByTire($overall_diameter, $section_width, $rim_diameter, $mode = null, $region = null, $ordering = null)
    {
        list($response) = $this->hfSearchByTireWithHttpInfo($overall_diameter, $section_width, $rim_diameter, $mode, $region, $ordering);
        return $response;
    }

    /**
     * Operation hfSearchByTireWithHttpInfo
     *
     * Search by LT High Flotation Tire
     *
     * @param  float $overall_diameter **&#x60;Overall diameter&#x60;** is the diameter of the inflated tire without any load, inches. You can use _**&#x60;GET /by_hf_tire/od/&#x60;**_ to get a list of available *&#x60;value&#x60;* values. (e.g. &#x60;37&#x60;) (required)
     * @param  float $section_width **&#x60;Section width&#x60;** is the width of the tire in inches. You can use _**&#x60;GET /by_hf_tire/sw/&#x60;**_ to get a list of available *&#x60;value&#x60;* values. (e.g. &#x60;12.5&#x60;) (required)
     * @param  float $rim_diameter Rim **&#x60;diameter&#x60;** is the distance measured in inches across the face of the wheel, from bead seat to bead seat. You can use _**&#x60;GET /by_hf_tire/rd/&#x60;**_ to get a list of available *&#x60;value&#x60;* values. (e.g. &#x60;16.5&#x60;) (required)
     * @param  string $mode The **&#x60;Mode&#x60;** is used to set the search mode for data on the axes of wheelpairs. By default, the search uses the axles of the front and rear wheelset. **&#x60;Mode&#x60;** possible values: __*&#x60;both&#x60;*__, __*&#x60;front_only&#x60;*__ or __*&#x60;rear_only&#x60;*__. (e.g. &#x60;both&#x60;) (optional)
     * @param  string[] $region A **&#x60;Region&#x60;** is the region where the car was officially sold or is still being sold. You can use _**&#x60;GET /regions/&#x60;**_ to get a list of available *&#x60;slug&#x60;* values. (e.g. &#x60;usdm&#x60;) (optional)
     * @param  string $ordering Comma-separated list without spaces. Supported field names: *&#x60;make&#x60;*, *&#x60;model&#x60;* (optional)
     *
     * @throws \WheelSizeApiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \WheelSizeApiClient\Model\SearchByHFTireCarReportOutput, HTTP status code, HTTP response headers (array of strings)
     */
    public function hfSearchByTireWithHttpInfo($overall_diameter, $section_width, $rim_diameter, $mode = null, $region = null, $ordering = null)
    {
        $returnType = '\WheelSizeApiClient\Model\SearchByHFTireCarReportOutput';
        $request = $this->hfSearchByTireRequest($overall_diameter, $section_width, $rim_diameter, $mode, $region, $ordering);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WheelSizeApiClient\Model\SearchByHFTireCarReportOutput',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation hfSearchByTireAsync
     *
     * Search by LT High Flotation Tire
     *
     * @param  float $overall_diameter **&#x60;Overall diameter&#x60;** is the diameter of the inflated tire without any load, inches. You can use _**&#x60;GET /by_hf_tire/od/&#x60;**_ to get a list of available *&#x60;value&#x60;* values. (e.g. &#x60;37&#x60;) (required)
     * @param  float $section_width **&#x60;Section width&#x60;** is the width of the tire in inches. You can use _**&#x60;GET /by_hf_tire/sw/&#x60;**_ to get a list of available *&#x60;value&#x60;* values. (e.g. &#x60;12.5&#x60;) (required)
     * @param  float $rim_diameter Rim **&#x60;diameter&#x60;** is the distance measured in inches across the face of the wheel, from bead seat to bead seat. You can use _**&#x60;GET /by_hf_tire/rd/&#x60;**_ to get a list of available *&#x60;value&#x60;* values. (e.g. &#x60;16.5&#x60;) (required)
     * @param  string $mode The **&#x60;Mode&#x60;** is used to set the search mode for data on the axes of wheelpairs. By default, the search uses the axles of the front and rear wheelset. **&#x60;Mode&#x60;** possible values: __*&#x60;both&#x60;*__, __*&#x60;front_only&#x60;*__ or __*&#x60;rear_only&#x60;*__. (e.g. &#x60;both&#x60;) (optional)
     * @param  string[] $region A **&#x60;Region&#x60;** is the region where the car was officially sold or is still being sold. You can use _**&#x60;GET /regions/&#x60;**_ to get a list of available *&#x60;slug&#x60;* values. (e.g. &#x60;usdm&#x60;) (optional)
     * @param  string $ordering Comma-separated list without spaces. Supported field names: *&#x60;make&#x60;*, *&#x60;model&#x60;* (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function hfSearchByTireAsync($overall_diameter, $section_width, $rim_diameter, $mode = null, $region = null, $ordering = null)
    {
        return $this->hfSearchByTireAsyncWithHttpInfo($overall_diameter, $section_width, $rim_diameter, $mode, $region, $ordering)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation hfSearchByTireAsyncWithHttpInfo
     *
     * Search by LT High Flotation Tire
     *
     * @param  float $overall_diameter **&#x60;Overall diameter&#x60;** is the diameter of the inflated tire without any load, inches. You can use _**&#x60;GET /by_hf_tire/od/&#x60;**_ to get a list of available *&#x60;value&#x60;* values. (e.g. &#x60;37&#x60;) (required)
     * @param  float $section_width **&#x60;Section width&#x60;** is the width of the tire in inches. You can use _**&#x60;GET /by_hf_tire/sw/&#x60;**_ to get a list of available *&#x60;value&#x60;* values. (e.g. &#x60;12.5&#x60;) (required)
     * @param  float $rim_diameter Rim **&#x60;diameter&#x60;** is the distance measured in inches across the face of the wheel, from bead seat to bead seat. You can use _**&#x60;GET /by_hf_tire/rd/&#x60;**_ to get a list of available *&#x60;value&#x60;* values. (e.g. &#x60;16.5&#x60;) (required)
     * @param  string $mode The **&#x60;Mode&#x60;** is used to set the search mode for data on the axes of wheelpairs. By default, the search uses the axles of the front and rear wheelset. **&#x60;Mode&#x60;** possible values: __*&#x60;both&#x60;*__, __*&#x60;front_only&#x60;*__ or __*&#x60;rear_only&#x60;*__. (e.g. &#x60;both&#x60;) (optional)
     * @param  string[] $region A **&#x60;Region&#x60;** is the region where the car was officially sold or is still being sold. You can use _**&#x60;GET /regions/&#x60;**_ to get a list of available *&#x60;slug&#x60;* values. (e.g. &#x60;usdm&#x60;) (optional)
     * @param  string $ordering Comma-separated list without spaces. Supported field names: *&#x60;make&#x60;*, *&#x60;model&#x60;* (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function hfSearchByTireAsyncWithHttpInfo($overall_diameter, $section_width, $rim_diameter, $mode = null, $region = null, $ordering = null)
    {
        $returnType = '\WheelSizeApiClient\Model\SearchByHFTireCarReportOutput';
        $request = $this->hfSearchByTireRequest($overall_diameter, $section_width, $rim_diameter, $mode, $region, $ordering);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'hfSearchByTire'
     *
     * @param  float $overall_diameter **&#x60;Overall diameter&#x60;** is the diameter of the inflated tire without any load, inches. You can use _**&#x60;GET /by_hf_tire/od/&#x60;**_ to get a list of available *&#x60;value&#x60;* values. (e.g. &#x60;37&#x60;) (required)
     * @param  float $section_width **&#x60;Section width&#x60;** is the width of the tire in inches. You can use _**&#x60;GET /by_hf_tire/sw/&#x60;**_ to get a list of available *&#x60;value&#x60;* values. (e.g. &#x60;12.5&#x60;) (required)
     * @param  float $rim_diameter Rim **&#x60;diameter&#x60;** is the distance measured in inches across the face of the wheel, from bead seat to bead seat. You can use _**&#x60;GET /by_hf_tire/rd/&#x60;**_ to get a list of available *&#x60;value&#x60;* values. (e.g. &#x60;16.5&#x60;) (required)
     * @param  string $mode The **&#x60;Mode&#x60;** is used to set the search mode for data on the axes of wheelpairs. By default, the search uses the axles of the front and rear wheelset. **&#x60;Mode&#x60;** possible values: __*&#x60;both&#x60;*__, __*&#x60;front_only&#x60;*__ or __*&#x60;rear_only&#x60;*__. (e.g. &#x60;both&#x60;) (optional)
     * @param  string[] $region A **&#x60;Region&#x60;** is the region where the car was officially sold or is still being sold. You can use _**&#x60;GET /regions/&#x60;**_ to get a list of available *&#x60;slug&#x60;* values. (e.g. &#x60;usdm&#x60;) (optional)
     * @param  string $ordering Comma-separated list without spaces. Supported field names: *&#x60;make&#x60;*, *&#x60;model&#x60;* (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function hfSearchByTireRequest($overall_diameter, $section_width, $rim_diameter, $mode = null, $region = null, $ordering = null)
    {
        // verify the required parameter 'overall_diameter' is set
        if ($overall_diameter === null || (is_array($overall_diameter) && count($overall_diameter) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $overall_diameter when calling hfSearchByTire'
            );
        }
        // verify the required parameter 'section_width' is set
        if ($section_width === null || (is_array($section_width) && count($section_width) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $section_width when calling hfSearchByTire'
            );
        }
        // verify the required parameter 'rim_diameter' is set
        if ($rim_diameter === null || (is_array($rim_diameter) && count($rim_diameter) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $rim_diameter when calling hfSearchByTire'
            );
        }
        if ($ordering !== null && strlen($ordering) < 1) {
            throw new \InvalidArgumentException('invalid length for "$ordering" when calling SearchByLTHighFlotationTireApi.hfSearchByTire, must be bigger than or equal to 1.');
        }


        $resourcePath = '/by_hf_tire/search/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($overall_diameter !== null) {
            $queryParams['overall_diameter'] = ObjectSerializer::toQueryValue($overall_diameter);
        }
        // query params
        if ($section_width !== null) {
            $queryParams['section_width'] = ObjectSerializer::toQueryValue($section_width);
        }
        // query params
        if ($rim_diameter !== null) {
            $queryParams['rim_diameter'] = ObjectSerializer::toQueryValue($rim_diameter);
        }
        // query params
        if ($mode !== null) {
            $queryParams['mode'] = ObjectSerializer::toQueryValue($mode);
        }
        // query params
        if (is_array($region)) {
            $queryParams['region'] = $region;
        } else
        if ($region !== null) {
            $queryParams['region'] = ObjectSerializer::toQueryValue($region);
        }
        // query params
        if ($ordering !== null) {
            $queryParams['ordering'] = ObjectSerializer::toQueryValue($ordering);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('user_key');
        if ($apiKey !== null) {
            $queryParams['user_key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation hfSearchByTireModifications
     *
     * Search by LT High Flotation Tire
     *
     * @param  float $overall_diameter **&#x60;Overall diameter&#x60;** is the diameter of the inflated tire without any load, inches. You can use _**&#x60;GET /by_hf_tire/od/&#x60;**_ to get a list of available *&#x60;value&#x60;* values. (e.g. &#x60;37&#x60;) (required)
     * @param  float $section_width **&#x60;Section width&#x60;** is the width of the tire in inches. You can use _**&#x60;GET /by_hf_tire/sw/&#x60;**_ to get a list of available *&#x60;value&#x60;* values. (e.g. &#x60;12.5&#x60;) (required)
     * @param  float $rim_diameter Rim **&#x60;diameter&#x60;** is the distance measured in inches across the face of the wheel, from bead seat to bead seat. You can use _**&#x60;GET /by_hf_tire/rd/&#x60;**_ to get a list of available *&#x60;value&#x60;* values. (e.g. &#x60;16.5&#x60;) (required)
     * @param  string $make A car&#39;s **&#x60;Make&#x60;** is the brand of the vehicle. You can use _**&#x60;GET /makes/&#x60;**_ to get a list of available *&#x60;slug&#x60;* values. (e.g. &#x60;hummer&#x60;) (required)
     * @param  string $model The particular **&#x60;Model&#x60;** of the brand. You can use _**&#x60;GET /models/&#x60;**_ to get a list of available *&#x60;slug&#x60;* values. (e.g. &#x60;h1&#x60;) (required)
     * @param  string $mode The **&#x60;Mode&#x60;** is used to set the search mode for data on the axes of wheelpairs. By default, the search uses the axles of the front and rear wheelset. **&#x60;Mode&#x60;** possible values: __*&#x60;both&#x60;*__, __*&#x60;front_only&#x60;*__ or __*&#x60;rear_only&#x60;*__. (e.g. &#x60;both&#x60;) (optional)
     * @param  string[] $region A **&#x60;Region&#x60;** is the region where the car was officially sold or is still being sold. You can use _**&#x60;GET /regions/&#x60;**_ to get a list of available *&#x60;slug&#x60;* values. (e.g. &#x60;usdm&#x60;) (optional)
     * @param  string $ordering Comma-separated list without spaces. Supported field names: *&#x60;make&#x60;*, *&#x60;model&#x60;*, *&#x60;trim&#x60;*, *&#x60;start_year&#x60;*, *&#x60;end_year&#x60;* (optional)
     * @param  int $limit limit (optional, default to 50)
     * @param  int $offset offset (optional, default to 0)
     *
     * @throws \WheelSizeApiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \WheelSizeApiClient\Model\SearchByHFTireModificationReportOutput
     */
    public function hfSearchByTireModifications($overall_diameter, $section_width, $rim_diameter, $make, $model, $mode = null, $region = null, $ordering = null, $limit = '50', $offset = '0')
    {
        list($response) = $this->hfSearchByTireModificationsWithHttpInfo($overall_diameter, $section_width, $rim_diameter, $make, $model, $mode, $region, $ordering, $limit, $offset);
        return $response;
    }

    /**
     * Operation hfSearchByTireModificationsWithHttpInfo
     *
     * Search by LT High Flotation Tire
     *
     * @param  float $overall_diameter **&#x60;Overall diameter&#x60;** is the diameter of the inflated tire without any load, inches. You can use _**&#x60;GET /by_hf_tire/od/&#x60;**_ to get a list of available *&#x60;value&#x60;* values. (e.g. &#x60;37&#x60;) (required)
     * @param  float $section_width **&#x60;Section width&#x60;** is the width of the tire in inches. You can use _**&#x60;GET /by_hf_tire/sw/&#x60;**_ to get a list of available *&#x60;value&#x60;* values. (e.g. &#x60;12.5&#x60;) (required)
     * @param  float $rim_diameter Rim **&#x60;diameter&#x60;** is the distance measured in inches across the face of the wheel, from bead seat to bead seat. You can use _**&#x60;GET /by_hf_tire/rd/&#x60;**_ to get a list of available *&#x60;value&#x60;* values. (e.g. &#x60;16.5&#x60;) (required)
     * @param  string $make A car&#39;s **&#x60;Make&#x60;** is the brand of the vehicle. You can use _**&#x60;GET /makes/&#x60;**_ to get a list of available *&#x60;slug&#x60;* values. (e.g. &#x60;hummer&#x60;) (required)
     * @param  string $model The particular **&#x60;Model&#x60;** of the brand. You can use _**&#x60;GET /models/&#x60;**_ to get a list of available *&#x60;slug&#x60;* values. (e.g. &#x60;h1&#x60;) (required)
     * @param  string $mode The **&#x60;Mode&#x60;** is used to set the search mode for data on the axes of wheelpairs. By default, the search uses the axles of the front and rear wheelset. **&#x60;Mode&#x60;** possible values: __*&#x60;both&#x60;*__, __*&#x60;front_only&#x60;*__ or __*&#x60;rear_only&#x60;*__. (e.g. &#x60;both&#x60;) (optional)
     * @param  string[] $region A **&#x60;Region&#x60;** is the region where the car was officially sold or is still being sold. You can use _**&#x60;GET /regions/&#x60;**_ to get a list of available *&#x60;slug&#x60;* values. (e.g. &#x60;usdm&#x60;) (optional)
     * @param  string $ordering Comma-separated list without spaces. Supported field names: *&#x60;make&#x60;*, *&#x60;model&#x60;*, *&#x60;trim&#x60;*, *&#x60;start_year&#x60;*, *&#x60;end_year&#x60;* (optional)
     * @param  int $limit (optional, default to 50)
     * @param  int $offset (optional, default to 0)
     *
     * @throws \WheelSizeApiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \WheelSizeApiClient\Model\SearchByHFTireModificationReportOutput, HTTP status code, HTTP response headers (array of strings)
     */
    public function hfSearchByTireModificationsWithHttpInfo($overall_diameter, $section_width, $rim_diameter, $make, $model, $mode = null, $region = null, $ordering = null, $limit = '50', $offset = '0')
    {
        $returnType = '\WheelSizeApiClient\Model\SearchByHFTireModificationReportOutput';
        $request = $this->hfSearchByTireModificationsRequest($overall_diameter, $section_width, $rim_diameter, $make, $model, $mode, $region, $ordering, $limit, $offset);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WheelSizeApiClient\Model\SearchByHFTireModificationReportOutput',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation hfSearchByTireModificationsAsync
     *
     * Search by LT High Flotation Tire
     *
     * @param  float $overall_diameter **&#x60;Overall diameter&#x60;** is the diameter of the inflated tire without any load, inches. You can use _**&#x60;GET /by_hf_tire/od/&#x60;**_ to get a list of available *&#x60;value&#x60;* values. (e.g. &#x60;37&#x60;) (required)
     * @param  float $section_width **&#x60;Section width&#x60;** is the width of the tire in inches. You can use _**&#x60;GET /by_hf_tire/sw/&#x60;**_ to get a list of available *&#x60;value&#x60;* values. (e.g. &#x60;12.5&#x60;) (required)
     * @param  float $rim_diameter Rim **&#x60;diameter&#x60;** is the distance measured in inches across the face of the wheel, from bead seat to bead seat. You can use _**&#x60;GET /by_hf_tire/rd/&#x60;**_ to get a list of available *&#x60;value&#x60;* values. (e.g. &#x60;16.5&#x60;) (required)
     * @param  string $make A car&#39;s **&#x60;Make&#x60;** is the brand of the vehicle. You can use _**&#x60;GET /makes/&#x60;**_ to get a list of available *&#x60;slug&#x60;* values. (e.g. &#x60;hummer&#x60;) (required)
     * @param  string $model The particular **&#x60;Model&#x60;** of the brand. You can use _**&#x60;GET /models/&#x60;**_ to get a list of available *&#x60;slug&#x60;* values. (e.g. &#x60;h1&#x60;) (required)
     * @param  string $mode The **&#x60;Mode&#x60;** is used to set the search mode for data on the axes of wheelpairs. By default, the search uses the axles of the front and rear wheelset. **&#x60;Mode&#x60;** possible values: __*&#x60;both&#x60;*__, __*&#x60;front_only&#x60;*__ or __*&#x60;rear_only&#x60;*__. (e.g. &#x60;both&#x60;) (optional)
     * @param  string[] $region A **&#x60;Region&#x60;** is the region where the car was officially sold or is still being sold. You can use _**&#x60;GET /regions/&#x60;**_ to get a list of available *&#x60;slug&#x60;* values. (e.g. &#x60;usdm&#x60;) (optional)
     * @param  string $ordering Comma-separated list without spaces. Supported field names: *&#x60;make&#x60;*, *&#x60;model&#x60;*, *&#x60;trim&#x60;*, *&#x60;start_year&#x60;*, *&#x60;end_year&#x60;* (optional)
     * @param  int $limit (optional, default to 50)
     * @param  int $offset (optional, default to 0)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function hfSearchByTireModificationsAsync($overall_diameter, $section_width, $rim_diameter, $make, $model, $mode = null, $region = null, $ordering = null, $limit = '50', $offset = '0')
    {
        return $this->hfSearchByTireModificationsAsyncWithHttpInfo($overall_diameter, $section_width, $rim_diameter, $make, $model, $mode, $region, $ordering, $limit, $offset)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation hfSearchByTireModificationsAsyncWithHttpInfo
     *
     * Search by LT High Flotation Tire
     *
     * @param  float $overall_diameter **&#x60;Overall diameter&#x60;** is the diameter of the inflated tire without any load, inches. You can use _**&#x60;GET /by_hf_tire/od/&#x60;**_ to get a list of available *&#x60;value&#x60;* values. (e.g. &#x60;37&#x60;) (required)
     * @param  float $section_width **&#x60;Section width&#x60;** is the width of the tire in inches. You can use _**&#x60;GET /by_hf_tire/sw/&#x60;**_ to get a list of available *&#x60;value&#x60;* values. (e.g. &#x60;12.5&#x60;) (required)
     * @param  float $rim_diameter Rim **&#x60;diameter&#x60;** is the distance measured in inches across the face of the wheel, from bead seat to bead seat. You can use _**&#x60;GET /by_hf_tire/rd/&#x60;**_ to get a list of available *&#x60;value&#x60;* values. (e.g. &#x60;16.5&#x60;) (required)
     * @param  string $make A car&#39;s **&#x60;Make&#x60;** is the brand of the vehicle. You can use _**&#x60;GET /makes/&#x60;**_ to get a list of available *&#x60;slug&#x60;* values. (e.g. &#x60;hummer&#x60;) (required)
     * @param  string $model The particular **&#x60;Model&#x60;** of the brand. You can use _**&#x60;GET /models/&#x60;**_ to get a list of available *&#x60;slug&#x60;* values. (e.g. &#x60;h1&#x60;) (required)
     * @param  string $mode The **&#x60;Mode&#x60;** is used to set the search mode for data on the axes of wheelpairs. By default, the search uses the axles of the front and rear wheelset. **&#x60;Mode&#x60;** possible values: __*&#x60;both&#x60;*__, __*&#x60;front_only&#x60;*__ or __*&#x60;rear_only&#x60;*__. (e.g. &#x60;both&#x60;) (optional)
     * @param  string[] $region A **&#x60;Region&#x60;** is the region where the car was officially sold or is still being sold. You can use _**&#x60;GET /regions/&#x60;**_ to get a list of available *&#x60;slug&#x60;* values. (e.g. &#x60;usdm&#x60;) (optional)
     * @param  string $ordering Comma-separated list without spaces. Supported field names: *&#x60;make&#x60;*, *&#x60;model&#x60;*, *&#x60;trim&#x60;*, *&#x60;start_year&#x60;*, *&#x60;end_year&#x60;* (optional)
     * @param  int $limit (optional, default to 50)
     * @param  int $offset (optional, default to 0)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function hfSearchByTireModificationsAsyncWithHttpInfo($overall_diameter, $section_width, $rim_diameter, $make, $model, $mode = null, $region = null, $ordering = null, $limit = '50', $offset = '0')
    {
        $returnType = '\WheelSizeApiClient\Model\SearchByHFTireModificationReportOutput';
        $request = $this->hfSearchByTireModificationsRequest($overall_diameter, $section_width, $rim_diameter, $make, $model, $mode, $region, $ordering, $limit, $offset);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'hfSearchByTireModifications'
     *
     * @param  float $overall_diameter **&#x60;Overall diameter&#x60;** is the diameter of the inflated tire without any load, inches. You can use _**&#x60;GET /by_hf_tire/od/&#x60;**_ to get a list of available *&#x60;value&#x60;* values. (e.g. &#x60;37&#x60;) (required)
     * @param  float $section_width **&#x60;Section width&#x60;** is the width of the tire in inches. You can use _**&#x60;GET /by_hf_tire/sw/&#x60;**_ to get a list of available *&#x60;value&#x60;* values. (e.g. &#x60;12.5&#x60;) (required)
     * @param  float $rim_diameter Rim **&#x60;diameter&#x60;** is the distance measured in inches across the face of the wheel, from bead seat to bead seat. You can use _**&#x60;GET /by_hf_tire/rd/&#x60;**_ to get a list of available *&#x60;value&#x60;* values. (e.g. &#x60;16.5&#x60;) (required)
     * @param  string $make A car&#39;s **&#x60;Make&#x60;** is the brand of the vehicle. You can use _**&#x60;GET /makes/&#x60;**_ to get a list of available *&#x60;slug&#x60;* values. (e.g. &#x60;hummer&#x60;) (required)
     * @param  string $model The particular **&#x60;Model&#x60;** of the brand. You can use _**&#x60;GET /models/&#x60;**_ to get a list of available *&#x60;slug&#x60;* values. (e.g. &#x60;h1&#x60;) (required)
     * @param  string $mode The **&#x60;Mode&#x60;** is used to set the search mode for data on the axes of wheelpairs. By default, the search uses the axles of the front and rear wheelset. **&#x60;Mode&#x60;** possible values: __*&#x60;both&#x60;*__, __*&#x60;front_only&#x60;*__ or __*&#x60;rear_only&#x60;*__. (e.g. &#x60;both&#x60;) (optional)
     * @param  string[] $region A **&#x60;Region&#x60;** is the region where the car was officially sold or is still being sold. You can use _**&#x60;GET /regions/&#x60;**_ to get a list of available *&#x60;slug&#x60;* values. (e.g. &#x60;usdm&#x60;) (optional)
     * @param  string $ordering Comma-separated list without spaces. Supported field names: *&#x60;make&#x60;*, *&#x60;model&#x60;*, *&#x60;trim&#x60;*, *&#x60;start_year&#x60;*, *&#x60;end_year&#x60;* (optional)
     * @param  int $limit (optional, default to 50)
     * @param  int $offset (optional, default to 0)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function hfSearchByTireModificationsRequest($overall_diameter, $section_width, $rim_diameter, $make, $model, $mode = null, $region = null, $ordering = null, $limit = '50', $offset = '0')
    {
        // verify the required parameter 'overall_diameter' is set
        if ($overall_diameter === null || (is_array($overall_diameter) && count($overall_diameter) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $overall_diameter when calling hfSearchByTireModifications'
            );
        }
        // verify the required parameter 'section_width' is set
        if ($section_width === null || (is_array($section_width) && count($section_width) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $section_width when calling hfSearchByTireModifications'
            );
        }
        // verify the required parameter 'rim_diameter' is set
        if ($rim_diameter === null || (is_array($rim_diameter) && count($rim_diameter) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $rim_diameter when calling hfSearchByTireModifications'
            );
        }
        // verify the required parameter 'make' is set
        if ($make === null || (is_array($make) && count($make) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $make when calling hfSearchByTireModifications'
            );
        }
        // verify the required parameter 'model' is set
        if ($model === null || (is_array($model) && count($model) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $model when calling hfSearchByTireModifications'
            );
        }
        if ($ordering !== null && strlen($ordering) < 1) {
            throw new \InvalidArgumentException('invalid length for "$ordering" when calling SearchByLTHighFlotationTireApi.hfSearchByTireModifications, must be bigger than or equal to 1.');
        }

        if ($limit !== null && $limit > 100) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling SearchByLTHighFlotationTireApi.hfSearchByTireModifications, must be smaller than or equal to 100.');
        }
        if ($limit !== null && $limit < 0) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling SearchByLTHighFlotationTireApi.hfSearchByTireModifications, must be bigger than or equal to 0.');
        }

        if ($offset !== null && $offset < 0) {
            throw new \InvalidArgumentException('invalid value for "$offset" when calling SearchByLTHighFlotationTireApi.hfSearchByTireModifications, must be bigger than or equal to 0.');
        }


        $resourcePath = '/by_hf_tire/search/modifications/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($overall_diameter !== null) {
            $queryParams['overall_diameter'] = ObjectSerializer::toQueryValue($overall_diameter);
        }
        // query params
        if ($section_width !== null) {
            $queryParams['section_width'] = ObjectSerializer::toQueryValue($section_width);
        }
        // query params
        if ($rim_diameter !== null) {
            $queryParams['rim_diameter'] = ObjectSerializer::toQueryValue($rim_diameter);
        }
        // query params
        if ($make !== null) {
            $queryParams['make'] = ObjectSerializer::toQueryValue($make);
        }
        // query params
        if ($model !== null) {
            $queryParams['model'] = ObjectSerializer::toQueryValue($model);
        }
        // query params
        if ($mode !== null) {
            $queryParams['mode'] = ObjectSerializer::toQueryValue($mode);
        }
        // query params
        if (is_array($region)) {
            $queryParams['region'] = $region;
        } else
        if ($region !== null) {
            $queryParams['region'] = ObjectSerializer::toQueryValue($region);
        }
        // query params
        if ($ordering !== null) {
            $queryParams['ordering'] = ObjectSerializer::toQueryValue($ordering);
        }
        // query params
        if ($limit !== null) {
            $queryParams['limit'] = ObjectSerializer::toQueryValue($limit);
        }
        // query params
        if ($offset !== null) {
            $queryParams['offset'] = ObjectSerializer::toQueryValue($offset);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('user_key');
        if ($apiKey !== null) {
            $queryParams['user_key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation hfSectionWidths
     *
     * List section widths (inches)
     *
     * @param  float $overall_diameter **&#x60;Overall diameter&#x60;** is the diameter of the inflated tire without any load, inches. You can use _**&#x60;GET /by_hf_tire/od/&#x60;**_ to get a list of available *&#x60;value&#x60;* values. (e.g. &#x60;37&#x60;) (optional)
     * @param  string[] $region A **&#x60;Region&#x60;** is the region where the car was officially sold or is still being sold. You can use _**&#x60;GET /regions/&#x60;**_ to get a list of available *&#x60;slug&#x60;* values. (e.g. &#x60;usdm&#x60;) (optional)
     * @param  string $ordering Comma-separated list without spaces. Supported field names: *&#x60;value&#x60;* (optional)
     *
     * @throws \WheelSizeApiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \WheelSizeApiClient\Model\SectionWidthReportOutput
     */
    public function hfSectionWidths($overall_diameter = null, $region = null, $ordering = null)
    {
        list($response) = $this->hfSectionWidthsWithHttpInfo($overall_diameter, $region, $ordering);
        return $response;
    }

    /**
     * Operation hfSectionWidthsWithHttpInfo
     *
     * List section widths (inches)
     *
     * @param  float $overall_diameter **&#x60;Overall diameter&#x60;** is the diameter of the inflated tire without any load, inches. You can use _**&#x60;GET /by_hf_tire/od/&#x60;**_ to get a list of available *&#x60;value&#x60;* values. (e.g. &#x60;37&#x60;) (optional)
     * @param  string[] $region A **&#x60;Region&#x60;** is the region where the car was officially sold or is still being sold. You can use _**&#x60;GET /regions/&#x60;**_ to get a list of available *&#x60;slug&#x60;* values. (e.g. &#x60;usdm&#x60;) (optional)
     * @param  string $ordering Comma-separated list without spaces. Supported field names: *&#x60;value&#x60;* (optional)
     *
     * @throws \WheelSizeApiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \WheelSizeApiClient\Model\SectionWidthReportOutput, HTTP status code, HTTP response headers (array of strings)
     */
    public function hfSectionWidthsWithHttpInfo($overall_diameter = null, $region = null, $ordering = null)
    {
        $returnType = '\WheelSizeApiClient\Model\SectionWidthReportOutput';
        $request = $this->hfSectionWidthsRequest($overall_diameter, $region, $ordering);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WheelSizeApiClient\Model\SectionWidthReportOutput',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation hfSectionWidthsAsync
     *
     * List section widths (inches)
     *
     * @param  float $overall_diameter **&#x60;Overall diameter&#x60;** is the diameter of the inflated tire without any load, inches. You can use _**&#x60;GET /by_hf_tire/od/&#x60;**_ to get a list of available *&#x60;value&#x60;* values. (e.g. &#x60;37&#x60;) (optional)
     * @param  string[] $region A **&#x60;Region&#x60;** is the region where the car was officially sold or is still being sold. You can use _**&#x60;GET /regions/&#x60;**_ to get a list of available *&#x60;slug&#x60;* values. (e.g. &#x60;usdm&#x60;) (optional)
     * @param  string $ordering Comma-separated list without spaces. Supported field names: *&#x60;value&#x60;* (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function hfSectionWidthsAsync($overall_diameter = null, $region = null, $ordering = null)
    {
        return $this->hfSectionWidthsAsyncWithHttpInfo($overall_diameter, $region, $ordering)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation hfSectionWidthsAsyncWithHttpInfo
     *
     * List section widths (inches)
     *
     * @param  float $overall_diameter **&#x60;Overall diameter&#x60;** is the diameter of the inflated tire without any load, inches. You can use _**&#x60;GET /by_hf_tire/od/&#x60;**_ to get a list of available *&#x60;value&#x60;* values. (e.g. &#x60;37&#x60;) (optional)
     * @param  string[] $region A **&#x60;Region&#x60;** is the region where the car was officially sold or is still being sold. You can use _**&#x60;GET /regions/&#x60;**_ to get a list of available *&#x60;slug&#x60;* values. (e.g. &#x60;usdm&#x60;) (optional)
     * @param  string $ordering Comma-separated list without spaces. Supported field names: *&#x60;value&#x60;* (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function hfSectionWidthsAsyncWithHttpInfo($overall_diameter = null, $region = null, $ordering = null)
    {
        $returnType = '\WheelSizeApiClient\Model\SectionWidthReportOutput';
        $request = $this->hfSectionWidthsRequest($overall_diameter, $region, $ordering);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'hfSectionWidths'
     *
     * @param  float $overall_diameter **&#x60;Overall diameter&#x60;** is the diameter of the inflated tire without any load, inches. You can use _**&#x60;GET /by_hf_tire/od/&#x60;**_ to get a list of available *&#x60;value&#x60;* values. (e.g. &#x60;37&#x60;) (optional)
     * @param  string[] $region A **&#x60;Region&#x60;** is the region where the car was officially sold or is still being sold. You can use _**&#x60;GET /regions/&#x60;**_ to get a list of available *&#x60;slug&#x60;* values. (e.g. &#x60;usdm&#x60;) (optional)
     * @param  string $ordering Comma-separated list without spaces. Supported field names: *&#x60;value&#x60;* (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function hfSectionWidthsRequest($overall_diameter = null, $region = null, $ordering = null)
    {
        if ($ordering !== null && strlen($ordering) < 1) {
            throw new \InvalidArgumentException('invalid length for "$ordering" when calling SearchByLTHighFlotationTireApi.hfSectionWidths, must be bigger than or equal to 1.');
        }


        $resourcePath = '/by_hf_tire/sw/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($overall_diameter !== null) {
            $queryParams['overall_diameter'] = ObjectSerializer::toQueryValue($overall_diameter);
        }
        // query params
        if (is_array($region)) {
            $queryParams['region'] = $region;
        } else
        if ($region !== null) {
            $queryParams['region'] = ObjectSerializer::toQueryValue($region);
        }
        // query params
        if ($ordering !== null) {
            $queryParams['ordering'] = ObjectSerializer::toQueryValue($ordering);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('user_key');
        if ($apiKey !== null) {
            $queryParams['user_key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
